{"version":3,"sources":["TapGestureHandler.ts"],"names":["createHandler","baseGestureHandlerProps","tapGestureHandlerProps","tapHandlerName","TapGestureHandler","name","allowedProps","config"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,SAEEC,uBAFF,QAGO,wBAHP;AAKA,OAAO,MAAMC,sBAAsB,GAAG,CACpC,eADoC,EAEpC,YAFoC,EAGpC,cAHoC,EAIpC,WAJoC,EAKpC,WALoC,EAMpC,SANoC,EAOpC,aAPoC,CAA/B;AAuEP,OAAO,MAAMC,cAAc,GAAG,mBAAvB;AAGP;AACA,OAAO,MAAMC,iBAAiB,GAAGJ,aAAa,CAG5C;AACAK,EAAAA,IAAI,EAAEF,cADN;AAEAG,EAAAA,YAAY,EAAE,CACZ,GAAGL,uBADS,EAEZ,GAAGC,sBAFS,CAFd;AAMAK,EAAAA,MAAM,EAAE;AANR,CAH4C,CAAvC","sourcesContent":["import createHandler from './createHandler';\r\nimport {\r\n  BaseGestureHandlerProps,\r\n  baseGestureHandlerProps,\r\n} from './gestureHandlerCommon';\r\n\r\nexport const tapGestureHandlerProps = [\r\n  'maxDurationMs',\r\n  'maxDelayMs',\r\n  'numberOfTaps',\r\n  'maxDeltaX',\r\n  'maxDeltaY',\r\n  'maxDist',\r\n  'minPointers',\r\n] as const;\r\n\r\nexport type TapGestureHandlerEventPayload = {\r\n  x: number;\r\n  y: number;\r\n  absoluteX: number;\r\n  absoluteY: number;\r\n};\r\nexport interface TapGestureConfig {\r\n  /**\r\n   * Minimum number of pointers (fingers) required to be placed before the\r\n   * handler activates. Should be a positive integer.\r\n   * The default value is 1.\r\n   */\r\n  minPointers?: number;\r\n\r\n  /**\r\n   * Maximum time, expressed in milliseconds, that defines how fast a finger\r\n   * must be released after a touch. The default value is 500.\r\n   */\r\n  maxDurationMs?: number;\r\n\r\n  /**\r\n   * Maximum time, expressed in milliseconds, that can pass before the next tap\r\n   * if many taps are required. The default value is 500.\r\n   */\r\n  maxDelayMs?: number;\r\n\r\n  /**\r\n   * Number of tap gestures required to activate the handler. The default value\r\n   * is 1.\r\n   */\r\n  numberOfTaps?: number;\r\n\r\n  /**\r\n   * Maximum distance, expressed in points, that defines how far the finger is\r\n   * allowed to travel along the X axis during a tap gesture. If the finger\r\n   * travels further than the defined distance along the X axis and the handler\r\n   * hasn't yet activated, it will fail to recognize the gesture.\r\n   */\r\n  maxDeltaX?: number;\r\n\r\n  /**\r\n   * Maximum distance, expressed in points, that defines how far the finger is\r\n   * allowed to travel along the Y axis during a tap gesture. If the finger\r\n   * travels further than the defined distance along the Y axis and the handler\r\n   * hasn't yet activated, it will fail to recognize the gesture.\r\n   */\r\n  maxDeltaY?: number;\r\n\r\n  /**\r\n   * Maximum distance, expressed in points, that defines how far the finger is\r\n   * allowed to travel during a tap gesture. If the finger travels further than\r\n   * the defined distance and the handler hasn't yet\r\n   * activated, it will fail to recognize the gesture.\r\n   */\r\n  maxDist?: number;\r\n}\r\n\r\nexport interface TapGestureHandlerProps\r\n  extends BaseGestureHandlerProps<TapGestureHandlerEventPayload>,\r\n    TapGestureConfig {}\r\n\r\nexport const tapHandlerName = 'TapGestureHandler';\r\n\r\nexport type TapGestureHandler = typeof TapGestureHandler;\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\r\nexport const TapGestureHandler = createHandler<\r\n  TapGestureHandlerProps,\r\n  TapGestureHandlerEventPayload\r\n>({\r\n  name: tapHandlerName,\r\n  allowedProps: [\r\n    ...baseGestureHandlerProps,\r\n    ...tapGestureHandlerProps,\r\n  ] as const,\r\n  config: {},\r\n});\r\n"]}