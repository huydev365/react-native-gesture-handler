{"version":3,"sources":["LongPressGestureHandler.ts"],"names":["createHandler","baseGestureHandlerProps","longPressGestureHandlerProps","longPressHandlerName","LongPressGestureHandler","name","allowedProps","config"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,SAEEC,uBAFF,QAGO,wBAHP;AAKA,OAAO,MAAMC,4BAA4B,GAAG,CAC1C,eAD0C,EAE1C,SAF0C,CAArC;AAiEP,OAAO,MAAMC,oBAAoB,GAAG,yBAA7B;AAGP;AACA,OAAO,MAAMC,uBAAuB,GAAGJ,aAAa,CAGlD;AACAK,EAAAA,IAAI,EAAEF,oBADN;AAEAG,EAAAA,YAAY,EAAE,CACZ,GAAGL,uBADS,EAEZ,GAAGC,4BAFS,CAFd;AAMAK,EAAAA,MAAM,EAAE;AANR,CAHkD,CAA7C","sourcesContent":["import createHandler from './createHandler';\r\nimport {\r\n  BaseGestureHandlerProps,\r\n  baseGestureHandlerProps,\r\n} from './gestureHandlerCommon';\r\n\r\nexport const longPressGestureHandlerProps = [\r\n  'minDurationMs',\r\n  'maxDist',\r\n] as const;\r\n\r\nexport type LongPressGestureHandlerEventPayload = {\r\n  /**\r\n   * X coordinate, expressed in points, of the current position of the pointer\r\n   * (finger or a leading pointer when there are multiple fingers placed)\r\n   * relative to the view attached to the handler.\r\n   */\r\n  x: number;\r\n\r\n  /**\r\n   * Y coordinate, expressed in points, of the current position of the pointer\r\n   * (finger or a leading pointer when there are multiple fingers placed)\r\n   * relative to the view attached to the handler.\r\n   */\r\n  y: number;\r\n\r\n  /**\r\n   * X coordinate, expressed in points, of the current position of the pointer\r\n   * (finger or a leading pointer when there are multiple fingers placed)\r\n   * relative to the window. It is recommended to use `absoluteX` instead of\r\n   * `x` in cases when the view attached to the handler can be transformed as an\r\n   * effect of the gesture.\r\n   */\r\n  absoluteX: number;\r\n\r\n  /**\r\n   * Y coordinate, expressed in points, of the current position of the pointer\r\n   * (finger or a leading pointer when there are multiple fingers placed)\r\n   * relative to the window. It is recommended to use `absoluteY` instead of\r\n   * `y` in cases when the view attached to the handler can be transformed as an\r\n   * effect of the gesture.\r\n   */\r\n  absoluteY: number;\r\n\r\n  /**\r\n   * Duration of the long press (time since the start of the event), expressed\r\n   * in milliseconds.\r\n   */\r\n  duration: number;\r\n};\r\n\r\nexport interface LongPressGestureConfig {\r\n  /**\r\n   * Minimum time, expressed in milliseconds, that a finger must remain pressed on\r\n   * the corresponding view. The default value is 500.\r\n   */\r\n  minDurationMs?: number;\r\n\r\n  /**\r\n   * Maximum distance, expressed in points, that defines how far the finger is\r\n   * allowed to travel during a long press gesture. If the finger travels\r\n   * further than the defined distance and the handler hasn't yet activated, it\r\n   * will fail to recognize the gesture. The default value is 10.\r\n   */\r\n  maxDist?: number;\r\n}\r\n\r\nexport interface LongPressGestureHandlerProps\r\n  extends BaseGestureHandlerProps<LongPressGestureHandlerEventPayload>,\r\n    LongPressGestureConfig {}\r\n\r\nexport const longPressHandlerName = 'LongPressGestureHandler';\r\n\r\nexport type LongPressGestureHandler = typeof LongPressGestureHandler;\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\r\nexport const LongPressGestureHandler = createHandler<\r\n  LongPressGestureHandlerProps,\r\n  LongPressGestureHandlerEventPayload\r\n>({\r\n  name: longPressHandlerName,\r\n  allowedProps: [\r\n    ...baseGestureHandlerProps,\r\n    ...longPressGestureHandlerProps,\r\n  ] as const,\r\n  config: {},\r\n});\r\n"]}