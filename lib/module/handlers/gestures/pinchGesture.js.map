{"version":3,"sources":["pinchGesture.ts"],"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","scaleChange","scale","PinchGesture","constructor","handlerName","onChange","callback","handlers"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,WAArC;;AAQA,SAASC,qBAAT,CACEC,OADF,EAEEC,QAFF,EAGE;AACA;;AACA,MAAIC,aAAJ;;AACA,MAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1BD,IAAAA,aAAa,GAAG;AACdE,MAAAA,WAAW,EAAEJ,OAAO,CAACK;AADP,KAAhB;AAGD,GAJD,MAIO;AACLH,IAAAA,aAAa,GAAG;AACdE,MAAAA,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;AADxB,KAAhB;AAGD;;AAED,SAAO,EAAE,GAAGL,OAAL;AAAc,OAAGE;AAAjB,GAAP;AACD;;AAED,OAAO,MAAMI,YAAN,SAA2BR,oBAA3B,CAGL;AACAS,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,WAAL,GAAmB,qBAAnB;AACD;;AAEDC,EAAAA,QAAQ,CACNC,QADM,EAMN;AACA;AACA,SAAKC,QAAL,CAAcZ,qBAAd,GAAsCA,qBAAtC;AACA,WAAO,MAAMU,QAAN,CAAeC,QAAf,CAAP;AACD;;AAjBD","sourcesContent":["import { ContinousBaseGesture } from './gesture';\r\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\r\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\r\n\r\nexport type PinchGestureChangeEventPayload = {\r\n  scaleChange: number;\r\n};\r\n\r\nfunction changeEventCalculator(\r\n  current: GestureUpdateEvent<PinchGestureHandlerEventPayload>,\r\n  previous?: GestureUpdateEvent<PinchGestureHandlerEventPayload>\r\n) {\r\n  'worklet';\r\n  let changePayload: PinchGestureChangeEventPayload;\r\n  if (previous === undefined) {\r\n    changePayload = {\r\n      scaleChange: current.scale,\r\n    };\r\n  } else {\r\n    changePayload = {\r\n      scaleChange: current.scale / previous.scale,\r\n    };\r\n  }\r\n\r\n  return { ...current, ...changePayload };\r\n}\r\n\r\nexport class PinchGesture extends ContinousBaseGesture<\r\n  PinchGestureHandlerEventPayload,\r\n  PinchGestureChangeEventPayload\r\n> {\r\n  constructor() {\r\n    super();\r\n\r\n    this.handlerName = 'PinchGestureHandler';\r\n  }\r\n\r\n  onChange(\r\n    callback: (\r\n      event: GestureUpdateEvent<\r\n        PinchGestureHandlerEventPayload & PinchGestureChangeEventPayload\r\n      >\r\n    ) => void\r\n  ) {\r\n    // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\r\n    this.handlers.changeEventCalculator = changeEventCalculator;\r\n    return super.onChange(callback);\r\n  }\r\n}\r\n\r\nexport type PinchGestureType = InstanceType<typeof PinchGesture>;\r\n"]}