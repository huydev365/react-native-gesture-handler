{"version":3,"sources":["eventReceiver.ts"],"names":["DeviceEventEmitter","State","EventType","findHandler","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","dummyStateManager","begin","console","warn","activate","end","fail","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","startListening","stopListening","addListener","removeSubscription"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\r\nimport { State } from '../../State';\r\nimport { EventType } from '../../EventType';\r\nimport {\r\n  GestureTouchEvent,\r\n  GestureUpdateEvent,\r\n  GestureStateChangeEvent,\r\n} from '../gestureHandlerCommon';\r\nimport { GestureStateManagerType } from './gestureStateManager';\r\nimport { findHandler } from '../handlersRegistry';\r\nimport { BaseGesture } from './gesture';\r\n\r\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\r\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\r\n\r\nconst dummyStateManager: GestureStateManagerType = {\r\n  begin: () => {\r\n    console.warn(\r\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\r\n    );\r\n  },\r\n  activate: () => {\r\n    console.warn(\r\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\r\n    );\r\n  },\r\n  end: () => {\r\n    console.warn(\r\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\r\n    );\r\n  },\r\n  fail: () => {\r\n    console.warn(\r\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\r\n    );\r\n  },\r\n};\r\n\r\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\r\n\r\nfunction isStateChangeEvent(\r\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\r\n): event is GestureStateChangeEvent {\r\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\r\n  return event.oldState != null;\r\n}\r\n\r\nfunction isTouchEvent(\r\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\r\n): event is GestureTouchEvent {\r\n  return event.eventType != null;\r\n}\r\n\r\nfunction onGestureHandlerEvent(\r\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\r\n) {\r\n  const handler = findHandler(event.handlerTag) as BaseGesture<\r\n    Record<string, unknown>\r\n  >;\r\n\r\n  if (handler) {\r\n    if (isStateChangeEvent(event)) {\r\n      if (\r\n        event.oldState === State.UNDETERMINED &&\r\n        event.state === State.BEGAN\r\n      ) {\r\n        handler.handlers.onBegin?.(event);\r\n      } else if (\r\n        (event.oldState === State.BEGAN ||\r\n          event.oldState === State.UNDETERMINED) &&\r\n        event.state === State.ACTIVE\r\n      ) {\r\n        handler.handlers.onStart?.(event);\r\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\r\n      } else if (event.oldState !== event.state && event.state === State.END) {\r\n        if (event.oldState === State.ACTIVE) {\r\n          handler.handlers.onEnd?.(event, true);\r\n        }\r\n        handler.handlers.onFinalize?.(event, true);\r\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\r\n      } else if (\r\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\r\n        event.oldState !== event.state\r\n      ) {\r\n        if (event.oldState === State.ACTIVE) {\r\n          handler.handlers.onEnd?.(event, false);\r\n        }\r\n        handler.handlers.onFinalize?.(event, false);\r\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\r\n      }\r\n    } else if (isTouchEvent(event)) {\r\n      switch (event.eventType) {\r\n        case EventType.TOUCHES_DOWN:\r\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\r\n          break;\r\n        case EventType.TOUCHES_MOVE:\r\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\r\n          break;\r\n        case EventType.TOUCHES_UP:\r\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\r\n          break;\r\n        case EventType.TOUCHES_CANCELLED:\r\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\r\n          break;\r\n      }\r\n    } else {\r\n      handler.handlers.onUpdate?.(event);\r\n\r\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\r\n        handler.handlers.onChange?.(\r\n          handler.handlers.changeEventCalculator?.(\r\n            event,\r\n            lastUpdateEvent[handler.handlers.handlerTag]\r\n          )\r\n        );\r\n\r\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function startListening() {\r\n  stopListening();\r\n\r\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\r\n    'onGestureHandlerEvent',\r\n    onGestureHandlerEvent\r\n  );\r\n\r\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\r\n    'onGestureHandlerStateChange',\r\n    onGestureHandlerEvent\r\n  );\r\n}\r\n\r\nexport function stopListening() {\r\n  if (gestureHandlerEventSubscription) {\r\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\r\n\r\n    gestureHandlerEventSubscription = null;\r\n  }\r\n\r\n  if (gestureHandlerStateChangeEventSubscription) {\r\n    DeviceEventEmitter.removeSubscription(\r\n      gestureHandlerStateChangeEventSubscription\r\n    );\r\n\r\n    gestureHandlerStateChangeEventSubscription = null;\r\n  }\r\n}\r\n"]}