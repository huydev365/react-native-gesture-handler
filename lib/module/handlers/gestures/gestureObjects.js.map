{"version":3,"sources":["gestureObjects.ts"],"names":["FlingGesture","ForceTouchGesture","ComposedGesture","ExclusiveGesture","SimultaneousGesture","LongPressGesture","PanGesture","PinchGesture","RotationGesture","TapGesture","NativeGesture","ManualGesture","GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Race","gestures","Simultaneous","Exclusive"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SACEC,eADF,EAEEC,gBAFF,EAGEC,mBAHF,QAIO,sBAJP;AAKA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,GAAG,EAAE,MAAM;AACT,WAAO,IAAIJ,UAAJ,EAAP;AACD,GAH2B;AAK5BK,EAAAA,GAAG,EAAE,MAAM;AACT,WAAO,IAAIR,UAAJ,EAAP;AACD,GAP2B;AAS5BS,EAAAA,KAAK,EAAE,MAAM;AACX,WAAO,IAAIR,YAAJ,EAAP;AACD,GAX2B;AAa5BS,EAAAA,QAAQ,EAAE,MAAM;AACd,WAAO,IAAIR,eAAJ,EAAP;AACD,GAf2B;AAiB5BS,EAAAA,KAAK,EAAE,MAAM;AACX,WAAO,IAAIjB,YAAJ,EAAP;AACD,GAnB2B;AAqB5BkB,EAAAA,SAAS,EAAE,MAAM;AACf,WAAO,IAAIb,gBAAJ,EAAP;AACD,GAvB2B;AAyB5Bc,EAAAA,UAAU,EAAE,MAAM;AAChB,WAAO,IAAIlB,iBAAJ,EAAP;AACD,GA3B2B;AA6B5BmB,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO,IAAIV,aAAJ,EAAP;AACD,GA/B2B;AAiC5BW,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO,IAAIV,aAAJ,EAAP;AACD,GAnC2B;;AAqC5B;AACF;AACA;AACA;AACEW,EAAAA,IAAI,EAAE,CAAC,GAAGC,QAAJ,KAA4B;AAChC,WAAO,IAAIrB,eAAJ,CAAoB,GAAGqB,QAAvB,CAAP;AACD,GA3C2B;;AA6C5B;AACF;AACA;AACEC,EAAAA,YAAY,CAAC,GAAGD,QAAJ,EAAyB;AACnC,WAAO,IAAInB,mBAAJ,CAAwB,GAAGmB,QAA3B,CAAP;AACD,GAlD2B;;AAoD5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,SAAS,CAAC,GAAGF,QAAJ,EAAyB;AAChC,WAAO,IAAIpB,gBAAJ,CAAqB,GAAGoB,QAAxB,CAAP;AACD;;AA7D2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\r\nimport { ForceTouchGesture } from './forceTouchGesture';\r\nimport { Gesture } from './gesture';\r\nimport {\r\n  ComposedGesture,\r\n  ExclusiveGesture,\r\n  SimultaneousGesture,\r\n} from './gestureComposition';\r\nimport { LongPressGesture } from './longPressGesture';\r\nimport { PanGesture } from './panGesture';\r\nimport { PinchGesture } from './pinchGesture';\r\nimport { RotationGesture } from './rotationGesture';\r\nimport { TapGesture } from './tapGesture';\r\nimport { NativeGesture } from './nativeGesture';\r\nimport { ManualGesture } from './manualGesture';\r\n\r\nexport const GestureObjects = {\r\n  Tap: () => {\r\n    return new TapGesture();\r\n  },\r\n\r\n  Pan: () => {\r\n    return new PanGesture();\r\n  },\r\n\r\n  Pinch: () => {\r\n    return new PinchGesture();\r\n  },\r\n\r\n  Rotation: () => {\r\n    return new RotationGesture();\r\n  },\r\n\r\n  Fling: () => {\r\n    return new FlingGesture();\r\n  },\r\n\r\n  LongPress: () => {\r\n    return new LongPressGesture();\r\n  },\r\n\r\n  ForceTouch: () => {\r\n    return new ForceTouchGesture();\r\n  },\r\n\r\n  Native: () => {\r\n    return new NativeGesture();\r\n  },\r\n\r\n  Manual: () => {\r\n    return new ManualGesture();\r\n  },\r\n\r\n  /**\r\n   * Builds a composed gesture consisting of gestures provided as parameters.\r\n   * The first one that becomes active cancels the rest of gestures.\r\n   */\r\n  Race: (...gestures: Gesture[]) => {\r\n    return new ComposedGesture(...gestures);\r\n  },\r\n\r\n  /**\r\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\r\n   */\r\n  Simultaneous(...gestures: Gesture[]) {\r\n    return new SimultaneousGesture(...gestures);\r\n  },\r\n\r\n  /**\r\n   * Builds a composed gesture where only one of the provided gestures can become active.\r\n   * Priority is decided through the order of gestures: the first one has higher priority\r\n   * than the second one, second one has higher priority than the third one, and so on.\r\n   * For example, to make a gesture that recognizes both single and double tap you need\r\n   * to call Exclusive(doubleTap, singleTap).\r\n   */\r\n  Exclusive(...gestures: Gesture[]) {\r\n    return new ExclusiveGesture(...gestures);\r\n  },\r\n};\r\n"]}