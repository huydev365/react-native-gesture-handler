{"version":3,"sources":["reanimatedWrapper.ts"],"names":["Reanimated","require","setGestureState","console","warn","e"],"mappings":"AAUA,IAAIA,UAAJ;;AAkBA,IAAI;AACFA,EAAAA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAApB;;AAEA,MAAI,CAACD,UAAU,CAACE,eAAhB,EAAiC;AAC/BF,IAAAA,UAAU,CAACE,eAAX,GAA6B,MAAM;AACjC;;AACAC,MAAAA,OAAO,CAACC,IAAR,CACE,gGADF;AAGD,KALD;AAMD,GAVC,CAWF;AACA;AACA;;AACD,CAdD,CAcE,OAAOC,CAAP,EAAU,CAAE;;AAEd,SAASL,UAAT","sourcesContent":["import { ComponentClass } from 'react';\r\nimport {\r\n  GestureUpdateEvent,\r\n  GestureStateChangeEvent,\r\n} from '../gestureHandlerCommon';\r\n\r\nexport interface SharedValue<T> {\r\n  value: T;\r\n}\r\n\r\nlet Reanimated: {\r\n  default: {\r\n    // Slightly modified definition copied from 'react-native-reanimated'\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    createAnimatedComponent<P extends object>(\r\n      component: ComponentClass<P>,\r\n      options?: unknown\r\n    ): ComponentClass<P>;\r\n  };\r\n  useEvent: (\r\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\r\n    events: string[],\r\n    rebuild: boolean\r\n  ) => unknown;\r\n  useSharedValue: <T>(value: T) => SharedValue<T>;\r\n  setGestureState: (handlerTag: number, newState: number) => void;\r\n};\r\n\r\ntry {\r\n  Reanimated = require('react-native-reanimated');\r\n\r\n  if (!Reanimated.setGestureState) {\r\n    Reanimated.setGestureState = () => {\r\n      'worklet';\r\n      console.warn(\r\n        'Please use newer version of react-native-reanimated in order to control state of the gestures.'\r\n      );\r\n    };\r\n  }\r\n  // When 'react-native-reanimated' is not available we want to\r\n  // quietly continue\r\n  // eslint-disable-next-line no-empty\r\n} catch (e) {}\r\n\r\nexport { Reanimated };\r\n"]}