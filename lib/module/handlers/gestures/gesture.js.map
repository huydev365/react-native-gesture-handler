{"version":3,"sources":["gesture.ts"],"names":["getNextHandlerTag","CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","BaseGesture","handlerTag","isWorklet","addDependency","key","gesture","value","config","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","handlers","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","simultaneousWithExternalGesture","gestures","requireExternalGestureToFail","withTestId","id","testId","initialize","current","toGestureArray","prepare","ContinousBaseGesture","onUpdate","onChange","manualActivation"],"mappings":"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","sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\r\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\r\nimport {\r\n  HitSlop,\r\n  CommonGestureConfig,\r\n  GestureTouchEvent,\r\n  GestureStateChangeEvent,\r\n  GestureUpdateEvent,\r\n} from '../gestureHandlerCommon';\r\nimport { getNextHandlerTag } from '../handlersRegistry';\r\nimport { GestureStateManagerType } from './gestureStateManager';\r\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\r\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\r\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\r\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\r\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\r\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\r\n\r\nexport type GestureType =\r\n  | BaseGesture<Record<string, unknown>>\r\n  | BaseGesture<Record<string, never>>\r\n  | BaseGesture<TapGestureHandlerEventPayload>\r\n  | BaseGesture<PanGestureHandlerEventPayload>\r\n  | BaseGesture<LongPressGestureHandlerEventPayload>\r\n  | BaseGesture<RotationGestureHandlerEventPayload>\r\n  | BaseGesture<PinchGestureHandlerEventPayload>\r\n  | BaseGesture<FlingGestureHandlerEventPayload>\r\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\r\n  | BaseGesture<NativeViewGestureHandlerPayload>;\r\n\r\nexport type GestureRef =\r\n  | number\r\n  | GestureType\r\n  | React.RefObject<GestureType | undefined>\r\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\r\nexport interface BaseGestureConfig\r\n  extends CommonGestureConfig,\r\n    Record<string, unknown> {\r\n  ref?: React.MutableRefObject<GestureType | undefined>;\r\n  requireToFail?: GestureRef[];\r\n  simultaneousWith?: GestureRef[];\r\n  needsPointerData?: boolean;\r\n  manualActivation?: boolean;\r\n  testId?: string;\r\n}\r\n\r\ntype TouchEventHandlerType = (\r\n  event: GestureTouchEvent,\r\n  stateManager: GestureStateManagerType\r\n) => void;\r\n\r\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\r\n  handlerTag: number;\r\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\r\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\r\n  onEnd?: (\r\n    event: GestureStateChangeEvent<EventPayloadT>,\r\n    success: boolean\r\n  ) => void;\r\n  onFinalize?: (\r\n    event: GestureStateChangeEvent<EventPayloadT>,\r\n    success: boolean\r\n  ) => void;\r\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\r\n  onChange?: (event: any) => void;\r\n  onTouchesDown?: TouchEventHandlerType;\r\n  onTouchesMove?: TouchEventHandlerType;\r\n  onTouchesUp?: TouchEventHandlerType;\r\n  onTouchesCancelled?: TouchEventHandlerType;\r\n  changeEventCalculator?: (\r\n    current: GestureUpdateEvent<Record<string, unknown>>,\r\n    previous?: GestureUpdateEvent<Record<string, unknown>>\r\n  ) => GestureUpdateEvent<Record<string, unknown>>;\r\n  isWorklet: boolean[];\r\n};\r\n\r\nexport const CALLBACK_TYPE = {\r\n  UNDEFINED: 0,\r\n  BEGAN: 1,\r\n  START: 2,\r\n  UPDATE: 3,\r\n  CHANGE: 4,\r\n  END: 5,\r\n  FINALIZE: 6,\r\n  TOUCHES_DOWN: 7,\r\n  TOUCHES_MOVE: 8,\r\n  TOUCHES_UP: 9,\r\n  TOUCHES_CANCELLED: 10,\r\n} as const;\r\n\r\n// Allow using CALLBACK_TYPE as object and type\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\r\n\r\nexport abstract class Gesture {\r\n  /**\r\n   * Return array of gestures, providing the same interface for creating and updating\r\n   * handlers, no matter which object was used to create gesture instance.\r\n   */\r\n  abstract toGestureArray(): GestureType[];\r\n\r\n  /**\r\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\r\n   */\r\n  abstract initialize(): void;\r\n\r\n  /**\r\n   * Make sure that values of properties defining relations are arrays. Do any necessary\r\n   * preprocessing required to configure relations between handlers. Called just before\r\n   * updating the handler on the native side.\r\n   */\r\n  abstract prepare(): void;\r\n}\r\n\r\nexport abstract class BaseGesture<\r\n  EventPayloadT extends Record<string, unknown>\r\n> extends Gesture {\r\n  public handlerTag = -1;\r\n  public handlerName = '';\r\n  public config: BaseGestureConfig = {};\r\n  public handlers: HandlerCallbacks<EventPayloadT> = {\r\n    handlerTag: -1,\r\n    isWorklet: [false, false, false, false],\r\n  };\r\n\r\n  private addDependency(\r\n    key: 'simultaneousWith' | 'requireToFail',\r\n    gesture: Exclude<GestureRef, number>\r\n  ) {\r\n    const value = this.config[key];\r\n    this.config[key] = value\r\n      ? Array<GestureRef>().concat(value, gesture)\r\n      : [gesture];\r\n  }\r\n\r\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\r\n    this.config.ref = ref;\r\n    return this;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  protected isWorklet(callback: Function) {\r\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\r\n    return callback.__workletHash !== undefined;\r\n  }\r\n\r\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\r\n    this.handlers.onBegin = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\r\n    return this;\r\n  }\r\n\r\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\r\n    this.handlers.onStart = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\r\n    return this;\r\n  }\r\n\r\n  onEnd(\r\n    callback: (\r\n      event: GestureStateChangeEvent<EventPayloadT>,\r\n      success: boolean\r\n    ) => void\r\n  ) {\r\n    this.handlers.onEnd = callback;\r\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\r\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\r\n    return this;\r\n  }\r\n\r\n  onFinalize(\r\n    callback: (\r\n      event: GestureStateChangeEvent<EventPayloadT>,\r\n      success: boolean\r\n    ) => void\r\n  ) {\r\n    this.handlers.onFinalize = callback;\r\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\r\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\r\n    return this;\r\n  }\r\n\r\n  onTouchesDown(callback: TouchEventHandlerType) {\r\n    this.config.needsPointerData = true;\r\n    this.handlers.onTouchesDown = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(\r\n      callback\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  onTouchesMove(callback: TouchEventHandlerType) {\r\n    this.config.needsPointerData = true;\r\n    this.handlers.onTouchesMove = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(\r\n      callback\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  onTouchesUp(callback: TouchEventHandlerType) {\r\n    this.config.needsPointerData = true;\r\n    this.handlers.onTouchesUp = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(\r\n      callback\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  onTouchesCancelled(callback: TouchEventHandlerType) {\r\n    this.config.needsPointerData = true;\r\n    this.handlers.onTouchesCancelled = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(\r\n      callback\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  enabled(enabled: boolean) {\r\n    this.config.enabled = enabled;\r\n    return this;\r\n  }\r\n\r\n  shouldCancelWhenOutside(value: boolean) {\r\n    this.config.shouldCancelWhenOutside = value;\r\n    return this;\r\n  }\r\n\r\n  hitSlop(hitSlop: HitSlop) {\r\n    this.config.hitSlop = hitSlop;\r\n    return this;\r\n  }\r\n\r\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\r\n    for (const gesture of gestures) {\r\n      this.addDependency('simultaneousWith', gesture);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\r\n    for (const gesture of gestures) {\r\n      this.addDependency('requireToFail', gesture);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  withTestId(id: string) {\r\n    this.config.testId = id;\r\n    return this;\r\n  }\r\n\r\n  initialize() {\r\n    this.handlerTag = getNextHandlerTag();\r\n\r\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\r\n\r\n    if (this.config.ref) {\r\n      this.config.ref.current = this as GestureType;\r\n    }\r\n  }\r\n\r\n  toGestureArray(): GestureType[] {\r\n    return [this as GestureType];\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  prepare() {}\r\n}\r\n\r\nexport abstract class ContinousBaseGesture<\r\n  EventPayloadT extends Record<string, unknown>,\r\n  EventChangePayloadT extends Record<string, unknown>\r\n> extends BaseGesture<EventPayloadT> {\r\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\r\n    this.handlers.onUpdate = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\r\n    return this;\r\n  }\r\n\r\n  onChange(\r\n    callback: (\r\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\r\n    ) => void\r\n  ) {\r\n    this.handlers.onChange = callback;\r\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\r\n    return this;\r\n  }\r\n\r\n  manualActivation(manualActivation: boolean) {\r\n    this.config.manualActivation = manualActivation;\r\n    return this;\r\n  }\r\n}\r\n"]}