{"version":3,"sources":["forceTouchGesture.ts"],"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","forceChange","force","ForceTouchGesture","constructor","handlerName","minForce","config","maxForce","feedbackOnActivation","value","onChange","callback","handlers"],"mappings":";;AAAA,SAA4BA,oBAA5B,QAAwD,WAAxD;;AAWA,SAASC,qBAAT,CACEC,OADF,EAEEC,QAFF,EAGE;AACA;;AACA,MAAIC,aAAJ;;AACA,MAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1BD,IAAAA,aAAa,GAAG;AACdE,MAAAA,WAAW,EAAEJ,OAAO,CAACK;AADP,KAAhB;AAGD,GAJD,MAIO;AACLH,IAAAA,aAAa,GAAG;AACdE,MAAAA,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;AADxB,KAAhB;AAGD;;AAED,SAAO,EAAE,GAAGL,OAAL;AAAc,OAAGE;AAAjB,GAAP;AACD;;AAED,OAAO,MAAMI,iBAAN,SAAgCR,oBAAhC,CAGL;AAGAS,EAAAA,WAAW,GAAG;AACZ;;AADY,oCAF+C,EAE/C;;AAGZ,SAAKC,WAAL,GAAmB,0BAAnB;AACD;;AAEDC,EAAAA,QAAQ,CAACJ,KAAD,EAAgB;AACtB,SAAKK,MAAL,CAAYD,QAAZ,GAAuBJ,KAAvB;AACA,WAAO,IAAP;AACD;;AAEDM,EAAAA,QAAQ,CAACN,KAAD,EAAgB;AACtB,SAAKK,MAAL,CAAYC,QAAZ,GAAuBN,KAAvB;AACA,WAAO,IAAP;AACD;;AAEDO,EAAAA,oBAAoB,CAACC,KAAD,EAAiB;AACnC,SAAKH,MAAL,CAAYE,oBAAZ,GAAmCC,KAAnC;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,QAAQ,CACNC,QADM,EASN;AACA;AACA,SAAKC,QAAL,CAAcjB,qBAAd,GAAsCA,qBAAtC;AACA,WAAO,MAAMe,QAAN,CAAeC,QAAf,CAAP;AACD;;AArCD","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\r\nimport {\r\n  ForceTouchGestureConfig,\r\n  ForceTouchGestureHandlerEventPayload,\r\n} from '../ForceTouchGestureHandler';\r\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\r\n\r\nexport type ForceTouchGestureChangeEventPayload = {\r\n  forceChange: number;\r\n};\r\n\r\nfunction changeEventCalculator(\r\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\r\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\r\n) {\r\n  'worklet';\r\n  let changePayload: ForceTouchGestureChangeEventPayload;\r\n  if (previous === undefined) {\r\n    changePayload = {\r\n      forceChange: current.force,\r\n    };\r\n  } else {\r\n    changePayload = {\r\n      forceChange: current.force - previous.force,\r\n    };\r\n  }\r\n\r\n  return { ...current, ...changePayload };\r\n}\r\n\r\nexport class ForceTouchGesture extends ContinousBaseGesture<\r\n  ForceTouchGestureHandlerEventPayload,\r\n  ForceTouchGestureChangeEventPayload\r\n> {\r\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.handlerName = 'ForceTouchGestureHandler';\r\n  }\r\n\r\n  minForce(force: number) {\r\n    this.config.minForce = force;\r\n    return this;\r\n  }\r\n\r\n  maxForce(force: number) {\r\n    this.config.maxForce = force;\r\n    return this;\r\n  }\r\n\r\n  feedbackOnActivation(value: boolean) {\r\n    this.config.feedbackOnActivation = value;\r\n    return this;\r\n  }\r\n\r\n  onChange(\r\n    callback: (\r\n      event: GestureUpdateEvent<\r\n        GestureUpdateEvent<\r\n          ForceTouchGestureHandlerEventPayload &\r\n            ForceTouchGestureChangeEventPayload\r\n        >\r\n      >\r\n    ) => void\r\n  ) {\r\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\r\n    this.handlers.changeEventCalculator = changeEventCalculator;\r\n    return super.onChange(callback);\r\n  }\r\n}\r\n\r\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\r\n"]}