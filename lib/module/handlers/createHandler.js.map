{"version":3,"sources":["createHandler.ts"],"names":["React","Platform","Touchable","UIManager","DeviceEventEmitter","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","filterConfig","findNodeHandle","isJestEnv","UIManagerAny","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","OS","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","showedRngh2Notice","showRngh2NoticeIfNeeded","console","warn","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,kBAJF,QAMO,cANP,C,CAOA;;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,oBAAlD;AAEA,SAEEC,YAFF,EAKEC,cALF,QAMO,wBANP;AAQA,SAASC,SAAT,QAA0B,UAA1B;AAEA,MAAMC,YAAY,GAAGV,SAArB;AAEA,MAAMW,oBAAoB,GAAG;AAC3BC,EAAAA,qBAAqB,EAAE;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GADI;AAE3BC,EAAAA,2BAA2B,EAAE;AAC3BD,IAAAA,gBAAgB,EAAE;AADS;AAFF,CAA7B,C,CAOA;AACA;AACA;AACA;;AACAH,YAAY,CAACK,uBAAb,GAAuC,EACrC,GAAGL,YAAY,CAACK,uBADqB;AAErC,KAAGJ;AAFkC,CAAvC,C,CAIA;AACA;AACA;;AACA,MAAMK,kBAAkB,sDACtBN,YAAY,CAACO,oBADS,2DACtB,4BAAAP,YAAY,EAAwB,cAAxB,CADU,kGAEtBA,YAAY,CAACQ,YAFS,0DAEtB,2BAAAR,YAAY,CAFd;;AAIA,IAAIM,kBAAJ,EAAwB;AACtBA,EAAAA,kBAAkB,CAACD,uBAAnB,GAA6C,EAC3C,GAAGC,kBAAkB,CAACD,uBADqB;AAE3C,OAAGJ;AAFwC,GAA7C;AAID,C,CAED;;;AACA,MAAM;AACJQ,EAAAA,cAAc,EAAEC,iBAAiB,GAAG,MAAM,CACxC;AACD,GAHG;AAIJC,EAAAA,gBAAgB,EAAEC,mBAAmB,GAAG,MAAM,CAC5C;AACD;AANG,IAOFZ,YAPJ;;AAQAA,YAAY,CAACS,cAAb,GAA8B,CAACI,GAAD,EAAcC,oBAAd,KAAgD;AAC5ErB,EAAAA,sBAAsB,CAACsB,oBAAvB,CAA4CF,GAA5C,EAAiDC,oBAAjD;AACAJ,EAAAA,iBAAiB,CAACG,GAAD,EAAMC,oBAAN,CAAjB;AACD,CAHD;;AAIAd,YAAY,CAACW,gBAAb,GAAgC,MAAM;AACpClB,EAAAA,sBAAsB,CAACuB,sBAAvB;AACAJ,EAAAA,mBAAmB;AACpB,CAHD;;AAKA,IAAIK,YAAY,GAAG,IAAnB;AACA,MAAMC,cAAc,GAAGC,OAAO,IAAI/B,QAAQ,CAACgC,EAAT,KAAgB,SAAlD,C,CACA;AACA;;AACA,IAAIF,cAAJ,EAAoB;AAClB3B,EAAAA,kBAAkB,CAAC8B,WAAnB,CAA+B,wBAA/B,EAAyD,MAAM;AAC7DJ,IAAAA,YAAY,GAAG,CAACA,YAAhB;AACD,GAFD;AAGD;;AAKD,SAASK,iBAAT,CACEC,KADF,EAEE;AACA;AACA,QAAMC,OAAO,GAAIC,IAAD,IAAuB;AACrC,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxB,aAAOA,IAAI,IAAIA,IAAI,CAACG,OAAL,KAAiB,IAAhC;AACD;;AACD,WAAOH,IAAI,CAACI,IAAL,CAAWC,CAAD,IAAOA,CAAC,IAAIA,CAAC,CAACF,OAAF,KAAc,IAApC,CAAP;AACD,GALD;;AAMA,SAAOJ,OAAO,CAACD,KAAK,CAAC,sBAAD,CAAN,CAAP,IAA0CC,OAAO,CAACD,KAAK,CAAC,SAAD,CAAN,CAAxD;AACD;;AAED,MAAMQ,mBAAmB,GAAG;AAC1B,GAACrC,KAAK,CAACsC,YAAP,GAAsBC,SADI;AAE1B,GAACvC,KAAK,CAACwC,KAAP,GAAe,SAFW;AAG1B,GAACxC,KAAK,CAACyC,MAAP,GAAgB,UAHU;AAI1B,GAACzC,KAAK,CAAC0C,SAAP,GAAmB,aAJO;AAK1B,GAAC1C,KAAK,CAAC2C,MAAP,GAAgB,aALU;AAM1B,GAAC3C,KAAK,CAAC4C,GAAP,GAAa;AANa,CAA5B;AAyBA,IAAIC,iBAAiB,GAAG,KAAxB;;AACA,SAASC,uBAAT,GAAmC;AACjC,MAAI,CAACD,iBAAL,EAAwB;AACtBE,IAAAA,OAAO,CAACC,IAAR,CACE,2HADF;AAGAH,IAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,C,CAED;;;AACA,eAAe,SAASI,aAAT,CAGb;AACAC,EAAAA,IADA;AAEAC,EAAAA,YAAY,GAAG,EAFf;AAGAC,EAAAA,MAAM,GAAG,EAHT;AAIAC,EAAAA,cAJA;AAKAC,EAAAA,iBAAiB,GAAG;AALpB,CAHa,EAS6D;AAI1E,QAAMC,OAAN,SAAsB9D,KAAK,CAAC+D,SAA5B,CAGE;AAWAC,IAAAA,WAAW,CAAC5B,KAAD,EAAmC;AAC5C,YAAMA,KAAN;;AAD4C;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,8CAHmB,IAGnB;;AAAA;;AAAA,qDA2Eb6B,KAAD,IAA4B;AAC1D,YAAIA,KAAK,CAACC,WAAN,CAAkBC,UAAlB,KAAiC,KAAKA,UAA1C,EAAsD;AAAA;;AACpD,uDAAK/B,KAAL,EAAWgC,cAAX,kGAA4BH,KAA5B;AACD,SAFD,MAEO;AAAA;;AACL,yDAAK7B,KAAL,EAAWrB,qBAAX,qGAAmCkD,KAAnC;AACD;AACF,OAjF6C;;AAAA,2DAqF5CA,KADoC,IAEjC;AACH,YAAIA,KAAK,CAACC,WAAN,CAAkBC,UAAlB,KAAiC,KAAKA,UAA1C,EAAsD;AAAA;;AACpD,wDAAK/B,KAAL,EAAWiC,oBAAX,mGAAkCJ,KAAlC;AAEA,gBAAMK,KAA4B,GAAGL,KAAK,CAACC,WAAN,CAAkBI,KAAvD;AACA,gBAAMC,cAAc,GAAG3B,mBAAmB,CAAC0B,KAAD,CAA1C;AACA,gBAAME,YAAY,GAAGD,cAAc,IAAI,KAAKnC,KAAL,CAAWmC,cAAX,CAAvC;;AACA,cAAIC,YAAY,IAAI,OAAOA,YAAP,KAAwB,UAA5C,EAAwD;AACtDA,YAAAA,YAAY,CAACP,KAAD,CAAZ;AACD;AACF,SATD,MASO;AAAA;;AACL,yDAAK7B,KAAL,EAAWnB,2BAAX,qGAAyCgD,KAAzC;AACD;AACF,OAnG6C;;AAAA,0CAqGxBQ,IAAD,IAAe;AAClC,aAAKC,QAAL,GAAgBD,IAAhB;AAEA,cAAME,KAAK,GAAG3E,KAAK,CAAC4E,QAAN,CAAeC,IAAf,CAAoB,KAAKzC,KAAL,CAAW0C,QAA/B,CAAd,CAHkC,CAIlC;;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAeJ,KAArB;;AACA,YAAII,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,YAAAA,GAAG,CAACN,IAAD,CAAH;AACD,WAFD,MAEO;AACLM,YAAAA,GAAG,CAACtC,OAAJ,GAAcgC,IAAd;AACD;AACF;AACF,OAlH6C;;AAAA,oDAqH5CO,SAD6B,IAE1B;AACH,aAAKrB,MAAL,GAAcqB,SAAd;AAEA1E,QAAAA,sBAAsB,CAAC2E,oBAAvB,CACExB,IADF,EAEE,KAAKU,UAFP,EAGEa,SAHF;AAKD,OA9H6C;;AAAA,oDAgIdE,UAAD,IAAwB;AACrD,aAAKC,OAAL,GAAeD,UAAf;;AAEA,YAAIjF,QAAQ,CAACgC,EAAT,KAAgB,KAApB,EAA2B;AACzB;AACC3B,UAAAA,sBAAsB,CAAC8E,oBAAxB,CACE,KAAKjB,UADP,EAEEe,UAFF,EAGE,KAHF,EAIE,KAAKG,QAJP;AAMD,SARD,MAQO;AACL/E,UAAAA,sBAAsB,CAAC8E,oBAAvB,CACE,KAAKjB,UADP,EAEEe,UAFF,EAGE,KAHF;AAKD;AACF,OAlJ6C;;AAAA,oDAqJ5CF,SAD6B,IAE1B;AACH,aAAKrB,MAAL,GAAcqB,SAAd;AAEA1E,QAAAA,sBAAsB,CAACgF,oBAAvB,CAA4C,KAAKnB,UAAjD,EAA6Da,SAA7D;AACD,OA1J6C;;AAE5C,WAAKb,UAAL,GAAkB1D,iBAAiB,EAAnC;AACA,WAAKkD,MAAL,GAAc,EAAd;AACA,WAAK0B,QAAL,gBAAgBrF,KAAK,CAACuF,SAAN,EAAhB;AACA,WAAKjB,KAAL,GAAa;AAAExC,QAAAA;AAAF,OAAb;;AACA,UAAIM,KAAK,CAACoD,EAAV,EAAc;AACZ,YAAIhF,cAAc,CAAC4B,KAAK,CAACoD,EAAP,CAAd,KAA6B1C,SAAjC,EAA4C;AAC1C,gBAAM,IAAI2C,KAAJ,CAAW,oBAAmBrD,KAAK,CAACoD,EAAG,sBAAvC,CAAN;AACD;;AACDhF,QAAAA,cAAc,CAAC4B,KAAK,CAACoD,EAAP,CAAd,GAA2B,KAAKrB,UAAhC;AACD;;AACD,UAAInC,OAAO,IAAI,CAACpB,SAAS,EAAzB,EAA6B;AAC3ByC,QAAAA,uBAAuB;AACxB;AACF;;AAEDqC,IAAAA,iBAAiB,GAAG;AAClB,YAAMtD,KAAsB,GAAG,KAAKA,KAApC;;AAEA,UAAIL,cAAJ,EAAoB;AAClB,aAAK4D,uBAAL,GAA+BvF,kBAAkB,CAAC8B,WAAnB,CAC7B,wBAD6B,EAE7B,MAAM;AACJ,eAAK0D,QAAL,CAAeC,CAAD,KAAQ;AAAE/D,YAAAA;AAAF,WAAR,CAAd;AACA,eAAKgE,MAAL;AACD,SAL4B,CAA/B;AAOD;;AACD,UAAI3D,iBAAiB,CAACC,KAAD,CAArB,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,aAAK2D,cAAL,GAAsBC,YAAY,CAAC,MAAM;AACvC,eAAKD,cAAL,GAAsB,IAAtB;AACA,eAAKD,MAAL;AACD,SAHiC,CAAlC;AAID;;AAED,WAAKb,oBAAL,CACEvE,YAAY,CACVkD,cAAc,GAAGA,cAAc,CAAC,KAAKxB,KAAN,CAAjB,GAAgC,KAAKA,KADzC,EAEV,CAAC,GAAGsB,YAAJ,EAAkB,GAAGG,iBAArB,CAFU,EAGVF,MAHU,CADd;AAQA,WAAKyB,oBAAL,CAA0BzE,cAAc,CAAC,KAAK+D,QAAN,CAAxC,EAjCkB,CAiCkD;AACrE;;AAEDuB,IAAAA,kBAAkB,GAAG;AACnB,YAAMd,OAAO,GAAGxE,cAAc,CAAC,KAAK+D,QAAN,CAA9B;;AACA,UAAI,KAAKS,OAAL,KAAiBA,OAArB,EAA8B;AAC5B,aAAKC,oBAAL,CAA0BD,OAA1B,EAD4B,CACkB;AAC/C;;AACD,WAAKW,MAAL;AACD;;AAEDI,IAAAA,oBAAoB,GAAG;AAAA;;AACrB,oCAAKP,uBAAL,gFAA8BQ,MAA9B;AACA7F,MAAAA,sBAAsB,CAAC8F,kBAAvB,CAA0C,KAAKjC,UAA/C;;AACA,UAAI,KAAK4B,cAAT,EAAyB;AACvBM,QAAAA,cAAc,CAAC,KAAKN,cAAN,CAAd;AACD,OALoB,CAMrB;;;AACA,YAAMO,SAA6B,GAAG,KAAKlE,KAAL,CAAWoD,EAAjD;;AACA,UAAIc,SAAJ,EAAe;AACb;AACA,eAAO9F,cAAc,CAAC8F,SAAD,CAArB;AACD;AACF;;AAmFOR,IAAAA,MAAM,GAAG;AACf,YAAMd,SAAS,GAAGtE,YAAY,CAC5BkD,cAAc,GAAGA,cAAc,CAAC,KAAKxB,KAAN,CAAjB,GAAgC,KAAKA,KADvB,EAE5B,CAAC,GAAGsB,YAAJ,EAAkB,GAAGG,iBAArB,CAF4B,EAG5BF,MAH4B,CAA9B;;AAKA,UAAI,CAACtD,SAAS,CAAC,KAAKsD,MAAN,EAAcqB,SAAd,CAAd,EAAwC;AACtC,aAAKM,oBAAL,CAA0BN,SAA1B;AACD;AACF;;AAEDuB,IAAAA,cAAc,CAACC,OAAD,EAAe;AAC3B,YAAMC,WAAW,GAAG,EAAE,GAAG,KAAKrE,KAAV;AAAiB,WAAGoE;AAApB,OAApB;AACA,YAAMxB,SAAS,GAAGtE,YAAY,CAC5BkD,cAAc,GAAGA,cAAc,CAAC6C,WAAD,CAAjB,GAAiCA,WADnB,EAE5B,CAAC,GAAG/C,YAAJ,EAAkB,GAAGG,iBAArB,CAF4B,EAG5BF,MAH4B,CAA9B;AAKA,WAAK2B,oBAAL,CAA0BN,SAA1B;AACD;;AAED0B,IAAAA,MAAM,GAAG;AACP,UAAIC,mBAAmB,GAAG,KAAK5F,qBAA/B,CADO,CAEP;;AAKA,YAAM;AACJqD,QAAAA,cADI;AAEJrD,QAAAA;AAFI,UAGsB,KAAKqB,KAHjC;;AAIA,UAAIgC,cAAc,IAAI,OAAOA,cAAP,KAA0B,UAAhD,EAA4D;AAC1D;AACA;AACA;AACA,YAAIrD,qBAAJ,EAA2B;AACzB,gBAAM,IAAI0E,KAAJ,CACJ,yEADI,CAAN;AAGD;;AACDkB,QAAAA,mBAAmB,GAAGvC,cAAtB;AACD,OAVD,MAUO;AACL,YACErD,qBAAqB,IACrB,OAAOA,qBAAP,KAAiC,UAFnC,EAGE;AACA,gBAAM,IAAI0E,KAAJ,CACJ,yEADI,CAAN;AAGD;AACF;;AAED,UAAImB,wBAAwB,GAAG,KAAK3F,2BAApC,CAhCO,CAiCP;;AAKA,YAAM;AACJoD,QAAAA,oBADI;AAEJpD,QAAAA;AAFI,UAG4B,KAAKmB,KAHvC;;AAIA,UAAIiC,oBAAoB,IAAI,OAAOA,oBAAP,KAAgC,UAA5D,EAAwE;AACtE;AACA;AACA;AACA,YAAIpD,2BAAJ,EAAiC;AAC/B,gBAAM,IAAIwE,KAAJ,CACJ,yEADI,CAAN;AAGD;;AACDmB,QAAAA,wBAAwB,GAAGvC,oBAA3B;AACD,OAVD,MAUO;AACL,YACEpD,2BAA2B,IAC3B,OAAOA,2BAAP,KAAuC,UAFzC,EAGE;AACA,gBAAM,IAAIwE,KAAJ,CACJ,yEADI,CAAN;AAGD;AACF;;AACD,YAAMoB,MAAM,GAAG;AACb9F,QAAAA,qBAAqB,EAAE,KAAKuD,KAAL,CAAWxC,YAAX,GACnB6E,mBADmB,GAEnB7D,SAHS;AAIb7B,QAAAA,2BAA2B,EAAE,KAAKqD,KAAL,CAAWxC,YAAX,GACzB8E,wBADyB,GAEzB9D;AANS,OAAf;AASA,WAAKuC,QAAL,CAAc5C,OAAd,GAAwBoE,MAAxB;AAEA,YAAMlC,KAAU,GAAG3E,KAAK,CAAC4E,QAAN,CAAeC,IAAf,CAAoB,KAAKzC,KAAL,CAAW0C,QAA/B,CAAnB;AACA,UAAIgC,aAAa,GAAGnC,KAAK,CAACvC,KAAN,CAAY0C,QAAhC;;AACA,UACE5E,SAAS,CAAC6G,kBAAV,IACApC,KAAK,CAACqC,IADN,KAECrC,KAAK,CAACqC,IAAN,KAAe,wBAAf,IACCrC,KAAK,CAACqC,IAAN,CAAWvD,IAAX,KAAoB,MADrB,IAECkB,KAAK,CAACqC,IAAN,CAAWC,WAAX,KAA2B,MAJ7B,CADF,EAME;AACAH,QAAAA,aAAa,GAAG9G,KAAK,CAAC4E,QAAN,CAAesC,OAAf,CAAuBJ,aAAvB,CAAhB;AACAA,QAAAA,aAAa,CAACK,IAAd,CACEjH,SAAS,CAACkH,eAAV,CAA0B;AACxBC,UAAAA,KAAK,EAAE,mBADiB;AAExBC,UAAAA,OAAO,EAAE3C,KAAK,CAACvC,KAAN,CAAYkF;AAFG,SAA1B,CADF;AAMD;;AAED,0BAAOtH,KAAK,CAACuH,YAAN,CACL5C,KADK,EAEL;AACEI,QAAAA,GAAG,EAAE,KAAKyC,UADZ;AAEEC,QAAAA,WAAW,EAAE,KAFf;AAGE,YAAI7G,SAAS,KACT;AACE8G,UAAAA,WAAW,EAAEjE,IADf;AAEEU,UAAAA,UAAU,EAAE,KAAKA;AAFnB,SADS,GAKT,EALJ,CAHF;AASEwD,QAAAA,MAAM,EAAE,KAAKvF,KAAL,CAAWuF,MATrB;AAUE,WAAGd;AAVL,OAFK,EAcLC,aAdK,CAAP;AAgBD;;AAvSD;;AAPwE,kBAIpEhD,OAJoE,iBAQnDL,IARmD;;AAgT1E,SAAOK,OAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Platform,\r\n  Touchable,\r\n  UIManager,\r\n  DeviceEventEmitter,\r\n  EmitterSubscription,\r\n} from 'react-native';\r\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\r\nimport deepEqual from 'lodash/isEqual';\r\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\r\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\r\nimport { State } from '../State';\r\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\r\n\r\nimport {\r\n  BaseGestureHandlerProps,\r\n  filterConfig,\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n  findNodeHandle,\r\n} from './gestureHandlerCommon';\r\nimport { ValueOf } from '../typeUtils';\r\nimport { isJestEnv } from '../utils';\r\n\r\nconst UIManagerAny = UIManager as any;\r\n\r\nconst customGHEventsConfig = {\r\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\r\n  onGestureHandlerStateChange: {\r\n    registrationName: 'onGestureHandlerStateChange',\r\n  },\r\n};\r\n\r\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\r\n// native module.\r\n// Once new event types are registered with react it is possible to dispatch these\r\n// events to all kind of native views.\r\nUIManagerAny.genericDirectEventTypes = {\r\n  ...UIManagerAny.genericDirectEventTypes,\r\n  ...customGHEventsConfig,\r\n};\r\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\r\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\r\n// it compatible with RN 61+\r\nconst UIManagerConstants =\r\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\r\n  UIManagerAny.getConstants?.();\r\n\r\nif (UIManagerConstants) {\r\n  UIManagerConstants.genericDirectEventTypes = {\r\n    ...UIManagerConstants.genericDirectEventTypes,\r\n    ...customGHEventsConfig,\r\n  };\r\n}\r\n\r\n// Wrap JS responder calls and notify gesture handler manager\r\nconst {\r\n  setJSResponder: oldSetJSResponder = () => {\r\n    //no operation\r\n  },\r\n  clearJSResponder: oldClearJSResponder = () => {\r\n    //no operation\r\n  },\r\n} = UIManagerAny;\r\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\r\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\r\n  oldSetJSResponder(tag, blockNativeResponder);\r\n};\r\nUIManagerAny.clearJSResponder = () => {\r\n  RNGestureHandlerModule.handleClearJSResponder();\r\n  oldClearJSResponder();\r\n};\r\n\r\nlet allowTouches = true;\r\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\r\n// Toggled inspector blocks touch events in order to allow inspecting on Android\r\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\r\nif (DEV_ON_ANDROID) {\r\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\r\n    allowTouches = !allowTouches;\r\n  });\r\n}\r\n\r\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\r\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\r\n>;\r\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\r\n  props: HandlerProps<T>\r\n) {\r\n  // TODO(TS) - add type for extract arg\r\n  const extract = (refs: any | any[]) => {\r\n    if (!Array.isArray(refs)) {\r\n      return refs && refs.current === null;\r\n    }\r\n    return refs.some((r) => r && r.current === null);\r\n  };\r\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\r\n}\r\n\r\nconst stateToPropMappings = {\r\n  [State.UNDETERMINED]: undefined,\r\n  [State.BEGAN]: 'onBegan',\r\n  [State.FAILED]: 'onFailed',\r\n  [State.CANCELLED]: 'onCancelled',\r\n  [State.ACTIVE]: 'onActivated',\r\n  [State.END]: 'onEnded',\r\n} as const;\r\n\r\ntype CreateHandlerArgs<\r\n  HandlerPropsT extends Record<string, unknown>\r\n> = Readonly<{\r\n  name: string;\r\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\r\n  config: Readonly<Record<string, unknown>>;\r\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\r\n  customNativeProps?: Readonly<string[]>;\r\n}>;\r\n\r\n// TODO(TS) fix event types\r\ntype InternalEventHandlers = {\r\n  onGestureHandlerEvent?: (event: any) => void;\r\n  onGestureHandlerStateChange?: (event: any) => void;\r\n};\r\n\r\nlet showedRngh2Notice = false;\r\nfunction showRngh2NoticeIfNeeded() {\r\n  if (!showedRngh2Notice) {\r\n    console.warn(\r\n      \"[react-native-gesture-handler] Seems like you're using an old API with gesture components, check out new Gestures system!\"\r\n    );\r\n    showedRngh2Notice = true;\r\n  }\r\n}\r\n\r\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\r\nexport default function createHandler<\r\n  T extends BaseGestureHandlerProps<U>,\r\n  U extends Record<string, unknown>\r\n>({\r\n  name,\r\n  allowedProps = [],\r\n  config = {},\r\n  transformProps,\r\n  customNativeProps = [],\r\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\r\n  interface HandlerState {\r\n    allowTouches: boolean;\r\n  }\r\n  class Handler extends React.Component<\r\n    T & InternalEventHandlers,\r\n    HandlerState\r\n  > {\r\n    static displayName = name;\r\n\r\n    private handlerTag: number;\r\n    private config: Record<string, unknown>;\r\n    private propsRef: React.MutableRefObject<unknown>;\r\n    private viewNode: any;\r\n    private viewTag?: number;\r\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\r\n    private inspectorToggleListener?: EmitterSubscription;\r\n\r\n    constructor(props: T & InternalEventHandlers) {\r\n      super(props);\r\n      this.handlerTag = getNextHandlerTag();\r\n      this.config = {};\r\n      this.propsRef = React.createRef();\r\n      this.state = { allowTouches };\r\n      if (props.id) {\r\n        if (handlerIDToTag[props.id] !== undefined) {\r\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\r\n        }\r\n        handlerIDToTag[props.id] = this.handlerTag;\r\n      }\r\n      if (__DEV__ && !isJestEnv()) {\r\n        showRngh2NoticeIfNeeded();\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      const props: HandlerProps<U> = this.props;\r\n\r\n      if (DEV_ON_ANDROID) {\r\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\r\n          'toggleElementInspector',\r\n          () => {\r\n            this.setState((_) => ({ allowTouches }));\r\n            this.update();\r\n          }\r\n        );\r\n      }\r\n      if (hasUnresolvedRefs(props)) {\r\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\r\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\r\n        // _update method that will try to update native handler props using\r\n        // setImmediate. This makes it so update() function gets called after all\r\n        // react components are mounted and we expect the missing ref object to\r\n        // be resolved by then.\r\n        this.updateEnqueued = setImmediate(() => {\r\n          this.updateEnqueued = null;\r\n          this.update();\r\n        });\r\n      }\r\n\r\n      this.createGestureHandler(\r\n        filterConfig(\r\n          transformProps ? transformProps(this.props) : this.props,\r\n          [...allowedProps, ...customNativeProps],\r\n          config\r\n        )\r\n      );\r\n\r\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const viewTag = findNodeHandle(this.viewNode);\r\n      if (this.viewTag !== viewTag) {\r\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\r\n      }\r\n      this.update();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.inspectorToggleListener?.remove();\r\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\r\n      if (this.updateEnqueued) {\r\n        clearImmediate(this.updateEnqueued);\r\n      }\r\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\r\n      const handlerID: string | undefined = this.props.id;\r\n      if (handlerID) {\r\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n        delete handlerIDToTag[handlerID];\r\n      }\r\n    }\r\n\r\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\r\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\r\n        this.props.onGestureEvent?.(event);\r\n      } else {\r\n        this.props.onGestureHandlerEvent?.(event);\r\n      }\r\n    };\r\n\r\n    // TODO(TS) - make sure this is right type for event\r\n    private onGestureHandlerStateChange = (\r\n      event: HandlerStateChangeEvent<U>\r\n    ) => {\r\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\r\n        this.props.onHandlerStateChange?.(event);\r\n\r\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\r\n        const stateEventName = stateToPropMappings[state];\r\n        const eventHandler = stateEventName && this.props[stateEventName];\r\n        if (eventHandler && typeof eventHandler === 'function') {\r\n          eventHandler(event);\r\n        }\r\n      } else {\r\n        this.props.onGestureHandlerStateChange?.(event);\r\n      }\r\n    };\r\n\r\n    private refHandler = (node: any) => {\r\n      this.viewNode = node;\r\n\r\n      const child = React.Children.only(this.props.children);\r\n      // TODO(TS) fix ref type\r\n      const { ref }: any = child;\r\n      if (ref !== null) {\r\n        if (typeof ref === 'function') {\r\n          ref(node);\r\n        } else {\r\n          ref.current = node;\r\n        }\r\n      }\r\n    };\r\n\r\n    private createGestureHandler = (\r\n      newConfig: Readonly<Record<string, unknown>>\r\n    ) => {\r\n      this.config = newConfig;\r\n\r\n      RNGestureHandlerModule.createGestureHandler(\r\n        name,\r\n        this.handlerTag,\r\n        newConfig\r\n      );\r\n    };\r\n\r\n    private attachGestureHandler = (newViewTag: number) => {\r\n      this.viewTag = newViewTag;\r\n\r\n      if (Platform.OS === 'web') {\r\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\r\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\r\n          this.handlerTag,\r\n          newViewTag,\r\n          false,\r\n          this.propsRef\r\n        );\r\n      } else {\r\n        RNGestureHandlerModule.attachGestureHandler(\r\n          this.handlerTag,\r\n          newViewTag,\r\n          false\r\n        );\r\n      }\r\n    };\r\n\r\n    private updateGestureHandler = (\r\n      newConfig: Readonly<Record<string, unknown>>\r\n    ) => {\r\n      this.config = newConfig;\r\n\r\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\r\n    };\r\n\r\n    private update() {\r\n      const newConfig = filterConfig(\r\n        transformProps ? transformProps(this.props) : this.props,\r\n        [...allowedProps, ...customNativeProps],\r\n        config\r\n      );\r\n      if (!deepEqual(this.config, newConfig)) {\r\n        this.updateGestureHandler(newConfig);\r\n      }\r\n    }\r\n\r\n    setNativeProps(updates: any) {\r\n      const mergedProps = { ...this.props, ...updates };\r\n      const newConfig = filterConfig(\r\n        transformProps ? transformProps(mergedProps) : mergedProps,\r\n        [...allowedProps, ...customNativeProps],\r\n        config\r\n      );\r\n      this.updateGestureHandler(newConfig);\r\n    }\r\n\r\n    render() {\r\n      let gestureEventHandler = this.onGestureHandlerEvent;\r\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\r\n      type OnGestureEventHandlers = {\r\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\r\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\r\n      };\r\n      const {\r\n        onGestureEvent,\r\n        onGestureHandlerEvent,\r\n      }: OnGestureEventHandlers = this.props;\r\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\r\n        // If it's not a method it should be an native Animated.event\r\n        // object. We set it directly as the handler for the view\r\n        // In this case nested handlers are not going to be supported\r\n        if (onGestureHandlerEvent) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n        gestureEventHandler = onGestureEvent;\r\n      } else {\r\n        if (\r\n          onGestureHandlerEvent &&\r\n          typeof onGestureHandlerEvent !== 'function'\r\n        ) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n      }\r\n\r\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\r\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\r\n      type OnGestureStateChangeHandlers = {\r\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\r\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\r\n      };\r\n      const {\r\n        onHandlerStateChange,\r\n        onGestureHandlerStateChange,\r\n      }: OnGestureStateChangeHandlers = this.props;\r\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\r\n        // If it's not a method it should be an native Animated.event\r\n        // object. We set it directly as the handler for the view\r\n        // In this case nested handlers are not going to be supported\r\n        if (onGestureHandlerStateChange) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n        gestureStateEventHandler = onHandlerStateChange;\r\n      } else {\r\n        if (\r\n          onGestureHandlerStateChange &&\r\n          typeof onGestureHandlerStateChange !== 'function'\r\n        ) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n      }\r\n      const events = {\r\n        onGestureHandlerEvent: this.state.allowTouches\r\n          ? gestureEventHandler\r\n          : undefined,\r\n        onGestureHandlerStateChange: this.state.allowTouches\r\n          ? gestureStateEventHandler\r\n          : undefined,\r\n      };\r\n\r\n      this.propsRef.current = events;\r\n\r\n      const child: any = React.Children.only(this.props.children);\r\n      let grandChildren = child.props.children;\r\n      if (\r\n        Touchable.TOUCH_TARGET_DEBUG &&\r\n        child.type &&\r\n        (child.type === 'RNGestureHandlerButton' ||\r\n          child.type.name === 'View' ||\r\n          child.type.displayName === 'View')\r\n      ) {\r\n        grandChildren = React.Children.toArray(grandChildren);\r\n        grandChildren.push(\r\n          Touchable.renderDebugView({\r\n            color: 'mediumspringgreen',\r\n            hitSlop: child.props.hitSlop,\r\n          })\r\n        );\r\n      }\r\n\r\n      return React.cloneElement(\r\n        child,\r\n        {\r\n          ref: this.refHandler,\r\n          collapsable: false,\r\n          ...(isJestEnv()\r\n            ? {\r\n                handlerType: name,\r\n                handlerTag: this.handlerTag,\r\n              }\r\n            : {}),\r\n          testID: this.props.testID,\r\n          ...events,\r\n        },\r\n        grandChildren\r\n      );\r\n    }\r\n  }\r\n  return Handler;\r\n}\r\n"]}