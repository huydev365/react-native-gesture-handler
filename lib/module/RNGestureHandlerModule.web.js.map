{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","_usingDeviceEvents","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,uBAAP,MAAoC,+BAApC;AACA,OAAOC,wBAAP,MAAqC,gCAArC;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AAEA,OAAO,MAAMC,QAAQ,GAAG;AACtBJ,EAAAA,iBADsB;AAEtBE,EAAAA,sBAFsB;AAGtBD,EAAAA,mBAHsB;AAItBE,EAAAA,iBAJsB;AAKtBL,EAAAA,wBALsB;AAMtBD,EAAAA,uBANsB;AAOtBD,EAAAA,mBAPsB,CAQtB;;AARsB,CAAjB;AAWP,eAAe;AACbD,EAAAA,SADa;;AAEbU,EAAAA,oBAAoB,CAACC,GAAD,EAAcC,oBAAd,EAA6C;AAC/DC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuCH,GAAvC,EAA4CC,oBAA5C;AACD,GAJY;;AAKbG,EAAAA,sBAAsB,GAAG;AACvBF,IAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb;AACD,GAPY;;AAQbE,EAAAA,oBAAoB,CAClBC,WADkB,EAElBC,UAFkB,EAGlBC,MAHkB,EAIlB;AACA;AACA,QAAI,EAAEF,WAAW,IAAIR,QAAjB,CAAJ,EACE,MAAM,IAAIW,KAAJ,CACH,iCAAgCH,WAAY,2BADzC,CAAN;AAGF,UAAMI,YAAY,GAAGZ,QAAQ,CAACQ,WAAD,CAA7B;AACAb,IAAAA,WAAW,CAACY,oBAAZ,CAAiCE,UAAjC,EAA6C,IAAIG,YAAJ,EAA7C;AACA,SAAKC,oBAAL,CAA0BJ,UAA1B,EAAsCC,MAAtC;AACD,GArBY;;AAsBbI,EAAAA,oBAAoB,CAClBL,UADkB,EAElBM,OAFkB,EAGlBC,kBAHkB,EAIlBC,QAJkB,EAKlB;AACAtB,IAAAA,WAAW,CAACuB,UAAZ,CAAuBT,UAAvB,EAAmCU,OAAnC,CAA2CJ,OAA3C,EAAoDE,QAApD;AACD,GA7BY;;AA8BbJ,EAAAA,oBAAoB,CAACJ,UAAD,EAAqBW,SAArB,EAAqC;AACvDzB,IAAAA,WAAW,CAACuB,UAAZ,CAAuBT,UAAvB,EAAmCY,mBAAnC,CAAuDD,SAAvD;AACD,GAhCY;;AAiCbE,EAAAA,qBAAqB,CAACb,UAAD,EAAqB;AACxC,WAAOd,WAAW,CAACuB,UAAZ,CAAuBT,UAAvB,CAAP;AACD,GAnCY;;AAoCbc,EAAAA,kBAAkB,CAACd,UAAD,EAAqB;AACrCd,IAAAA,WAAW,CAAC4B,kBAAZ,CAA+Bd,UAA/B;AACD;;AAtCY,CAAf","sourcesContent":["import { Direction } from './web/constants';\r\nimport FlingGestureHandler from './web/FlingGestureHandler';\r\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\r\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\r\nimport * as NodeManager from './web/NodeManager';\r\nimport PanGestureHandler from './web/PanGestureHandler';\r\nimport PinchGestureHandler from './web/PinchGestureHandler';\r\nimport RotationGestureHandler from './web/RotationGestureHandler';\r\nimport TapGestureHandler from './web/TapGestureHandler';\r\n\r\nexport const Gestures = {\r\n  PanGestureHandler,\r\n  RotationGestureHandler,\r\n  PinchGestureHandler,\r\n  TapGestureHandler,\r\n  NativeViewGestureHandler,\r\n  LongPressGestureHandler,\r\n  FlingGestureHandler,\r\n  // ForceTouchGestureHandler,\r\n};\r\n\r\nexport default {\r\n  Direction,\r\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\r\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\r\n  },\r\n  handleClearJSResponder() {\r\n    console.warn('handleClearJSResponder: ');\r\n  },\r\n  createGestureHandler<T>(\r\n    handlerName: keyof typeof Gestures,\r\n    handlerTag: number,\r\n    config: T\r\n  ) {\r\n    //TODO(TS) extends config\r\n    if (!(handlerName in Gestures))\r\n      throw new Error(\r\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\r\n      );\r\n    const GestureClass = Gestures[handlerName];\r\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\r\n    this.updateGestureHandler(handlerTag, config);\r\n  },\r\n  attachGestureHandler(\r\n    handlerTag: number,\r\n    newView: number,\r\n    _usingDeviceEvents: boolean,\r\n    propsRef: React.RefObject<unknown>\r\n  ) {\r\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\r\n  },\r\n  updateGestureHandler(handlerTag: number, newConfig: any) {\r\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\r\n  },\r\n  getGestureHandlerNode(handlerTag: number) {\r\n    return NodeManager.getHandler(handlerTag);\r\n  },\r\n  dropGestureHandler(handlerTag: number) {\r\n    NodeManager.dropGestureHandler(handlerTag);\r\n  },\r\n};\r\n"]}