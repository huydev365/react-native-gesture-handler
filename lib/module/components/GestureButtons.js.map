{"version":3,"sources":["GestureButtons.tsx"],"names":["React","Animated","Platform","processColor","StyleSheet","createNativeWrapper","GestureHandlerButton","State","RawButton","shouldCancelWhenOutside","shouldActivateOnStart","BaseButton","Component","constructor","props","nativeEvent","state","oldState","pointerInside","active","ACTIVE","lastActive","onActiveStateChange","CANCELLED","onPress","e","onHandlerStateChange","handleEvent","onGestureEvent","render","rippleColor","rest","AnimatedBaseButton","createAnimatedComponent","btnStyles","create","underlay","position","left","right","bottom","top","RectButton","OS","opacity","setValue","activeOpacity","Value","children","style","resolvedStyle","flatten","backgroundColor","underlayColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless","default","PureNativeButton"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  Platform,\r\n  processColor,\r\n  StyleSheet,\r\n  StyleProp,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nimport createNativeWrapper from '../handlers/createNativeWrapper';\r\nimport GestureHandlerButton from './GestureHandlerButton';\r\nimport { State } from '../State';\r\n\r\nimport {\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n} from '../handlers/gestureHandlerCommon';\r\nimport {\r\n  NativeViewGestureHandlerPayload,\r\n  NativeViewGestureHandlerProps,\r\n} from '../handlers/NativeViewGestureHandler';\r\n\r\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\r\n  /**\r\n   * Defines if more than one button could be pressed simultaneously. By default\r\n   * set true.\r\n   */\r\n  exclusive?: boolean;\r\n  // TODO: we should transform props in `createNativeWrapper`\r\n\r\n  /**\r\n   * Android only.\r\n   *\r\n   * Defines color of native ripple animation used since API level 21.\r\n   */\r\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\r\n}\r\n\r\nexport interface BaseButtonProps extends RawButtonProps {\r\n  /**\r\n   * Called when the button gets pressed (analogous to `onPress` in\r\n   * `TouchableHighlight` from RN core).\r\n   */\r\n  onPress?: (pointerInside: boolean) => void;\r\n\r\n  /**\r\n   * Called when button changes from inactive to active and vice versa. It\r\n   * passes active state as a boolean variable as a first parameter for that\r\n   * method.\r\n   */\r\n  onActiveStateChange?: (active: boolean) => void;\r\n  style?: StyleProp<ViewStyle>;\r\n  testID?: string;\r\n}\r\n\r\nexport interface RectButtonProps extends BaseButtonProps {\r\n  /**\r\n   * Background color that will be dimmed when button is in active state.\r\n   */\r\n  underlayColor?: string;\r\n\r\n  /**\r\n   * iOS only.\r\n   *\r\n   * Opacity applied to the underlay when button is in active state.\r\n   */\r\n  activeOpacity?: number;\r\n}\r\n\r\nexport interface BorderlessButtonProps extends BaseButtonProps {\r\n  /**\r\n   * Android only.\r\n   *\r\n   * Set this to false if you want the ripple animation to render only within view bounds.\r\n   */\r\n  borderless?: boolean;\r\n\r\n  /**\r\n   * iOS only.\r\n   *\r\n   * Opacity applied to the button when it is in an active state.\r\n   */\r\n  activeOpacity?: number;\r\n}\r\n\r\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\r\n  shouldCancelWhenOutside: false,\r\n  shouldActivateOnStart: false,\r\n});\r\n\r\nexport class BaseButton extends React.Component<BaseButtonProps> {\r\n  private lastActive: boolean;\r\n\r\n  constructor(props: BaseButtonProps) {\r\n    super(props);\r\n    this.lastActive = false;\r\n  }\r\n\r\n  private handleEvent = ({\r\n    nativeEvent,\r\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\r\n    const { state, oldState, pointerInside } = nativeEvent;\r\n    const active = pointerInside && state === State.ACTIVE;\r\n\r\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\r\n      this.props.onActiveStateChange(active);\r\n    }\r\n\r\n    if (\r\n      oldState === State.ACTIVE &&\r\n      state !== State.CANCELLED &&\r\n      this.lastActive &&\r\n      this.props.onPress\r\n    ) {\r\n      this.props.onPress(active);\r\n    }\r\n\r\n    this.lastActive = active;\r\n  };\r\n\r\n  // Normally, the parent would execute it's handler first, then forward the\r\n  // event to listeners. However, here our handler is virtually only forwarding\r\n  // events to listeners, so we reverse the order to keep the proper order of\r\n  // the callbacks (from \"raw\" ones to \"processed\").\r\n  private onHandlerStateChange = (\r\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\r\n  ) => {\r\n    this.props.onHandlerStateChange?.(e);\r\n    this.handleEvent(e);\r\n  };\r\n\r\n  private onGestureEvent = (\r\n    e: GestureEvent<NativeViewGestureHandlerPayload>\r\n  ) => {\r\n    this.props.onGestureEvent?.(e);\r\n    this.handleEvent(\r\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\r\n    ); // TODO: maybe it is not correct\r\n  };\r\n\r\n  render() {\r\n    const { rippleColor, ...rest } = this.props;\r\n\r\n    return (\r\n      <RawButton\r\n        rippleColor={processColor(rippleColor)}\r\n        {...rest}\r\n        onGestureEvent={this.onGestureEvent}\r\n        onHandlerStateChange={this.onHandlerStateChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\r\n\r\nconst btnStyles = StyleSheet.create({\r\n  underlay: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    top: 0,\r\n  },\r\n});\r\n\r\nexport class RectButton extends React.Component<RectButtonProps> {\r\n  static defaultProps = {\r\n    activeOpacity: 0.105,\r\n    underlayColor: 'black',\r\n  };\r\n\r\n  private opacity: Animated.Value;\r\n\r\n  constructor(props: RectButtonProps) {\r\n    super(props);\r\n    this.opacity = new Animated.Value(0);\r\n  }\r\n\r\n  private onActiveStateChange = (active: boolean) => {\r\n    if (Platform.OS !== 'android') {\r\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\r\n    }\r\n\r\n    this.props.onActiveStateChange?.(active);\r\n  };\r\n\r\n  render() {\r\n    const { children, style, ...rest } = this.props;\r\n\r\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\r\n\r\n    return (\r\n      <BaseButton\r\n        {...rest}\r\n        style={resolvedStyle}\r\n        onActiveStateChange={this.onActiveStateChange}>\r\n        <Animated.View\r\n          style={[\r\n            btnStyles.underlay,\r\n            {\r\n              opacity: this.opacity,\r\n              backgroundColor: this.props.underlayColor,\r\n              borderRadius: resolvedStyle.borderRadius,\r\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\r\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\r\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\r\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\r\n            },\r\n          ]}\r\n        />\r\n        {children}\r\n      </BaseButton>\r\n    );\r\n  }\r\n}\r\n\r\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\r\n  static defaultProps = {\r\n    activeOpacity: 0.3,\r\n    borderless: true,\r\n  };\r\n\r\n  private opacity: Animated.Value;\r\n\r\n  constructor(props: BorderlessButtonProps) {\r\n    super(props);\r\n    this.opacity = new Animated.Value(1);\r\n  }\r\n\r\n  private onActiveStateChange = (active: boolean) => {\r\n    if (Platform.OS !== 'android') {\r\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\r\n    }\r\n\r\n    this.props.onActiveStateChange?.(active);\r\n  };\r\n\r\n  render() {\r\n    const { children, style, ...rest } = this.props;\r\n\r\n    return (\r\n      <AnimatedBaseButton\r\n        {...rest}\r\n        onActiveStateChange={this.onActiveStateChange}\r\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\r\n        {children}\r\n      </AnimatedBaseButton>\r\n    );\r\n  }\r\n}\r\n\r\nexport { default as PureNativeButton } from './GestureHandlerButton';\r\n"]}