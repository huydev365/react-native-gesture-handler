{"version":3,"sources":["DrawerLayout.tsx"],"names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","createRef","state","drawerPosition","drawerWidth","drawerType","dragX","dragXValue","touchX","touchXValue","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","ACTIVE","handleRelease","emitStateChanged","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","onTapHandlerStateChange","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","handleContainerLayout","containerOnBack","containerInFront","children","renderOverlay","drawerContainer","renderNavigationView","ref","onGestureRef","updateAnimatedEvent","UNSAFE_componentWillUpdate","render","setPanGestureRef","openingHandlerStateChange","enableTrackpadTwoFingerGesture","renderDrawer","Left","Right","create","absoluteFillObject","zIndex","flex","overflow"],"mappings":"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","sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\r\n//\r\n// It perhaps deserves to be put in a separate repo, but since it relies on\r\n// react-native-gesture-handler library which isn't very popular at the moment I\r\n// decided to keep it here for the time being. It will allow us to move faster\r\n// and fix issues that may arise in gesture handler library that could be found\r\n// when using the drawer component\r\n\r\nimport * as React from 'react';\r\nimport { Component } from 'react';\r\nimport invariant from 'invariant';\r\nimport {\r\n  Animated,\r\n  StyleSheet,\r\n  View,\r\n  Keyboard,\r\n  StatusBar,\r\n  I18nManager,\r\n  StatusBarAnimation,\r\n  StyleProp,\r\n  ViewStyle,\r\n  LayoutChangeEvent,\r\n  NativeSyntheticEvent,\r\n} from 'react-native';\r\n\r\nimport {\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n} from '../handlers/gestureHandlerCommon';\r\nimport {\r\n  PanGestureHandler,\r\n  PanGestureHandlerEventPayload,\r\n} from '../handlers/PanGestureHandler';\r\nimport {\r\n  TapGestureHandler,\r\n  TapGestureHandlerEventPayload,\r\n} from '../handlers/TapGestureHandler';\r\nimport { State } from '../State';\r\n\r\nconst DRAG_TOSS = 0.05;\r\n\r\nconst IDLE: DrawerState = 'Idle';\r\nconst DRAGGING: DrawerState = 'Dragging';\r\nconst SETTLING: DrawerState = 'Settling';\r\n\r\nexport type DrawerPosition = 'left' | 'right';\r\n\r\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\r\n\r\nexport type DrawerType = 'front' | 'back' | 'slide';\r\n\r\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\r\n\r\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\r\n\r\nexport interface DrawerLayoutProps {\r\n  /**\r\n   * This attribute is present in the standard implementation already and is one\r\n   * of the required params. Gesture handler version of DrawerLayout make it\r\n   * possible for the function passed as `renderNavigationView` to take an\r\n   * Animated value as a parameter that indicates the progress of drawer\r\n   * opening/closing animation (progress value is 0 when closed and 1 when\r\n   * opened). This can be used by the drawer component to animated its children\r\n   * while the drawer is opening or closing.\r\n   */\r\n  renderNavigationView: (\r\n    progressAnimatedValue: Animated.Value\r\n  ) => React.ReactNode;\r\n\r\n  drawerPosition?: DrawerPosition;\r\n\r\n  drawerWidth?: number;\r\n\r\n  drawerBackgroundColor?: string;\r\n\r\n  drawerLockMode?: DrawerLockMode;\r\n\r\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\r\n\r\n  /**\r\n   * Called when the drawer is closed.\r\n   */\r\n  onDrawerClose?: () => void;\r\n\r\n  /**\r\n   * Called when the drawer is opened.\r\n   */\r\n  onDrawerOpen?: () => void;\r\n\r\n  /**\r\n   * Called when the status of the drawer changes.\r\n   */\r\n  onDrawerStateChanged?: (\r\n    newState: DrawerState,\r\n    drawerWillShow: boolean\r\n  ) => void;\r\n  useNativeAnimations?: boolean;\r\n\r\n  drawerType?: DrawerType;\r\n\r\n  /**\r\n   * Defines how far from the edge of the content view the gesture should\r\n   * activate.\r\n   */\r\n  edgeWidth?: number;\r\n\r\n  minSwipeDistance?: number;\r\n\r\n  /**\r\n   * When set to true Drawer component will use\r\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\r\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\r\n   */\r\n  hideStatusBar?: boolean;\r\n\r\n  /**\r\n   * @default 'slide'\r\n   *\r\n   * Can be used when hideStatusBar is set to true and will select the animation\r\n   * used for hiding/showing the status bar. See\r\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\r\n   * more details\r\n   */\r\n  statusBarAnimation?: StatusBarAnimation;\r\n\r\n  /**\r\n   * @default black\r\n   *\r\n   * Color of a semi-transparent overlay to be displayed on top of the content\r\n   * view when drawer gets open. A solid color should be used as the opacity is\r\n   * added by the Drawer itself and the opacity of the overlay is animated (from\r\n   * 0% to 70%).\r\n   */\r\n  overlayColor?: string;\r\n\r\n  contentContainerStyle?: StyleProp<ViewStyle>;\r\n\r\n  drawerContainerStyle?: StyleProp<ViewStyle>;\r\n\r\n  /**\r\n   * Enables two-finger gestures on supported devices, for example iPads with\r\n   * trackpads. If not enabled the gesture will require click + drag, with\r\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\r\n   * the gesture.\r\n   */\r\n  enableTrackpadTwoFingerGesture?: boolean;\r\n\r\n  onDrawerSlide?: (position: number) => void;\r\n\r\n  onGestureRef?: (ref: PanGestureHandler) => void;\r\n}\r\n\r\nexport type DrawerLayoutState = {\r\n  dragX: Animated.Value;\r\n  touchX: Animated.Value;\r\n  drawerTranslation: Animated.Value;\r\n  containerWidth: number;\r\n};\r\n\r\nexport type DrawerMovementOption = {\r\n  velocity?: number;\r\n  speed?: number;\r\n};\r\nexport default class DrawerLayout extends Component<\r\n  DrawerLayoutProps,\r\n  DrawerLayoutState\r\n> {\r\n  static defaultProps = {\r\n    drawerWidth: 200,\r\n    drawerPosition: 'left',\r\n    useNativeAnimations: true,\r\n    drawerType: 'front',\r\n    edgeWidth: 20,\r\n    minSwipeDistance: 3,\r\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\r\n    drawerLockMode: 'unlocked',\r\n    enableTrackpadTwoFingerGesture: false,\r\n  };\r\n\r\n  constructor(props: DrawerLayoutProps) {\r\n    super(props);\r\n\r\n    const dragX = new Animated.Value(0);\r\n    const touchX = new Animated.Value(0);\r\n    const drawerTranslation = new Animated.Value(0);\r\n\r\n    this.state = {\r\n      dragX,\r\n      touchX,\r\n      drawerTranslation,\r\n      containerWidth: 0,\r\n    };\r\n\r\n    this.updateAnimatedEvent(props, this.state);\r\n  }\r\n\r\n  UNSAFE_componentWillUpdate(\r\n    props: DrawerLayoutProps,\r\n    state: DrawerLayoutState\r\n  ) {\r\n    if (\r\n      this.props.drawerPosition !== props.drawerPosition ||\r\n      this.props.drawerWidth !== props.drawerWidth ||\r\n      this.props.drawerType !== props.drawerType ||\r\n      this.state.containerWidth !== state.containerWidth\r\n    ) {\r\n      this.updateAnimatedEvent(props, state);\r\n    }\r\n  }\r\n\r\n  private openValue?: Animated.AnimatedInterpolation;\r\n  private onGestureEvent?: (\r\n    event: GestureEvent<PanGestureHandlerEventPayload>\r\n  ) => void;\r\n  private accessibilityIsModalView = React.createRef<View>();\r\n  private pointerEventsView = React.createRef<View>();\r\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\r\n  private drawerShown = false;\r\n\r\n  static positions = {\r\n    Left: 'left',\r\n    Right: 'right',\r\n  };\r\n\r\n  private updateAnimatedEvent = (\r\n    props: DrawerLayoutProps,\r\n    state: DrawerLayoutState\r\n  ) => {\r\n    // Event definition is based on\r\n    const { drawerPosition, drawerWidth, drawerType } = props;\r\n    const {\r\n      dragX: dragXValue,\r\n      touchX: touchXValue,\r\n      drawerTranslation,\r\n      containerWidth,\r\n    } = state;\r\n\r\n    let dragX = dragXValue;\r\n    let touchX = touchXValue;\r\n\r\n    if (drawerPosition !== 'left') {\r\n      // Most of the code is written in a way to handle left-side drawer. In\r\n      // order to handle right-side drawer the only thing we need to do is to\r\n      // reverse events coming from gesture handler in a way they emulate\r\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\r\n      // calulcated by subtracing real touchX from the width of the container\r\n      // (such that when touch happens at the right edge the value is simply 0)\r\n      dragX = Animated.multiply(\r\n        new Animated.Value(-1),\r\n        dragXValue\r\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\r\n      touchX = Animated.add(\r\n        new Animated.Value(containerWidth),\r\n        Animated.multiply(new Animated.Value(-1), touchXValue)\r\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\r\n      touchXValue.setValue(containerWidth);\r\n    } else {\r\n      touchXValue.setValue(0);\r\n    }\r\n\r\n    // While closing the drawer when user starts gesture outside of its area (in greyed\r\n    // out part of the window), we want the drawer to follow only once finger reaches the\r\n    // edge of the drawer.\r\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\r\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\r\n    // an arrow pointing left\r\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    +---------------+    +---------------+    +---------------+    +---------------+\r\n    //\r\n    // For the above to work properly we define animated value that will keep\r\n    // start position of the gesture. Then we use that value to calculate how\r\n    // much we need to subtract from the dragX. If the gesture started on the\r\n    // greyed out area we take the distance from the edge of the drawer to the\r\n    // start position. Otherwise we don't subtract at all and the drawer be\r\n    // pulled back as soon as you start the pan.\r\n    //\r\n    // This is used only when drawerType is \"front\"\r\n    //\r\n    let translationX = dragX;\r\n    if (drawerType === 'front') {\r\n      const startPositionX = Animated.add(\r\n        touchX,\r\n        Animated.multiply(new Animated.Value(-1), dragX)\r\n      );\r\n\r\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\r\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\r\n        outputRange: [0, 0, 1],\r\n      });\r\n      translationX = Animated.add(\r\n        dragX,\r\n        dragOffsetFromOnStartPosition\r\n      ) as Animated.Value; // TODO: as above\r\n    }\r\n\r\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\r\n      inputRange: [0, drawerWidth!],\r\n      outputRange: [0, 1],\r\n      extrapolate: 'clamp',\r\n    });\r\n\r\n    const gestureOptions: {\r\n      useNativeDriver: boolean;\r\n      // TODO: make sure it is correct\r\n      listener?: (\r\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\r\n      ) => void;\r\n    } = {\r\n      useNativeDriver: props.useNativeAnimations!,\r\n    };\r\n\r\n    if (this.props.onDrawerSlide) {\r\n      gestureOptions.listener = (ev) => {\r\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\r\n        const position = translationX / this.state.containerWidth;\r\n\r\n        this.props.onDrawerSlide?.(position);\r\n      };\r\n    }\r\n\r\n    this.onGestureEvent = Animated.event(\r\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\r\n      gestureOptions\r\n    );\r\n  };\r\n\r\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\r\n    this.setState({ containerWidth: nativeEvent.layout.width });\r\n  };\r\n\r\n  private emitStateChanged = (\r\n    newState: DrawerState,\r\n    drawerWillShow: boolean\r\n  ) => {\r\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\r\n  };\r\n\r\n  private openingHandlerStateChange = ({\r\n    nativeEvent,\r\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\r\n    if (nativeEvent.oldState === State.ACTIVE) {\r\n      this.handleRelease({ nativeEvent });\r\n    } else if (nativeEvent.state === State.ACTIVE) {\r\n      this.emitStateChanged(DRAGGING, false);\r\n      if (this.props.keyboardDismissMode === 'on-drag') {\r\n        Keyboard.dismiss();\r\n      }\r\n      if (this.props.hideStatusBar) {\r\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\r\n      }\r\n    }\r\n  };\r\n\r\n  private onTapHandlerStateChange = ({\r\n    nativeEvent,\r\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\r\n    if (\r\n      this.drawerShown &&\r\n      nativeEvent.oldState === State.ACTIVE &&\r\n      this.props.drawerLockMode !== 'locked-open'\r\n    ) {\r\n      this.closeDrawer();\r\n    }\r\n  };\r\n\r\n  private handleRelease = ({\r\n    nativeEvent,\r\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\r\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\r\n    const { containerWidth } = this.state;\r\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\r\n\r\n    if (drawerPosition !== 'left') {\r\n      // See description in _updateAnimatedEvent about why events are flipped\r\n      // for right-side drawer\r\n      dragX = -dragX;\r\n      touchX = containerWidth - touchX;\r\n      velocityX = -velocityX;\r\n    }\r\n\r\n    const gestureStartX = touchX - dragX;\r\n    let dragOffsetBasedOnStart = 0;\r\n\r\n    if (drawerType === 'front') {\r\n      dragOffsetBasedOnStart =\r\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\r\n    }\r\n\r\n    const startOffsetX =\r\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\r\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\r\n\r\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\r\n\r\n    if (shouldOpen) {\r\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\r\n    } else {\r\n      this.animateDrawer(startOffsetX, 0, velocityX);\r\n    }\r\n  };\r\n\r\n  private updateShowing = (showing: boolean) => {\r\n    this.drawerShown = showing;\r\n    this.accessibilityIsModalView.current?.setNativeProps({\r\n      accessibilityViewIsModal: showing,\r\n    });\r\n    this.pointerEventsView.current?.setNativeProps({\r\n      pointerEvents: showing ? 'auto' : 'none',\r\n    });\r\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\r\n    const fromLeft = drawerPosition === 'left';\r\n    // gestureOrientation is 1 if the expected gesture is from left to right and\r\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\r\n    // to right gesture, thus orientation will be 1.\r\n    const gestureOrientation =\r\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\r\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\r\n    // the container size by the value of SLOP. This will make it only activate\r\n    // when gesture happens not further than SLOP away from the edge\r\n    const hitSlop = fromLeft\r\n      ? { left: 0, width: showing ? undefined : edgeWidth }\r\n      : { right: 0, width: showing ? undefined : edgeWidth };\r\n    // @ts-ignore internal API, maybe could be fixed in handler types\r\n    this.panGestureHandler.current?.setNativeProps({\r\n      hitSlop,\r\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\r\n    });\r\n  };\r\n\r\n  private animateDrawer = (\r\n    fromValue: number | null | undefined,\r\n    toValue: number,\r\n    velocity: number,\r\n    speed?: number\r\n  ) => {\r\n    this.state.dragX.setValue(0);\r\n    this.state.touchX.setValue(\r\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\r\n    );\r\n\r\n    if (fromValue != null) {\r\n      let nextFramePosition = fromValue;\r\n      if (this.props.useNativeAnimations) {\r\n        // When using native driver, we predict the next position of the\r\n        // animation because it takes one frame of a roundtrip to pass RELEASE\r\n        // event from native driver to JS before we can start animating. Without\r\n        // it, it is more noticable that the frame is dropped.\r\n        if (fromValue < toValue && velocity > 0) {\r\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\r\n        } else if (fromValue > toValue && velocity < 0) {\r\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\r\n        }\r\n      }\r\n      this.state.drawerTranslation.setValue(nextFramePosition);\r\n    }\r\n\r\n    const willShow = toValue !== 0;\r\n    this.updateShowing(willShow);\r\n    this.emitStateChanged(SETTLING, willShow);\r\n    if (this.props.hideStatusBar) {\r\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\r\n    }\r\n    Animated.spring(this.state.drawerTranslation, {\r\n      velocity,\r\n      bounciness: 0,\r\n      toValue,\r\n      useNativeDriver: this.props.useNativeAnimations!,\r\n      speed: speed ?? undefined,\r\n    }).start(({ finished }) => {\r\n      if (finished) {\r\n        this.emitStateChanged(IDLE, willShow);\r\n        if (willShow) {\r\n          this.props.onDrawerOpen?.();\r\n        } else {\r\n          this.props.onDrawerClose?.();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  openDrawer = (options: DrawerMovementOption = {}) => {\r\n    this.animateDrawer(\r\n      // TODO: decide if it should be null or undefined is the proper value\r\n      undefined,\r\n      this.props.drawerWidth!,\r\n      options.velocity ? options.velocity : 0,\r\n      options.speed\r\n    );\r\n\r\n    // We need to force the update, otherwise the overlay is not rerendered and\r\n    // it would not be clickable\r\n    this.forceUpdate();\r\n  };\r\n\r\n  closeDrawer = (options: DrawerMovementOption = {}) => {\r\n    // TODO: decide if it should be null or undefined is the proper value\r\n    this.animateDrawer(\r\n      undefined,\r\n      0,\r\n      options.velocity ? options.velocity : 0,\r\n      options.speed\r\n    );\r\n\r\n    // We need to force the update, otherwise the overlay is not rerendered and\r\n    // it would be still clickable\r\n    this.forceUpdate();\r\n  };\r\n\r\n  private renderOverlay = () => {\r\n    /* Overlay styles */\r\n    invariant(this.openValue, 'should be set');\r\n    const overlayOpacity = this.openValue.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0, 1],\r\n      extrapolate: 'clamp',\r\n    });\r\n    const dynamicOverlayStyles = {\r\n      opacity: overlayOpacity,\r\n      backgroundColor: this.props.overlayColor,\r\n    };\r\n\r\n    return (\r\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\r\n        <Animated.View\r\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\r\n          ref={this.pointerEventsView}\r\n          style={[styles.overlay, dynamicOverlayStyles]}\r\n        />\r\n      </TapGestureHandler>\r\n    );\r\n  };\r\n\r\n  private renderDrawer = () => {\r\n    const {\r\n      drawerBackgroundColor,\r\n      drawerWidth,\r\n      drawerPosition,\r\n      drawerType,\r\n      drawerContainerStyle,\r\n      contentContainerStyle,\r\n    } = this.props;\r\n\r\n    const fromLeft = drawerPosition === 'left';\r\n    const drawerSlide = drawerType !== 'back';\r\n    const containerSlide = drawerType !== 'front';\r\n\r\n    // we rely on row and row-reverse flex directions to position the drawer\r\n    // properly. Apparently for RTL these are flipped which requires us to use\r\n    // the opposite setting for the drawer to appear from left or right\r\n    // according to the drawerPosition prop\r\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\r\n\r\n    const dynamicDrawerStyles = {\r\n      backgroundColor: drawerBackgroundColor,\r\n      width: drawerWidth,\r\n    };\r\n    const openValue = this.openValue;\r\n    invariant(openValue, 'should be set');\r\n\r\n    let containerStyles;\r\n    if (containerSlide) {\r\n      const containerTranslateX = openValue.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\r\n        extrapolate: 'clamp',\r\n      });\r\n      containerStyles = {\r\n        transform: [{ translateX: containerTranslateX }],\r\n      };\r\n    }\r\n\r\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\r\n    if (drawerSlide) {\r\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\r\n      drawerTranslateX = openValue.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [closedDrawerOffset, 0],\r\n        extrapolate: 'clamp',\r\n      });\r\n    }\r\n    const drawerStyles: {\r\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\r\n      flexDirection: 'row-reverse' | 'row';\r\n    } = {\r\n      transform: [{ translateX: drawerTranslateX }],\r\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\r\n    };\r\n\r\n    return (\r\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\r\n        <Animated.View\r\n          style={[\r\n            drawerType === 'front'\r\n              ? styles.containerOnBack\r\n              : styles.containerInFront,\r\n            containerStyles,\r\n            contentContainerStyle,\r\n          ]}\r\n          importantForAccessibility={\r\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\r\n          }>\r\n          {typeof this.props.children === 'function'\r\n            ? this.props.children(this.openValue)\r\n            : this.props.children}\r\n          {this.renderOverlay()}\r\n        </Animated.View>\r\n        <Animated.View\r\n          pointerEvents=\"box-none\"\r\n          ref={this.accessibilityIsModalView}\r\n          accessibilityViewIsModal={this.drawerShown}\r\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\r\n          <View style={dynamicDrawerStyles}>\r\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\r\n          </View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n    );\r\n  };\r\n\r\n  private setPanGestureRef = (ref: PanGestureHandler) => {\r\n    // TODO(TS): make sure it is OK taken from\r\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\r\n    (this\r\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\r\n    this.props.onGestureRef?.(ref);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      drawerPosition,\r\n      drawerLockMode,\r\n      edgeWidth,\r\n      minSwipeDistance,\r\n    } = this.props;\r\n\r\n    const fromLeft = drawerPosition === 'left';\r\n\r\n    // gestureOrientation is 1 if the expected gesture is from left to right and\r\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\r\n    // to right gesture, thus orientation will be 1.\r\n    const gestureOrientation =\r\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\r\n\r\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\r\n    // the container size by the value of SLOP. This will make it only activate\r\n    // when gesture happens not further than SLOP away from the edge\r\n    const hitSlop = fromLeft\r\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\r\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\r\n\r\n    return (\r\n      <PanGestureHandler\r\n        // @ts-ignore could be fixed in handler types\r\n        ref={this.setPanGestureRef}\r\n        hitSlop={hitSlop}\r\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\r\n        failOffsetY={[-15, 15]}\r\n        onGestureEvent={this.onGestureEvent}\r\n        onHandlerStateChange={this.openingHandlerStateChange}\r\n        enableTrackpadTwoFingerGesture={\r\n          this.props.enableTrackpadTwoFingerGesture\r\n        }\r\n        enabled={\r\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\r\n        }>\r\n        {this.renderDrawer()}\r\n      </PanGestureHandler>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  drawerContainer: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    zIndex: 1001,\r\n    flexDirection: 'row',\r\n  },\r\n  containerInFront: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    zIndex: 1002,\r\n  },\r\n  containerOnBack: {\r\n    ...StyleSheet.absoluteFillObject,\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    zIndex: 0,\r\n    overflow: 'hidden',\r\n  },\r\n  overlay: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    zIndex: 1000,\r\n  },\r\n});\r\n"]}