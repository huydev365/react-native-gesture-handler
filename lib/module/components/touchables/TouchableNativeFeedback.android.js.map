{"version":3,"sources":["TouchableNativeFeedback.android.tsx"],"names":["Platform","React","Component","GenericTouchable","TouchableNativeFeedback","getExtraButtonProps","extraProps","background","props","type","borderless","color","attribute","rippleRadius","useForeground","render","style","rest","defaultProps","extraButtonProps","rippleColor","Version"],"mappings":";;;;AAAA,SACEA,QADF,QAIO,cAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAAwD,oBAAxD;;AASA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,uBAAN,SAAsCF,SAAtC,CAEb;AAUA;AAyBAG,EAAAA,mBAAmB,GAAG;AACpB,UAAMC,UAA6C,GAAG,EAAtD;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAiB,KAAKC,KAA5B;;AACA,QAAID,UAAJ,EAAgB;AACd;AACA;AACA,UAAIA,UAAU,CAACE,IAAX,KAAoB,eAAxB,EAAyC;AACvCH,QAAAA,UAAU,CAAC,YAAD,CAAV,GAA2BC,UAAU,CAACG,UAAtC;AACAJ,QAAAA,UAAU,CAAC,aAAD,CAAV,GAA4BC,UAAU,CAACI,KAAvC;AACD,OAHD,MAGO,IAAIJ,UAAU,CAACE,IAAX,KAAoB,kBAAxB,EAA4C;AACjDH,QAAAA,UAAU,CAAC,YAAD,CAAV,GACEC,UAAU,CAACK,SAAX,KAAyB,oCAD3B;AAED,OATa,CAUd;;;AACAN,MAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BC,UAAU,CAACM,YAAxC;AACD;;AACDP,IAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,KAAKE,KAAL,CAAWM,aAAtC;AACA,WAAOR,UAAP;AACD;;AACDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAK,GAAG,EAAV;AAAc,SAAGC;AAAjB,QAA0B,KAAKT,KAArC;AACA,wBACE,oBAAC,gBAAD,eACMS,IADN;AAEE,MAAA,KAAK,EAAED,KAFT;AAGE,MAAA,gBAAgB,EAAE,KAAKX,mBAAL;AAHpB,OADF;AAOD;;AA/DD;;gBAFmBD,uB,kBAGG,EACpB,GAAGD,gBAAgB,CAACe,YADA;AAEpBJ,EAAAA,aAAa,EAAE,IAFK;AAGpBK,EAAAA,gBAAgB,EAAE;AAChB;AACAC,IAAAA,WAAW,EAAE;AAFG;AAHE,C;;gBAHHhB,uB,0BAaYS,YAAD,KAA4B;AACxDJ,EAAAA,IAAI,EAAE,kBADkD;AAExD;AACAG,EAAAA,SAAS,EAAE,0BAH6C;AAIxDC,EAAAA;AAJwD,CAA5B,C;;gBAbXT,uB,oCAmBsBS,YAAD,KAA4B;AAClEJ,EAAAA,IAAI,EAAE,kBAD4D;AAElEG,EAAAA,SAAS,EAAE,oCAFuD;AAGlEC,EAAAA;AAHkE,CAA5B,C;;gBAnBrBT,uB,YAwBH,CACdO,KADc,EAEdD,UAFc,EAGdG,YAHc,MAIV;AACJJ,EAAAA,IAAI,EAAE,eADF;AAEJE,EAAAA,KAFI;AAGJD,EAAAA,UAHI;AAIJG,EAAAA;AAJI,CAJU,C;;gBAxBGT,uB,4BAmCa,MAAMJ,QAAQ,CAACqB,OAAT,IAAoB,E","sourcesContent":["import {\r\n  Platform,\r\n  TouchableNativeFeedbackProps,\r\n  ColorValue,\r\n} from 'react-native';\r\nimport * as React from 'react';\r\nimport { Component } from 'react';\r\nimport GenericTouchable, { GenericTouchableProps } from './GenericTouchable';\r\n\r\nexport type TouchableNativeFeedbackExtraProps = {\r\n  borderless?: boolean;\r\n  rippleColor?: number | null;\r\n  rippleRadius?: number | null;\r\n  foreground?: boolean;\r\n};\r\n\r\n/**\r\n * TouchableNativeFeedback behaves slightly different than RN's TouchableNativeFeedback.\r\n * There's small difference with handling long press ripple since RN's implementation calls\r\n * ripple animation via bridge. This solution leaves all animations' handling for native components so\r\n * it follows native behaviours.\r\n */\r\nexport default class TouchableNativeFeedback extends Component<\r\n  TouchableNativeFeedbackProps & GenericTouchableProps\r\n> {\r\n  static defaultProps = {\r\n    ...GenericTouchable.defaultProps,\r\n    useForeground: true,\r\n    extraButtonProps: {\r\n      // Disable hiding ripple on Android\r\n      rippleColor: null,\r\n    },\r\n  };\r\n\r\n  // could be taken as RNTouchableNativeFeedback.SelectableBackground etc. but the API may change\r\n  static SelectableBackground = (rippleRadius?: number) => ({\r\n    type: 'ThemeAttrAndroid',\r\n    // I added `attribute` prop to clone the implementation of RN and be able to use only 2 types\r\n    attribute: 'selectableItemBackground',\r\n    rippleRadius,\r\n  });\r\n  static SelectableBackgroundBorderless = (rippleRadius?: number) => ({\r\n    type: 'ThemeAttrAndroid',\r\n    attribute: 'selectableItemBackgroundBorderless',\r\n    rippleRadius,\r\n  });\r\n  static Ripple = (\r\n    color: ColorValue,\r\n    borderless: boolean,\r\n    rippleRadius?: number\r\n  ) => ({\r\n    type: 'RippleAndroid',\r\n    color,\r\n    borderless,\r\n    rippleRadius,\r\n  });\r\n\r\n  static canUseNativeForeground = () => Platform.Version >= 23;\r\n\r\n  getExtraButtonProps() {\r\n    const extraProps: TouchableNativeFeedbackExtraProps = {};\r\n    const { background } = this.props;\r\n    if (background) {\r\n      // I changed type values to match those used in RN\r\n      // TODO(TS): check if it works the same as previous implementation - looks like it works the same as RN component, so it should be ok\r\n      if (background.type === 'RippleAndroid') {\r\n        extraProps['borderless'] = background.borderless;\r\n        extraProps['rippleColor'] = background.color;\r\n      } else if (background.type === 'ThemeAttrAndroid') {\r\n        extraProps['borderless'] =\r\n          background.attribute === 'selectableItemBackgroundBorderless';\r\n      }\r\n      // I moved it from above since it should be available in all options\r\n      extraProps['rippleRadius'] = background.rippleRadius;\r\n    }\r\n    extraProps['foreground'] = this.props.useForeground;\r\n    return extraProps;\r\n  }\r\n  render() {\r\n    const { style = {}, ...rest } = this.props;\r\n    return (\r\n      <GenericTouchable\r\n        {...rest}\r\n        style={style}\r\n        extraButtonProps={this.getExtraButtonProps()}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]}