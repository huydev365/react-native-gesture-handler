{"version":3,"sources":["TouchableHighlight.tsx"],"names":["React","Component","GenericTouchable","TOUCHABLE_STATE","StyleSheet","View","TouchableHighlight","constructor","props","hasPressHandler","setState","extraChildStyle","opacity","activeOpacity","extraUnderlayStyle","backgroundColor","underlayColor","onShowUnderlay","onPress","onPressIn","onPressOut","onLongPress","onHideUnderlay","_from","to","BEGAN","showUnderlay","UNDETERMINED","MOVED_OUTSIDE","hideUnderlay","state","renderChildren","children","child","Children","only","cloneElement","style","compose","render","rest","onStateChange","defaultProps","delayPressOut"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,IAEEC,eAFF,QAGO,oBAHP;AAIA,SACEC,UADF,EAEEC,IAFF,QAMO,cANP;;AAiBA;AACA;AACA;AACA,eAAe,MAAMC,kBAAN,SAAiCL,SAAjC,CAGb;AAQAM,EAAAA,WAAW,CAACC,KAAD,EAAyD;AAClE,UAAMA,KAAN;;AADkE,0CASrD,MAAM;AAAA;;AACnB,UAAI,CAAC,KAAKC,eAAL,EAAL,EAA6B;AAC3B;AACD;;AACD,WAAKC,QAAL,CAAc;AACZC,QAAAA,eAAe,EAAE;AACfC,UAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK;AADL,SADL;AAIZC,QAAAA,kBAAkB,EAAE;AAClBC,UAAAA,eAAe,EAAE,KAAKP,KAAL,CAAWQ;AADV;AAJR,OAAd;AAQA,mDAAKR,KAAL,EAAWS,cAAX;AACD,KAtBmE;;AAAA,6CAwBlD,MAChB,KAAKT,KAAL,CAAWU,OAAX,IACA,KAAKV,KAAL,CAAWW,SADX,IAEA,KAAKX,KAAL,CAAWY,UAFX,IAGA,KAAKZ,KAAL,CAAWa,WA5BuD;;AAAA,0CA8BrD,MAAM;AAAA;;AACnB,WAAKX,QAAL,CAAc;AACZC,QAAAA,eAAe,EAAE,IADL;AAEZG,QAAAA,kBAAkB,EAAE;AAFR,OAAd;AAIA,oDAAKN,KAAL,EAAWc,cAAX;AACD,KApCmE;;AAAA,2CAmDpD,CAACC,KAAD,EAAgBC,EAAhB,KAA+B;AAC7C,UAAIA,EAAE,KAAKrB,eAAe,CAACsB,KAA3B,EAAkC;AAChC,aAAKC,YAAL;AACD,OAFD,MAEO,IACLF,EAAE,KAAKrB,eAAe,CAACwB,YAAvB,IACAH,EAAE,KAAKrB,eAAe,CAACyB,aAFlB,EAGL;AACA,aAAKC,YAAL;AACD;AACF,KA5DmE;;AAElE,SAAKC,KAAL,GAAa;AACXnB,MAAAA,eAAe,EAAE,IADN;AAEXG,MAAAA,kBAAkB,EAAE;AAFT,KAAb;AAID,GAdD,CAgBA;;;AA8BAiB,EAAAA,cAAc,GAAG;AACf,QAAI,CAAC,KAAKvB,KAAL,CAAWwB,QAAhB,EAA0B;AACxB,0BAAO,oBAAC,IAAD,OAAP;AACD;;AAED,UAAMC,KAAK,GAAGjC,KAAK,CAACkC,QAAN,CAAeC,IAAf,CACZ,KAAK3B,KAAL,CAAWwB,QADC,CAAd,CALe,CAOqB;;AACpC,wBAAOhC,KAAK,CAACoC,YAAN,CAAmBH,KAAnB,EAA0B;AAC/BI,MAAAA,KAAK,EAAEjC,UAAU,CAACkC,OAAX,CAAmBL,KAAK,CAACzB,KAAN,CAAY6B,KAA/B,EAAsC,KAAKP,KAAL,CAAWnB,eAAjD;AADwB,KAA1B,CAAP;AAGD;;AAaD4B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA,KAAK,GAAG,EAAV;AAAc,SAAGG;AAAjB,QAA0B,KAAKhC,KAArC;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAyB,KAAKgB,KAApC;AACA,wBACE,oBAAC,gBAAD,eACMU,IADN;AAEE,MAAA,KAAK,EAAE,CAACH,KAAD,EAAQvB,kBAAR,CAFT;AAGE,MAAA,aAAa,EAAE,KAAK2B;AAHtB,QAIG,KAAKV,cAAL,EAJH,CADF;AAQD;;AAjFD;;gBAHmBzB,kB,kBAIG,EACpB,GAAGJ,gBAAgB,CAACwC,YADA;AAEpB7B,EAAAA,aAAa,EAAE,IAFK;AAGpB8B,EAAAA,aAAa,EAAE,GAHK;AAIpB3B,EAAAA,aAAa,EAAE;AAJK,C","sourcesContent":["import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport GenericTouchable, {\r\n  GenericTouchableProps,\r\n  TOUCHABLE_STATE,\r\n} from './GenericTouchable';\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  TouchableHighlightProps,\r\n  ColorValue,\r\n  ViewProps,\r\n} from 'react-native';\r\n\r\ninterface State {\r\n  extraChildStyle: null | {\r\n    opacity?: number;\r\n  };\r\n  extraUnderlayStyle: null | {\r\n    backgroundColor?: ColorValue;\r\n  };\r\n}\r\n\r\n/**\r\n * TouchableHighlight follows RN's implementation\r\n */\r\nexport default class TouchableHighlight extends Component<\r\n  TouchableHighlightProps & GenericTouchableProps,\r\n  State\r\n> {\r\n  static defaultProps = {\r\n    ...GenericTouchable.defaultProps,\r\n    activeOpacity: 0.85,\r\n    delayPressOut: 100,\r\n    underlayColor: 'black',\r\n  };\r\n\r\n  constructor(props: TouchableHighlightProps & GenericTouchableProps) {\r\n    super(props);\r\n    this.state = {\r\n      extraChildStyle: null,\r\n      extraUnderlayStyle: null,\r\n    };\r\n  }\r\n\r\n  // Copied from RN\r\n  showUnderlay = () => {\r\n    if (!this.hasPressHandler()) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      extraChildStyle: {\r\n        opacity: this.props.activeOpacity,\r\n      },\r\n      extraUnderlayStyle: {\r\n        backgroundColor: this.props.underlayColor,\r\n      },\r\n    });\r\n    this.props.onShowUnderlay?.();\r\n  };\r\n\r\n  hasPressHandler = () =>\r\n    this.props.onPress ||\r\n    this.props.onPressIn ||\r\n    this.props.onPressOut ||\r\n    this.props.onLongPress;\r\n\r\n  hideUnderlay = () => {\r\n    this.setState({\r\n      extraChildStyle: null,\r\n      extraUnderlayStyle: null,\r\n    });\r\n    this.props.onHideUnderlay?.();\r\n  };\r\n\r\n  renderChildren() {\r\n    if (!this.props.children) {\r\n      return <View />;\r\n    }\r\n\r\n    const child = React.Children.only(\r\n      this.props.children\r\n    ) as React.ReactElement<ViewProps>; // TODO: not sure if OK but fixes error\r\n    return React.cloneElement(child, {\r\n      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle),\r\n    });\r\n  }\r\n\r\n  onStateChange = (_from: number, to: number) => {\r\n    if (to === TOUCHABLE_STATE.BEGAN) {\r\n      this.showUnderlay();\r\n    } else if (\r\n      to === TOUCHABLE_STATE.UNDETERMINED ||\r\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\r\n    ) {\r\n      this.hideUnderlay();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { style = {}, ...rest } = this.props;\r\n    const { extraUnderlayStyle } = this.state;\r\n    return (\r\n      <GenericTouchable\r\n        {...rest}\r\n        style={[style, extraUnderlayStyle]}\r\n        onStateChange={this.onStateChange}>\r\n        {this.renderChildren()}\r\n      </GenericTouchable>\r\n    );\r\n  }\r\n}\r\n"]}