{"version":3,"sources":["Swipeable.tsx"],"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","constructor","props","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableOpen","onSwipeableRightOpen","closingDirection","onSwipeableClose","onSwipeableLeftWillOpen","onSwipeableWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","layout","width","undefined","updateAnimatedEvent","onGestureEvent","event","UNSAFE_componentWillUpdate","render","children","renderLeftActions","renderRightActions","left","styles","leftActions","transform","translateX","x","right","rightActions","onHandlerStateChange","onRowLayout","container","containerStyle","onTapHandlerStateChange","childrenContainerStyle","create","overflow","absoluteFillObject","flexDirection","isRTL"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\r\n// separate repo. Although, keeping it here for the time being will allow us to\r\n// move faster and fix possible issues quicker\r\n\r\nimport * as React from 'react';\r\nimport { Component } from 'react';\r\nimport {\r\n  Animated,\r\n  StyleSheet,\r\n  View,\r\n  I18nManager,\r\n  LayoutChangeEvent,\r\n  StyleProp,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nimport {\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n} from '../handlers/gestureHandlerCommon';\r\nimport {\r\n  PanGestureHandler,\r\n  PanGestureHandlerEventPayload,\r\n  PanGestureHandlerProps,\r\n} from '../handlers/PanGestureHandler';\r\nimport {\r\n  TapGestureHandler,\r\n  TapGestureHandlerEventPayload,\r\n} from '../handlers/TapGestureHandler';\r\nimport { State } from '../State';\r\n\r\nconst DRAG_TOSS = 0.05;\r\n\r\ntype SwipeableExcludes = Exclude<\r\n  keyof PanGestureHandlerProps,\r\n  'onGestureEvent' | 'onHandlerStateChange'\r\n>;\r\n\r\nexport interface SwipeableProps\r\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\r\n  /**\r\n   * Enables two-finger gestures on supported devices, for example iPads with\r\n   * trackpads. If not enabled the gesture will require click + drag, with\r\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\r\n   * the gesture.\r\n   */\r\n  enableTrackpadTwoFingerGesture?: boolean;\r\n\r\n  /**\r\n   * Specifies how much the visual interaction will be delayed compared to the\r\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\r\n   * should exactly follow the gesture, 2 means it is going to be two times\r\n   * \"slower\".\r\n   */\r\n  friction?: number;\r\n\r\n  /**\r\n   * Distance from the left edge at which released panel will animate to the\r\n   * open state (or the open panel will animate into the closed state). By\r\n   * default it's a half of the panel's width.\r\n   */\r\n  leftThreshold?: number;\r\n\r\n  /**\r\n   * Distance from the right edge at which released panel will animate to the\r\n   * open state (or the open panel will animate into the closed state). By\r\n   * default it's a half of the panel's width.\r\n   */\r\n  rightThreshold?: number;\r\n\r\n  /**\r\n   * Value indicating if the swipeable panel can be pulled further than the left\r\n   * actions panel's width. It is set to true by default as long as the left\r\n   * panel render method is present.\r\n   */\r\n  overshootLeft?: boolean;\r\n\r\n  /**\r\n   * Value indicating if the swipeable panel can be pulled further than the\r\n   * right actions panel's width. It is set to true by default as long as the\r\n   * right panel render method is present.\r\n   */\r\n  overshootRight?: boolean;\r\n\r\n  /**\r\n   * Specifies how much the visual interaction will be delayed compared to the\r\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\r\n   * a native feel, try 8 or above.\r\n   */\r\n  overshootFriction?: number;\r\n\r\n  /**\r\n   * @deprecated Use `direction` argument of onSwipeableOpen()\r\n   *\r\n   * Called when left action panel gets open.\r\n   */\r\n  onSwipeableLeftOpen?: () => void;\r\n\r\n  /**\r\n   * @deprecated Use `direction` argument of onSwipeableOpen()\r\n   *\r\n   * Called when right action panel gets open.\r\n   */\r\n  onSwipeableRightOpen?: () => void;\r\n\r\n  /**\r\n   * Called when action panel gets open (either right or left).\r\n   */\r\n  onSwipeableOpen?: (direction: 'left' | 'right') => void;\r\n\r\n  /**\r\n   * Called when action panel is closed.\r\n   */\r\n  onSwipeableClose?: (direction: 'left' | 'right') => void;\r\n\r\n  /**\r\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\r\n   *\r\n   * Called when left action panel starts animating on open.\r\n   */\r\n  onSwipeableLeftWillOpen?: () => void;\r\n\r\n  /**\r\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\r\n   *\r\n   * Called when right action panel starts animating on open.\r\n   */\r\n  onSwipeableRightWillOpen?: () => void;\r\n\r\n  /**\r\n   * Called when action panel starts animating on open (either right or left).\r\n   */\r\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\r\n\r\n  /**\r\n   * Called when action panel starts animating on close.\r\n   */\r\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\r\n\r\n  /**\r\n   *\r\n   * This map describes the values to use as inputRange for extra interpolation:\r\n   * AnimatedValue: [startValue, endValue]\r\n   *\r\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\r\n   *\r\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\r\n   * */\r\n  renderLeftActions?: (\r\n    progressAnimatedValue: Animated.AnimatedInterpolation,\r\n    dragAnimatedValue: Animated.AnimatedInterpolation\r\n  ) => React.ReactNode;\r\n  /**\r\n   *\r\n   * This map describes the values to use as inputRange for extra interpolation:\r\n   * AnimatedValue: [startValue, endValue]\r\n   *\r\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\r\n   *\r\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\r\n   * */\r\n  renderRightActions?: (\r\n    progressAnimatedValue: Animated.AnimatedInterpolation,\r\n    dragAnimatedValue: Animated.AnimatedInterpolation\r\n  ) => React.ReactNode;\r\n\r\n  useNativeAnimations?: boolean;\r\n\r\n  animationOptions?: Record<string, unknown>;\r\n\r\n  /**\r\n   * Style object for the container (`Animated.View`), for example to override\r\n   * `overflow: 'hidden'`.\r\n   */\r\n  containerStyle?: StyleProp<ViewStyle>;\r\n\r\n  /**\r\n   * Style object for the children container (`Animated.View`), for example to\r\n   * apply `flex: 1`\r\n   */\r\n  childrenContainerStyle?: StyleProp<ViewStyle>;\r\n}\r\n\r\ntype SwipeableState = {\r\n  dragX: Animated.Value;\r\n  rowTranslation: Animated.Value;\r\n  rowState: number;\r\n  leftWidth?: number;\r\n  rightOffset?: number;\r\n  rowWidth?: number;\r\n};\r\n\r\nexport default class Swipeable extends Component<\r\n  SwipeableProps,\r\n  SwipeableState\r\n> {\r\n  static defaultProps = {\r\n    friction: 1,\r\n    overshootFriction: 1,\r\n    useNativeAnimations: true,\r\n  };\r\n\r\n  constructor(props: SwipeableProps) {\r\n    super(props);\r\n    const dragX = new Animated.Value(0);\r\n    this.state = {\r\n      dragX,\r\n      rowTranslation: new Animated.Value(0),\r\n      rowState: 0,\r\n      leftWidth: undefined,\r\n      rightOffset: undefined,\r\n      rowWidth: undefined,\r\n    };\r\n    this.updateAnimatedEvent(props, this.state);\r\n\r\n    this.onGestureEvent = Animated.event(\r\n      [{ nativeEvent: { translationX: dragX } }],\r\n      { useNativeDriver: props.useNativeAnimations! }\r\n    );\r\n  }\r\n\r\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\r\n    if (\r\n      this.props.friction !== props.friction ||\r\n      this.props.overshootLeft !== props.overshootLeft ||\r\n      this.props.overshootRight !== props.overshootRight ||\r\n      this.props.overshootFriction !== props.overshootFriction ||\r\n      this.state.leftWidth !== state.leftWidth ||\r\n      this.state.rightOffset !== state.rightOffset ||\r\n      this.state.rowWidth !== state.rowWidth\r\n    ) {\r\n      this.updateAnimatedEvent(props, state);\r\n    }\r\n  }\r\n\r\n  private onGestureEvent?: (\r\n    event: GestureEvent<PanGestureHandlerEventPayload>\r\n  ) => void;\r\n  private transX?: Animated.AnimatedInterpolation;\r\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\r\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\r\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\r\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\r\n\r\n  private updateAnimatedEvent = (\r\n    props: SwipeableProps,\r\n    state: SwipeableState\r\n  ) => {\r\n    const { friction, overshootFriction } = props;\r\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\r\n    const { rightOffset = rowWidth } = state;\r\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\r\n\r\n    const {\r\n      overshootLeft = leftWidth > 0,\r\n      overshootRight = rightWidth > 0,\r\n    } = props;\r\n\r\n    const transX = Animated.add(\r\n      rowTranslation,\r\n      dragX.interpolate({\r\n        inputRange: [0, friction!],\r\n        outputRange: [0, 1],\r\n      })\r\n    ).interpolate({\r\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\r\n      outputRange: [\r\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\r\n        -rightWidth,\r\n        leftWidth,\r\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\r\n      ],\r\n    });\r\n    this.transX = transX;\r\n    this.showLeftAction =\r\n      leftWidth > 0\r\n        ? transX.interpolate({\r\n            inputRange: [-1, 0, leftWidth],\r\n            outputRange: [0, 0, 1],\r\n          })\r\n        : new Animated.Value(0);\r\n    this.leftActionTranslate = this.showLeftAction.interpolate({\r\n      inputRange: [0, Number.MIN_VALUE],\r\n      outputRange: [-10000, 0],\r\n      extrapolate: 'clamp',\r\n    });\r\n    this.showRightAction =\r\n      rightWidth > 0\r\n        ? transX.interpolate({\r\n            inputRange: [-rightWidth, 0, 1],\r\n            outputRange: [1, 0, 0],\r\n          })\r\n        : new Animated.Value(0);\r\n    this.rightActionTranslate = this.showRightAction.interpolate({\r\n      inputRange: [0, Number.MIN_VALUE],\r\n      outputRange: [-10000, 0],\r\n      extrapolate: 'clamp',\r\n    });\r\n  };\r\n\r\n  private onTapHandlerStateChange = ({\r\n    nativeEvent,\r\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\r\n    if (nativeEvent.oldState === State.ACTIVE) {\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  private onHandlerStateChange = (\r\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\r\n  ) => {\r\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\r\n      this.handleRelease(ev);\r\n    }\r\n  };\r\n\r\n  private handleRelease = (\r\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\r\n  ) => {\r\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\r\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\r\n    const { rightOffset = rowWidth } = this.state;\r\n    const rightWidth = rowWidth - rightOffset;\r\n    const {\r\n      friction,\r\n      leftThreshold = leftWidth / 2,\r\n      rightThreshold = rightWidth / 2,\r\n    } = this.props;\r\n\r\n    const startOffsetX = this.currentOffset() + dragX / friction!;\r\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\r\n\r\n    let toValue = 0;\r\n    if (rowState === 0) {\r\n      if (translationX > leftThreshold) {\r\n        toValue = leftWidth;\r\n      } else if (translationX < -rightThreshold) {\r\n        toValue = -rightWidth;\r\n      }\r\n    } else if (rowState === 1) {\r\n      // swiped to left\r\n      if (translationX > -leftThreshold) {\r\n        toValue = leftWidth;\r\n      }\r\n    } else {\r\n      // swiped to right\r\n      if (translationX < rightThreshold) {\r\n        toValue = -rightWidth;\r\n      }\r\n    }\r\n\r\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\r\n  };\r\n\r\n  private animateRow = (\r\n    fromValue: number,\r\n    toValue: number,\r\n    velocityX?:\r\n      | number\r\n      | {\r\n          x: number;\r\n          y: number;\r\n        }\r\n  ) => {\r\n    const { dragX, rowTranslation } = this.state;\r\n    dragX.setValue(0);\r\n    rowTranslation.setValue(fromValue);\r\n\r\n    this.setState({ rowState: Math.sign(toValue) });\r\n    Animated.spring(rowTranslation, {\r\n      restSpeedThreshold: 1.7,\r\n      restDisplacementThreshold: 0.4,\r\n      velocity: velocityX,\r\n      bounciness: 0,\r\n      toValue,\r\n      useNativeDriver: this.props.useNativeAnimations!,\r\n      ...this.props.animationOptions,\r\n    }).start(({ finished }) => {\r\n      if (finished) {\r\n        if (toValue > 0) {\r\n          this.props.onSwipeableLeftOpen?.();\r\n          this.props.onSwipeableOpen?.('left');\r\n        } else if (toValue < 0) {\r\n          this.props.onSwipeableRightOpen?.();\r\n          this.props.onSwipeableOpen?.('right');\r\n        } else {\r\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\r\n          this.props.onSwipeableClose?.(closingDirection);\r\n        }\r\n      }\r\n    });\r\n    if (toValue > 0) {\r\n      this.props.onSwipeableLeftWillOpen?.();\r\n      this.props.onSwipeableWillOpen?.('left');\r\n    } else if (toValue < 0) {\r\n      this.props.onSwipeableRightWillOpen?.();\r\n      this.props.onSwipeableWillOpen?.('right');\r\n    } else {\r\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\r\n      this.props.onSwipeableWillClose?.(closingDirection);\r\n    }\r\n  };\r\n\r\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\r\n    this.setState({ rowWidth: nativeEvent.layout.width });\r\n  };\r\n\r\n  private currentOffset = () => {\r\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\r\n    const { rightOffset = rowWidth } = this.state;\r\n    const rightWidth = rowWidth - rightOffset;\r\n    if (rowState === 1) {\r\n      return leftWidth;\r\n    } else if (rowState === -1) {\r\n      return -rightWidth;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  close = () => {\r\n    this.animateRow(this.currentOffset(), 0);\r\n  };\r\n\r\n  openLeft = () => {\r\n    const { leftWidth = 0 } = this.state;\r\n    this.animateRow(this.currentOffset(), leftWidth);\r\n  };\r\n\r\n  openRight = () => {\r\n    const { rowWidth = 0 } = this.state;\r\n    const { rightOffset = rowWidth } = this.state;\r\n    const rightWidth = rowWidth - rightOffset;\r\n    this.animateRow(this.currentOffset(), -rightWidth);\r\n  };\r\n\r\n  render() {\r\n    const { rowState } = this.state;\r\n    const { children, renderLeftActions, renderRightActions } = this.props;\r\n\r\n    const left = renderLeftActions && (\r\n      <Animated.View\r\n        style={[\r\n          styles.leftActions,\r\n          // all those and below parameters can have ! since they are all\r\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\r\n          // it for some reason\r\n          { transform: [{ translateX: this.leftActionTranslate! }] },\r\n        ]}>\r\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\r\n        <View\r\n          onLayout={({ nativeEvent }) =>\r\n            this.setState({ leftWidth: nativeEvent.layout.x })\r\n          }\r\n        />\r\n      </Animated.View>\r\n    );\r\n\r\n    const right = renderRightActions && (\r\n      <Animated.View\r\n        style={[\r\n          styles.rightActions,\r\n          { transform: [{ translateX: this.rightActionTranslate! }] },\r\n        ]}>\r\n        {renderRightActions(this.showRightAction!, this.transX!)}\r\n        <View\r\n          onLayout={({ nativeEvent }) =>\r\n            this.setState({ rightOffset: nativeEvent.layout.x })\r\n          }\r\n        />\r\n      </Animated.View>\r\n    );\r\n\r\n    return (\r\n      <PanGestureHandler\r\n        activeOffsetX={[-10, 10]}\r\n        {...this.props}\r\n        onGestureEvent={this.onGestureEvent}\r\n        onHandlerStateChange={this.onHandlerStateChange}>\r\n        <Animated.View\r\n          onLayout={this.onRowLayout}\r\n          style={[styles.container, this.props.containerStyle]}>\r\n          {left}\r\n          {right}\r\n          <TapGestureHandler\r\n            enabled={rowState !== 0}\r\n            onHandlerStateChange={this.onTapHandlerStateChange}>\r\n            <Animated.View\r\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\r\n              style={[\r\n                {\r\n                  transform: [{ translateX: this.transX! }],\r\n                },\r\n                this.props.childrenContainerStyle,\r\n              ]}>\r\n              {children}\r\n            </Animated.View>\r\n          </TapGestureHandler>\r\n        </Animated.View>\r\n      </PanGestureHandler>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    overflow: 'hidden',\r\n  },\r\n  leftActions: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\r\n  },\r\n  rightActions: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\r\n  },\r\n});\r\n"]}