{"version":3,"sources":["LongPressGestureHandler.ts"],"names":["Hammer","State","PressGestureHandler","isnan","isValidNumber","LongPressGestureHandler","minDurationMs","config","maxDist","updateHasCustomActivationCriteria","maxDistSq","getConfig","hasCustomActivationCriteria","shouldCancelWhenOutside","getHammerConfig","time","getState","type","INPUT_START","ACTIVE","INPUT_MOVE","INPUT_END","END","INPUT_CANCEL","FAILED"],"mappings":"AAAA;;AACA;AACA,OAAOA,MAAP,MAAmB,gBAAnB;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,SAArC;;AAIA,MAAMC,uBAAN,SAAsCH,mBAAtC,CAA0D;AACvC,MAAbI,aAAa,GAAW;AAC1B;AACA,WAAOH,KAAK,CAAC,KAAKI,MAAL,CAAYD,aAAb,CAAL,GAAmC,GAAnC,GAAyC,KAAKC,MAAL,CAAYD,aAA5D;AACD;;AAEU,MAAPE,OAAO,GAAG;AACZ;AACA,WAAOL,KAAK,CAAC,KAAKI,MAAL,CAAYC,OAAb,CAAL,GAA6B,CAA7B,GAAiC,KAAKD,MAAL,CAAYC,OAApD;AACD;;AAEDC,EAAAA,iCAAiC,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAwB;AACvD,WAAO,CAACN,aAAa,CAACM,SAAD,CAArB;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAI,CAAC,KAAKC,2BAAV,EAAuC;AACrC;AACA;AACA,aAAO;AACLC,QAAAA,uBAAuB,EAAE,IADpB;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,WAAO,KAAKH,MAAZ;AACD;;AAEDO,EAAAA,eAAe,GAAG;AAChB,WAAO,EACL,GAAG,MAAMA,eAAN,EADE;AAEL;AACAC,MAAAA,IAAI,EAAE,KAAKT;AAHN,KAAP;AAKD;;AAEDU,EAAAA,QAAQ,CAACC,IAAD,EAAsC;AAC5C,WAAO;AACL,OAACjB,MAAM,CAACkB,WAAR,GAAsBjB,KAAK,CAACkB,MADvB;AAEL,OAACnB,MAAM,CAACoB,UAAR,GAAqBnB,KAAK,CAACkB,MAFtB;AAGL,OAACnB,MAAM,CAACqB,SAAR,GAAoBpB,KAAK,CAACqB,GAHrB;AAIL,OAACtB,MAAM,CAACuB,YAAR,GAAuBtB,KAAK,CAACuB;AAJxB,MAKLP,IALK,CAAP;AAMD;;AA1CuD;;AA6C1D,eAAeZ,uBAAf","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\r\n/* eslint-disable */\r\nimport Hammer from '@egjs/hammerjs';\r\n\r\nimport { State } from '../State';\r\nimport PressGestureHandler from './PressGestureHandler';\r\nimport { isnan, isValidNumber } from './utils';\r\nimport { Config } from './GestureHandler';\r\nimport { HammerInputNames } from './constants';\r\n\r\nclass LongPressGestureHandler extends PressGestureHandler {\r\n  get minDurationMs(): number {\r\n    // @ts-ignore FIXNE(TS)\r\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\r\n  }\r\n\r\n  get maxDist() {\r\n    // @ts-ignore FIXNE(TS)\r\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\r\n  }\r\n\r\n  updateHasCustomActivationCriteria({ maxDistSq }: Config) {\r\n    return !isValidNumber(maxDistSq);\r\n  }\r\n\r\n  getConfig() {\r\n    if (!this.hasCustomActivationCriteria) {\r\n      // Default config\r\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\r\n      return {\r\n        shouldCancelWhenOutside: true,\r\n        maxDistSq: 10,\r\n      };\r\n    }\r\n    return this.config;\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      ...super.getHammerConfig(),\r\n      // threshold: this.maxDist,\r\n      time: this.minDurationMs,\r\n    };\r\n  }\r\n\r\n  getState(type: keyof typeof HammerInputNames) {\r\n    return {\r\n      [Hammer.INPUT_START]: State.ACTIVE,\r\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\r\n      [Hammer.INPUT_END]: State.END,\r\n      [Hammer.INPUT_CANCEL]: State.FAILED,\r\n    }[type];\r\n  }\r\n}\r\n\r\nexport default LongPressGestureHandler;\r\n"]}