{"version":3,"sources":["DiscreteGestureHandler.ts"],"names":["GestureHandler","TEST_MAX_IF_NOT_NAN","DiscreteGestureHandler","isDiscrete","shouldEnableGestureOnSetup","shouldFailUnderCustomCriteria","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","Math","abs","transformNativeEvent","center","rect","view","getBoundingClientRect","absoluteX","absoluteY","left","top","isGestureEnabledForEvent","minPointers","maxPointers","_recognizer","pointerLength","validPointerCount","isGestureRunning","failed","success"],"mappings":"AAAA;;AACA;AACA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,mBAAT,QAAoC,SAApC;;AAEA,MAAeC,sBAAf,SAA8CF,cAA9C,CAA6D;AAC7C,MAAVG,UAAU,GAAG;AACf,WAAO,IAAP;AACD;;AAE6B,MAA1BC,0BAA0B,GAAG;AAC/B,WAAO,IAAP;AACD;;AAEDC,EAAAA,6BAA6B,CAC3B;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,GAD2B,EAE3B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,GAF2B,EAG3B;AACA,QAAIA,uBAAJ,EAA6B;AAC3B,UAAI,CAAC,KAAKC,aAAL,CAAmB;AAAER,QAAAA,CAAF;AAAKC,QAAAA;AAAL,OAAnB,CAAL,EAAmC;AACjC,eAAO,IAAP;AACD;AACF;;AACD,WACEN,mBAAmB,CAACc,IAAI,CAACC,GAAL,CAASR,MAAT,CAAD,EAAmBE,SAAnB,CAAnB,IACAT,mBAAmB,CAACc,IAAI,CAACC,GAAL,CAASP,MAAT,CAAD,EAAmBE,SAAnB,CADnB,IAEAV,mBAAmB,CACjBc,IAAI,CAACC,GAAL,CAASP,MAAM,GAAGA,MAAT,GAAkBD,MAAM,GAAGA,MAApC,CADiB,EAEjBI,SAFiB,CAHrB;AAQD;;AAEDK,EAAAA,oBAAoB,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEZ,MAAAA,CAAF;AAAKC,MAAAA;AAAL;AAAV,GAAD,EAA4B;AAC9C;AACA,UAAMY,IAAI,GAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb;AAEA,WAAO;AACLC,MAAAA,SAAS,EAAEhB,CADN;AAELiB,MAAAA,SAAS,EAAEhB,CAFN;AAGLD,MAAAA,CAAC,EAAEA,CAAC,GAAGa,IAAI,CAACK,IAHP;AAILjB,MAAAA,CAAC,EAAEA,CAAC,GAAGY,IAAI,CAACM;AAJP,KAAP;AAMD;;AAEDC,EAAAA,wBAAwB,CACtB;AACEC,IAAAA,WADF;AAEEC,IAAAA,WAFF;AAGElB,IAAAA,SAHF;AAIEC,IAAAA,SAJF;AAKEC,IAAAA,SALF;AAMEC,IAAAA;AANF,GADsB,EAStBgB,WATsB,EAUtB;AAAED,IAAAA,WAAW,EAAEE,aAAf;AAA8BZ,IAAAA,MAA9B;AAAsCV,IAAAA,MAAtC;AAA8CC,IAAAA;AAA9C,GAVsB,EAWtB;AACA,UAAMsB,iBAAiB,GACrBD,aAAa,IAAIH,WAAjB,IAAgCG,aAAa,IAAIF,WADnD;;AAGA,QACE,KAAKvB,6BAAL,CACE,EAAE,GAAGa,MAAL;AAAaV,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,KADF,EAEE;AACEC,MAAAA,SADF;AAEEC,MAAAA,SAFF;AAGEC,MAAAA,SAHF;AAIEC,MAAAA;AAJF,KAFF,KASA;AACA;AACC,KAACkB,iBAAD,IAAsB,KAAKC,gBAZ9B,EAaE;AACA,aAAO;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAP;AACD;;AAED,WAAO;AAAEC,MAAAA,OAAO,EAAEH;AAAX,KAAP;AACD;;AAzE0D;;AA4E7D,eAAe7B,sBAAf","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\r\n/* eslint-disable */\r\nimport GestureHandler from './GestureHandler';\r\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\r\n\r\nabstract class DiscreteGestureHandler extends GestureHandler {\r\n  get isDiscrete() {\r\n    return true;\r\n  }\r\n\r\n  get shouldEnableGestureOnSetup() {\r\n    return true;\r\n  }\r\n\r\n  shouldFailUnderCustomCriteria(\r\n    { x, y, deltaX, deltaY }: any,\r\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\r\n  ) {\r\n    if (shouldCancelWhenOutside) {\r\n      if (!this.isPointInView({ x, y })) {\r\n        return true;\r\n      }\r\n    }\r\n    return (\r\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\r\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\r\n      TEST_MAX_IF_NOT_NAN(\r\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\r\n        maxDistSq\r\n      )\r\n    );\r\n  }\r\n\r\n  transformNativeEvent({ center: { x, y } }: any) {\r\n    // @ts-ignore FIXME(TS)\r\n    const rect = this.view!.getBoundingClientRect();\r\n\r\n    return {\r\n      absoluteX: x,\r\n      absoluteY: y,\r\n      x: x - rect.left,\r\n      y: y - rect.top,\r\n    };\r\n  }\r\n\r\n  isGestureEnabledForEvent(\r\n    {\r\n      minPointers,\r\n      maxPointers,\r\n      maxDeltaX,\r\n      maxDeltaY,\r\n      maxDistSq,\r\n      shouldCancelWhenOutside,\r\n    }: any,\r\n    _recognizer: any,\r\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\r\n  ) {\r\n    const validPointerCount =\r\n      pointerLength >= minPointers && pointerLength <= maxPointers;\r\n\r\n    if (\r\n      this.shouldFailUnderCustomCriteria(\r\n        { ...center, deltaX, deltaY },\r\n        {\r\n          maxDeltaX,\r\n          maxDeltaY,\r\n          maxDistSq,\r\n          shouldCancelWhenOutside,\r\n        }\r\n      ) ||\r\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\r\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\r\n      (!validPointerCount && this.isGestureRunning)\r\n    ) {\r\n      return { failed: true };\r\n    }\r\n\r\n    return { success: validPointerCount };\r\n  }\r\n}\r\n\r\nexport default DiscreteGestureHandler;\r\n"]}