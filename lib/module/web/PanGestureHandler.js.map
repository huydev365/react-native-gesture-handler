{"version":3,"sources":["PanGestureHandler.ts"],"names":["Hammer","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","DraggingGestureHandler","isValidNumber","isnan","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","State","PanGestureHandler","name","NativeGestureClass","Pan","getHammerConfig","direction","getDirection","getState","type","nextState","previousState","UNDETERMINED","ACTIVE","BEGAN","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","hasCustomActivationCriteria","minDistSq","shouldFailUnderCustomCriteria","deltaX","deltaY","criteria","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","shouldActivateUnderCustomCriteria","velocity","x","y","minVelocityX","minVelocityY","minVelocitySq","shouldMultiFingerPanFail","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","updateHasCustomActivationCriteria","isGestureEnabledForEvent","props","_recognizer","inputData","failed","velocityX","velocityY","maxPointers","success"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\r\n\r\nimport {\r\n  EventMap,\r\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\r\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\r\n} from './constants';\r\nimport DraggingGestureHandler from './DraggingGestureHandler';\r\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\r\nimport { State } from '../State';\r\n\r\nimport { Config, HammerInputExt } from './GestureHandler';\r\nclass PanGestureHandler extends DraggingGestureHandler {\r\n  get name() {\r\n    return 'pan';\r\n  }\r\n\r\n  get NativeGestureClass() {\r\n    return Hammer.Pan;\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      ...super.getHammerConfig(),\r\n      direction: this.getDirection(),\r\n    };\r\n  }\r\n\r\n  getState(type: keyof typeof EventMap) {\r\n    const nextState = super.getState(type);\r\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\r\n    if (\r\n      this.previousState === State.UNDETERMINED &&\r\n      nextState === State.ACTIVE\r\n    ) {\r\n      return State.BEGAN;\r\n    }\r\n    return nextState;\r\n  }\r\n\r\n  getDirection() {\r\n    const config = this.getConfig();\r\n    const {\r\n      activeOffsetXStart,\r\n      activeOffsetXEnd,\r\n      activeOffsetYStart,\r\n      activeOffsetYEnd,\r\n      minDist,\r\n    } = config;\r\n    let directions: number[] = [];\r\n    let horizontalDirections = [];\r\n\r\n    if (!isnan(minDist)) {\r\n      return Hammer.DIRECTION_ALL;\r\n    }\r\n\r\n    if (!isnan(activeOffsetXStart))\r\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\r\n    if (!isnan(activeOffsetXEnd))\r\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\r\n    if (horizontalDirections.length === 2)\r\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\r\n\r\n    directions = directions.concat(horizontalDirections);\r\n    let verticalDirections = [];\r\n\r\n    if (!isnan(activeOffsetYStart))\r\n      verticalDirections.push(Hammer.DIRECTION_UP);\r\n    if (!isnan(activeOffsetYEnd))\r\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\r\n\r\n    if (verticalDirections.length === 2)\r\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\r\n\r\n    directions = directions.concat(verticalDirections);\r\n\r\n    if (!directions.length) {\r\n      return Hammer.DIRECTION_NONE;\r\n    }\r\n    if (\r\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\r\n      directions[1] === Hammer.DIRECTION_VERTICAL\r\n    ) {\r\n      return Hammer.DIRECTION_ALL;\r\n    }\r\n    if (horizontalDirections.length && verticalDirections.length) {\r\n      return Hammer.DIRECTION_ALL;\r\n    }\r\n\r\n    return directions[0];\r\n  }\r\n\r\n  getConfig() {\r\n    if (!this.hasCustomActivationCriteria) {\r\n      // Default config\r\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\r\n      return {\r\n        minDistSq: 10,\r\n      };\r\n    }\r\n    return this.config;\r\n  }\r\n\r\n  shouldFailUnderCustomCriteria(\r\n    { deltaX, deltaY }: HammerInputExt,\r\n    criteria: any\r\n  ) {\r\n    return (\r\n      (!isnan(criteria.failOffsetXStart) &&\r\n        deltaX < criteria.failOffsetXStart) ||\r\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\r\n      (!isnan(criteria.failOffsetYStart) &&\r\n        deltaY < criteria.failOffsetYStart) ||\r\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\r\n    );\r\n  }\r\n\r\n  shouldActivateUnderCustomCriteria(\r\n    { deltaX, deltaY, velocity }: any,\r\n    criteria: any\r\n  ) {\r\n    return (\r\n      (!isnan(criteria.activeOffsetXStart) &&\r\n        deltaX < criteria.activeOffsetXStart) ||\r\n      (!isnan(criteria.activeOffsetXEnd) &&\r\n        deltaX > criteria.activeOffsetXEnd) ||\r\n      (!isnan(criteria.activeOffsetYStart) &&\r\n        deltaY < criteria.activeOffsetYStart) ||\r\n      (!isnan(criteria.activeOffsetYEnd) &&\r\n        deltaY > criteria.activeOffsetYEnd) ||\r\n      TEST_MIN_IF_NOT_NAN(\r\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\r\n        criteria.minDistSq\r\n      ) ||\r\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\r\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\r\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\r\n    );\r\n  }\r\n\r\n  shouldMultiFingerPanFail({\r\n    pointerLength,\r\n    scale,\r\n    deltaRotation,\r\n  }: {\r\n    deltaRotation: number;\r\n    pointerLength: number;\r\n    scale: number;\r\n  }) {\r\n    if (pointerLength <= 1) {\r\n      return false;\r\n    }\r\n\r\n    // Test if the pan had too much pinching or rotating.\r\n    const deltaScale = Math.abs(scale - 1);\r\n    const absDeltaRotation = Math.abs(deltaRotation);\r\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\r\n      // > If the threshold doesn't seem right.\r\n      // You can log the value which it failed at here:\r\n      return true;\r\n    }\r\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\r\n      // > If the threshold doesn't seem right.\r\n      // You can log the value which it failed at here:\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateHasCustomActivationCriteria(\r\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\r\n  ) {\r\n    return (\r\n      isValidNumber(criteria.minDistSq) ||\r\n      isValidNumber(criteria.minVelocityX) ||\r\n      isValidNumber(criteria.minVelocityY) ||\r\n      isValidNumber(criteria.minVelocitySq) ||\r\n      isValidNumber(criteria.activeOffsetXStart) ||\r\n      isValidNumber(criteria.activeOffsetXEnd) ||\r\n      isValidNumber(criteria.activeOffsetYStart) ||\r\n      isValidNumber(criteria.activeOffsetYEnd)\r\n    );\r\n  }\r\n\r\n  isGestureEnabledForEvent(\r\n    props: any,\r\n    _recognizer: any,\r\n    inputData: HammerInputExt & { deltaRotation: number }\r\n  ) {\r\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\r\n      return { failed: true };\r\n    }\r\n\r\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\r\n    if (\r\n      this.hasCustomActivationCriteria &&\r\n      this.shouldActivateUnderCustomCriteria(\r\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\r\n        props\r\n      )\r\n    ) {\r\n      if (\r\n        this.shouldMultiFingerPanFail({\r\n          pointerLength: inputData.maxPointers,\r\n          scale: inputData.scale,\r\n          deltaRotation: inputData.deltaRotation,\r\n        })\r\n      ) {\r\n        return {\r\n          failed: true,\r\n        };\r\n      }\r\n      return { success: true };\r\n    }\r\n    return { success: false };\r\n  }\r\n}\r\n\r\nexport default PanGestureHandler;\r\n"]}