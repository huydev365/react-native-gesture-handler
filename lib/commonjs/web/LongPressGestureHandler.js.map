{"version":3,"sources":["LongPressGestureHandler.ts"],"names":["LongPressGestureHandler","PressGestureHandler","minDurationMs","config","maxDist","updateHasCustomActivationCriteria","maxDistSq","getConfig","hasCustomActivationCriteria","shouldCancelWhenOutside","getHammerConfig","time","getState","type","Hammer","INPUT_START","State","ACTIVE","INPUT_MOVE","INPUT_END","END","INPUT_CANCEL","FAILED"],"mappings":";;;;;;;AAEA;;AAEA;;AACA;;AACA;;;;AANA;;AACA;AASA,MAAMA,uBAAN,SAAsCC,4BAAtC,CAA0D;AACvC,MAAbC,aAAa,GAAW;AAC1B;AACA,WAAO,kBAAM,KAAKC,MAAL,CAAYD,aAAlB,IAAmC,GAAnC,GAAyC,KAAKC,MAAL,CAAYD,aAA5D;AACD;;AAEU,MAAPE,OAAO,GAAG;AACZ;AACA,WAAO,kBAAM,KAAKD,MAAL,CAAYC,OAAlB,IAA6B,CAA7B,GAAiC,KAAKD,MAAL,CAAYC,OAApD;AACD;;AAEDC,EAAAA,iCAAiC,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAwB;AACvD,WAAO,CAAC,0BAAcA,SAAd,CAAR;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAI,CAAC,KAAKC,2BAAV,EAAuC;AACrC;AACA;AACA,aAAO;AACLC,QAAAA,uBAAuB,EAAE,IADpB;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,WAAO,KAAKH,MAAZ;AACD;;AAEDO,EAAAA,eAAe,GAAG;AAChB,WAAO,EACL,GAAG,MAAMA,eAAN,EADE;AAEL;AACAC,MAAAA,IAAI,EAAE,KAAKT;AAHN,KAAP;AAKD;;AAEDU,EAAAA,QAAQ,CAACC,IAAD,EAAsC;AAC5C,WAAO;AACL,OAACC,kBAAOC,WAAR,GAAsBC,aAAMC,MADvB;AAEL,OAACH,kBAAOI,UAAR,GAAqBF,aAAMC,MAFtB;AAGL,OAACH,kBAAOK,SAAR,GAAoBH,aAAMI,GAHrB;AAIL,OAACN,kBAAOO,YAAR,GAAuBL,aAAMM;AAJxB,MAKLT,IALK,CAAP;AAMD;;AA1CuD;;eA6C3Cb,uB","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\r\n/* eslint-disable */\r\nimport Hammer from '@egjs/hammerjs';\r\n\r\nimport { State } from '../State';\r\nimport PressGestureHandler from './PressGestureHandler';\r\nimport { isnan, isValidNumber } from './utils';\r\nimport { Config } from './GestureHandler';\r\nimport { HammerInputNames } from './constants';\r\n\r\nclass LongPressGestureHandler extends PressGestureHandler {\r\n  get minDurationMs(): number {\r\n    // @ts-ignore FIXNE(TS)\r\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\r\n  }\r\n\r\n  get maxDist() {\r\n    // @ts-ignore FIXNE(TS)\r\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\r\n  }\r\n\r\n  updateHasCustomActivationCriteria({ maxDistSq }: Config) {\r\n    return !isValidNumber(maxDistSq);\r\n  }\r\n\r\n  getConfig() {\r\n    if (!this.hasCustomActivationCriteria) {\r\n      // Default config\r\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\r\n      return {\r\n        shouldCancelWhenOutside: true,\r\n        maxDistSq: 10,\r\n      };\r\n    }\r\n    return this.config;\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      ...super.getHammerConfig(),\r\n      // threshold: this.maxDist,\r\n      time: this.minDurationMs,\r\n    };\r\n  }\r\n\r\n  getState(type: keyof typeof HammerInputNames) {\r\n    return {\r\n      [Hammer.INPUT_START]: State.ACTIVE,\r\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\r\n      [Hammer.INPUT_END]: State.END,\r\n      [Hammer.INPUT_CANCEL]: State.FAILED,\r\n    }[type];\r\n  }\r\n}\r\n\r\nexport default LongPressGestureHandler;\r\n"]}