{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["NativeViewGestureHandler","PressGestureHandler","onRawEvent","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","NodeManager","getNodes","filter","gesture","handlerTag","view","isGestureRunning","DiscreteGestureHandler","contains","forceInvalidate"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,wBAAN,SAAuCC,4BAAvC,CAA2D;AACzDC,EAAAA,UAAU,CAACC,EAAD,EAAqB;AAC7B,UAAMD,UAAN,CAAiBC,EAAjB;;AACA,QAAI,CAACA,EAAE,CAACC,OAAR,EAAiB;AACf;AACA,UAAI,gCAAoB,uBAAW;AAAEC,QAAAA,CAAC,EAAEF,EAAE,CAACG,MAAR;AAAgBC,QAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,OAAX,CAApB,EAAgE,EAAhE,CAAJ,EAAyE;AACvE;AACA,YAAI,KAAKC,MAAL,CAAYC,oBAAhB,EAAsC;AACpC,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcC,WAAW,CAACC,QAAZ,EAAd,EAAsCC,MAAtC,CACdC,OAAD,IAAa;AACX,kBAAM;AAAEC,cAAAA,UAAF;AAAcC,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,gBAAyCH,OAA/C;AACA,mBACE;AACAC,cAAAA,UAAU,KAAK,KAAKA,UAApB,IACA;AACAE,cAAAA,gBAFA,IAGA;AACAH,cAAAA,OAAO,YAAYI,+BAJnB,IAKA;AACAF,cAAAA,IANA,IAOA;AACA,mBAAKA,IAAL,CAAUG,QAAV,CAAmBH,IAAnB;AAVF;AAYD,WAfc,CAAjB,CADoC,CAkBpC;;AACA,eAAK,MAAMF,OAAX,IAAsBN,QAAtB,EAAgC;AAC9B;AACAM,YAAAA,OAAO,CAACM,eAAR,CAAwBpB,EAAxB;AACD;AACF;AACF;AACF;AACF;;AAjCwD;;eAoC5CH,wB","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\r\nimport { HammerInputExt } from './GestureHandler';\r\nimport * as NodeManager from './NodeManager';\r\nimport PressGestureHandler from './PressGestureHandler';\r\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\r\n\r\nclass NativeViewGestureHandler extends PressGestureHandler {\r\n  onRawEvent(ev: HammerInputExt) {\r\n    super.onRawEvent(ev);\r\n    if (!ev.isFinal) {\r\n      // if (this.ref instanceof ScrollView) {\r\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\r\n        // @ts-ignore FIXME(TS) config type\r\n        if (this.config.disallowInterruption) {\r\n          const gestures = Object.values(NodeManager.getNodes()).filter(\r\n            (gesture) => {\r\n              const { handlerTag, view, isGestureRunning } = gesture;\r\n              return (\r\n                // Check if this gesture isn't self\r\n                handlerTag !== this.handlerTag &&\r\n                // Ensure the gesture needs to be cancelled\r\n                isGestureRunning &&\r\n                // ScrollView can cancel discrete gestures like taps and presses\r\n                gesture instanceof DiscreteGestureHandler &&\r\n                // Ensure a view exists and is a child of the current view\r\n                view &&\r\n                // @ts-ignore FIXME(TS) view type\r\n                this.view.contains(view)\r\n              );\r\n            }\r\n          );\r\n          // Cancel all of the gestures that passed the filter\r\n          for (const gesture of gestures) {\r\n            // TODO: Bacon: Send some cached event.\r\n            gesture.forceInvalidate(ev);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NativeViewGestureHandler;\r\n"]}