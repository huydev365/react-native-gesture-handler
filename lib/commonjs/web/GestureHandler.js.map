{"version":3,"sources":["GestureHandler.ts"],"names":["gestureInstances","GestureHandler","id","name","gestureInstance","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","State","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","clearSelfAsPending","hammer","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","event","transformEventData","invokeNullableMethod","lastSentState","state","get","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","success","failed","isGestureEnabledForEvent","getConfig","simulateCancelEvent","params","getHammerConfig","set","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","props","ensureConfig","sync","getState","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","Hammer","INPUT_CANCEL","isFinal","onRawEvent","isFirst","setView","Manager","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","NodeManager","getHandler","v","configProps","forEach","prop","Number","NaN"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\r\n/* eslint-disable */\r\nimport Hammer from '@egjs/hammerjs';\r\nimport { findNodeHandle } from 'react-native';\r\n\r\nimport { State } from '../State';\r\nimport { EventMap } from './constants';\r\nimport * as NodeManager from './NodeManager';\r\n\r\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\r\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\r\n\r\nexport type Config = Partial<{\r\n  enabled: boolean;\r\n  minPointers: number;\r\n  maxPointers: number;\r\n  minDist: number;\r\n  minDistSq: number;\r\n  minVelocity: number;\r\n  minVelocitySq: number;\r\n  maxDist: number;\r\n  maxDistSq: number;\r\n  failOffsetXStart: number;\r\n  failOffsetYStart: number;\r\n  failOffsetXEnd: number;\r\n  failOffsetYEnd: number;\r\n  activeOffsetXStart: number;\r\n  activeOffsetXEnd: number;\r\n  activeOffsetYStart: number;\r\n  activeOffsetYEnd: number;\r\n  waitFor: any[] | null;\r\n}>;\r\n\r\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\r\n\r\nlet gestureInstances = 0;\r\n\r\nabstract class GestureHandler {\r\n  public handlerTag: any;\r\n  public isGestureRunning = false;\r\n  public view: number | null = null;\r\n  protected hasCustomActivationCriteria: boolean;\r\n  protected hasGestureFailed = false;\r\n  protected hammer: HammerManager | null = null;\r\n  protected initialRotation: number | null = null;\r\n  protected __initialX: any;\r\n  protected __initialY: any;\r\n  protected config: Config = {};\r\n  protected previousState: State = State.UNDETERMINED;\r\n  private pendingGestures: Record<string, this> = {};\r\n  private oldState: State = State.UNDETERMINED;\r\n  private lastSentState: State | null = null;\r\n  private gestureInstance: number;\r\n  private _stillWaiting: any;\r\n  private propsRef: any;\r\n  private ref: any;\r\n\r\n  abstract get name(): string;\r\n\r\n  get id() {\r\n    return `${this.name}${this.gestureInstance}`;\r\n  }\r\n\r\n  get isDiscrete() {\r\n    return false;\r\n  }\r\n\r\n  get shouldEnableGestureOnSetup(): boolean {\r\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\r\n  }\r\n\r\n  constructor() {\r\n    this.gestureInstance = gestureInstances++;\r\n    this.hasCustomActivationCriteria = false;\r\n  }\r\n\r\n  getConfig() {\r\n    return this.config;\r\n  }\r\n\r\n  onWaitingEnded(_gesture: this) {}\r\n\r\n  removePendingGesture(id: string) {\r\n    delete this.pendingGestures[id];\r\n  }\r\n\r\n  addPendingGesture(gesture: this) {\r\n    this.pendingGestures[gesture.id] = gesture;\r\n  }\r\n\r\n  isGestureEnabledForEvent(\r\n    _config: any,\r\n    _recognizer: any,\r\n    _event: any\r\n  ): { failed?: boolean; success?: boolean } {\r\n    return { success: true };\r\n  }\r\n\r\n  get NativeGestureClass(): RecognizerStatic {\r\n    throw new Error('Must override GestureHandler.NativeGestureClass');\r\n  }\r\n\r\n  updateHasCustomActivationCriteria(_config: Config) {\r\n    return true;\r\n  }\r\n\r\n  clearSelfAsPending = () => {\r\n    if (Array.isArray(this.config.waitFor)) {\r\n      for (const gesture of this.config.waitFor) {\r\n        gesture.removePendingGesture(this.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  updateGestureConfig({ enabled = true, ...props }) {\r\n    this.clearSelfAsPending();\r\n\r\n    this.config = ensureConfig({ enabled, ...props });\r\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\r\n      this.config\r\n    );\r\n    if (Array.isArray(this.config.waitFor)) {\r\n      for (const gesture of this.config.waitFor) {\r\n        gesture.addPendingGesture(this);\r\n      }\r\n    }\r\n\r\n    if (this.hammer) {\r\n      this.sync();\r\n    }\r\n    return this.config;\r\n  }\r\n\r\n  destroy = () => {\r\n    this.clearSelfAsPending();\r\n\r\n    if (this.hammer) {\r\n      this.hammer.stop(false);\r\n      this.hammer.destroy();\r\n    }\r\n    this.hammer = null;\r\n  };\r\n\r\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\r\n    // @ts-ignore FIXME(TS)\r\n    const rect = this.view!.getBoundingClientRect();\r\n    const pointerInside =\r\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\r\n    return pointerInside;\r\n  };\r\n\r\n  getState(type: keyof typeof EventMap): State {\r\n    // @ts-ignore TODO(TS) check if this is needed\r\n    if (type == 0) {\r\n      return 0;\r\n    }\r\n    return EventMap[type];\r\n  }\r\n\r\n  transformEventData(event: HammerInputExt) {\r\n    const { eventType, maxPointers: numberOfPointers } = event;\r\n    // const direction = DirectionMap[ev.direction];\r\n    const changedTouch = event.changedPointers[0];\r\n    const pointerInside = this.isPointInView({\r\n      x: changedTouch.clientX,\r\n      y: changedTouch.clientY,\r\n    });\r\n\r\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\r\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\r\n    if (state !== this.previousState) {\r\n      this.oldState = this.previousState;\r\n      this.previousState = state;\r\n    }\r\n\r\n    return {\r\n      nativeEvent: {\r\n        numberOfPointers,\r\n        state,\r\n        pointerInside,\r\n        ...this.transformNativeEvent(event),\r\n        // onHandlerStateChange only\r\n        handlerTag: this.handlerTag,\r\n        target: this.ref,\r\n        oldState: this.oldState,\r\n      },\r\n      timeStamp: Date.now(),\r\n    };\r\n  }\r\n\r\n  transformNativeEvent(_event: HammerInputExt) {\r\n    return {};\r\n  }\r\n\r\n  sendEvent = (nativeEvent: HammerInputExt) => {\r\n    const {\r\n      onGestureHandlerEvent,\r\n      onGestureHandlerStateChange,\r\n    } = this.propsRef.current;\r\n\r\n    const event = this.transformEventData(nativeEvent);\r\n\r\n    invokeNullableMethod(onGestureHandlerEvent, event);\r\n    if (this.lastSentState !== event.nativeEvent.state) {\r\n      this.lastSentState = event.nativeEvent.state as State;\r\n      invokeNullableMethod(onGestureHandlerStateChange, event);\r\n    }\r\n  };\r\n\r\n  cancelPendingGestures(event: HammerInputExt) {\r\n    for (const gesture of Object.values(this.pendingGestures)) {\r\n      if (gesture && gesture.isGestureRunning) {\r\n        gesture.hasGestureFailed = true;\r\n        gesture.cancelEvent(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyPendingGestures() {\r\n    for (const gesture of Object.values(this.pendingGestures)) {\r\n      if (gesture) {\r\n        gesture.onWaitingEnded(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\r\n  onGestureEnded(event: HammerInputExt) {\r\n    this.isGestureRunning = false;\r\n    this.cancelPendingGestures(event);\r\n  }\r\n\r\n  forceInvalidate(event: HammerInputExt) {\r\n    if (this.isGestureRunning) {\r\n      this.hasGestureFailed = true;\r\n      this.cancelEvent(event);\r\n    }\r\n  }\r\n\r\n  cancelEvent(event: HammerInputExt) {\r\n    this.notifyPendingGestures();\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_CANCEL,\r\n      isFinal: true,\r\n    });\r\n    this.onGestureEnded(event);\r\n  }\r\n\r\n  onRawEvent({ isFirst }: HammerInputExt) {\r\n    if (isFirst) {\r\n      this.hasGestureFailed = false;\r\n    }\r\n  }\r\n\r\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\r\n    if (ref == null) {\r\n      this.destroy();\r\n      this.view = null;\r\n      return;\r\n    }\r\n\r\n    this.propsRef = propsRef;\r\n    this.ref = ref;\r\n\r\n    this.view = findNodeHandle(ref);\r\n    this.hammer = new Hammer.Manager(this.view as any);\r\n\r\n    this.oldState = State.UNDETERMINED;\r\n    this.previousState = State.UNDETERMINED;\r\n    this.lastSentState = null;\r\n\r\n    const { NativeGestureClass } = this;\r\n    // @ts-ignore TODO(TS)\r\n    const gesture = new NativeGestureClass(this.getHammerConfig());\r\n    this.hammer.add(gesture);\r\n\r\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\r\n      if (!this.config.enabled) {\r\n        this.hasGestureFailed = false;\r\n        this.isGestureRunning = false;\r\n        return;\r\n      }\r\n\r\n      this.onRawEvent((ev as unknown) as HammerInputExt);\r\n\r\n      // TODO: Bacon: Check against something other than null\r\n      // The isFirst value is not called when the first rotation is calculated.\r\n      if (this.initialRotation === null && ev.rotation !== 0) {\r\n        this.initialRotation = ev.rotation;\r\n      }\r\n      if (ev.isFinal) {\r\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\r\n        setTimeout(() => {\r\n          this.initialRotation = null;\r\n          this.hasGestureFailed = false;\r\n        });\r\n      }\r\n    });\r\n\r\n    this.setupEvents();\r\n    this.sync();\r\n  }\r\n\r\n  setupEvents() {\r\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\r\n    if (!this.isDiscrete) {\r\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\r\n        this.onStart((event as unknown) as HammerInputExt)\r\n      );\r\n      this.hammer!.on(\r\n        `${this.name}end ${this.name}cancel`,\r\n        (event: HammerInput) => {\r\n          this.onGestureEnded((event as unknown) as HammerInputExt);\r\n        }\r\n      );\r\n    }\r\n    this.hammer!.on(this.name, (ev: HammerInput) =>\r\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\r\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\r\n  }\r\n\r\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\r\n    // Reset the state for the next gesture\r\n    this.oldState = State.UNDETERMINED;\r\n    this.previousState = State.UNDETERMINED;\r\n    this.lastSentState = null;\r\n\r\n    this.isGestureRunning = true;\r\n    this.__initialX = deltaX;\r\n    this.__initialY = deltaY;\r\n    this.initialRotation = rotation;\r\n  }\r\n\r\n  onGestureActivated(ev: HammerInputExt) {\r\n    this.sendEvent(ev);\r\n  }\r\n\r\n  onSuccess() {}\r\n\r\n  _getPendingGestures() {\r\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\r\n      // Get the list of gestures that this gesture is still waiting for.\r\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\r\n      const stillWaiting = this.config.waitFor.filter(\r\n        ({ hasGestureFailed }) => hasGestureFailed === false\r\n      );\r\n      return stillWaiting;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getHammerConfig() {\r\n    const pointers =\r\n      this.config.minPointers === this.config.maxPointers\r\n        ? this.config.minPointers\r\n        : 0;\r\n    return {\r\n      pointers,\r\n    };\r\n  }\r\n\r\n  sync = () => {\r\n    const gesture = this.hammer!.get(this.name);\r\n    if (!gesture) return;\r\n\r\n    const enable = (recognizer: any, inputData: any) => {\r\n      if (!this.config.enabled) {\r\n        this.isGestureRunning = false;\r\n        this.hasGestureFailed = false;\r\n        return false;\r\n      }\r\n\r\n      // Prevent events before the system is ready.\r\n      if (\r\n        !inputData ||\r\n        !recognizer.options ||\r\n        typeof inputData.maxPointers === 'undefined'\r\n      ) {\r\n        return this.shouldEnableGestureOnSetup;\r\n      }\r\n\r\n      if (this.hasGestureFailed) {\r\n        return false;\r\n      }\r\n\r\n      if (!this.isDiscrete) {\r\n        if (this.isGestureRunning) {\r\n          return true;\r\n        }\r\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\r\n        // Only process if there are views to wait for.\r\n        this._stillWaiting = this._getPendingGestures();\r\n        // This gesture should continue waiting.\r\n        if (this._stillWaiting.length) {\r\n          // Check to see if one of the gestures you're waiting for has started.\r\n          // If it has then the gesture should fail.\r\n          for (const gesture of this._stillWaiting) {\r\n            // When the target gesture has started, this gesture must force fail.\r\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\r\n              this.hasGestureFailed = true;\r\n              this.isGestureRunning = false;\r\n              return false;\r\n            }\r\n          }\r\n          // This gesture shouldn't start until the others have finished.\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Use default behaviour\r\n      if (!this.hasCustomActivationCriteria) {\r\n        return true;\r\n      }\r\n\r\n      const deltaRotation =\r\n        this.initialRotation == null\r\n          ? 0\r\n          : inputData.rotation - this.initialRotation;\r\n      // @ts-ignore FIXME(TS)\r\n      const { success, failed } = this.isGestureEnabledForEvent(\r\n        this.getConfig(),\r\n        recognizer,\r\n        {\r\n          ...inputData,\r\n          deltaRotation,\r\n        }\r\n      );\r\n\r\n      if (failed) {\r\n        this.simulateCancelEvent(inputData);\r\n        this.hasGestureFailed = true;\r\n      }\r\n      return success;\r\n    };\r\n\r\n    const params = this.getHammerConfig();\r\n    // @ts-ignore FIXME(TS)\r\n    gesture.set({ ...params, enable });\r\n  };\r\n\r\n  simulateCancelEvent(_inputData: any) {}\r\n}\r\n\r\n// TODO(TS) investigate this method\r\n// Used for sending data to a callback or AnimatedEvent\r\nfunction invokeNullableMethod(\r\n  method:\r\n    | ((event: NativeEvent) => void)\r\n    | { __getHandler: () => (event: NativeEvent) => void }\r\n    | { __nodeConfig: { argMapping: any } },\r\n  event: NativeEvent\r\n) {\r\n  if (method) {\r\n    if (typeof method === 'function') {\r\n      method(event);\r\n    } else {\r\n      // For use with reanimated's AnimatedEvent\r\n      if (\r\n        '__getHandler' in method &&\r\n        typeof method.__getHandler === 'function'\r\n      ) {\r\n        const handler = method.__getHandler();\r\n        invokeNullableMethod(handler, event);\r\n      } else {\r\n        if ('__nodeConfig' in method) {\r\n          const { argMapping } = method.__nodeConfig;\r\n          if (Array.isArray(argMapping)) {\r\n            for (const [index, [key, value]] of argMapping.entries()) {\r\n              if (key in event.nativeEvent) {\r\n                // @ts-ignore fix method type\r\n                const nativeValue = event.nativeEvent[key];\r\n                if (value && value.setValue) {\r\n                  // Reanimated API\r\n                  value.setValue(nativeValue);\r\n                } else {\r\n                  // RN Animated API\r\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Validate the props\r\nfunction ensureConfig(config: Config): Required<Config> {\r\n  const props = { ...config };\r\n\r\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\r\n  if ('minDist' in config) {\r\n    props.minDist = config.minDist;\r\n    props.minDistSq = props.minDist! * props.minDist!;\r\n  }\r\n  if ('minVelocity' in config) {\r\n    props.minVelocity = config.minVelocity;\r\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\r\n  }\r\n  if ('maxDist' in config) {\r\n    props.maxDist = config.maxDist;\r\n    props.maxDistSq = config.maxDist! * config.maxDist!;\r\n  }\r\n  if ('waitFor' in config) {\r\n    props.waitFor = asArray(config.waitFor)\r\n      .map(({ handlerTag }: { handlerTag: number }) =>\r\n        NodeManager.getHandler(handlerTag)\r\n      )\r\n      .filter((v) => v);\r\n  } else {\r\n    props.waitFor = null;\r\n  }\r\n\r\n  const configProps = [\r\n    'minPointers',\r\n    'maxPointers',\r\n    'minDist',\r\n    'maxDist',\r\n    'maxDistSq',\r\n    'minVelocitySq',\r\n    'minDistSq',\r\n    'minVelocity',\r\n    'failOffsetXStart',\r\n    'failOffsetYStart',\r\n    'failOffsetXEnd',\r\n    'failOffsetYEnd',\r\n    'activeOffsetXStart',\r\n    'activeOffsetXEnd',\r\n    'activeOffsetYStart',\r\n    'activeOffsetYEnd',\r\n  ] as const;\r\n  configProps.forEach((prop: typeof configProps[number]) => {\r\n    if (typeof props[prop] === 'undefined') {\r\n      props[prop] = Number.NaN;\r\n    }\r\n  });\r\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\r\n}\r\n\r\nfunction asArray<T>(value: T | T[]) {\r\n  // TODO(TS) use config.waitFor type\r\n  return value == null ? [] : Array.isArray(value) ? value : [value];\r\n}\r\n\r\nexport default GestureHandler;\r\n"]}