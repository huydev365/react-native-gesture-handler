{"version":3,"sources":["GestureDetector.tsx"],"names":["ALLOWED_PROPS","baseGestureHandlerWithMonitorProps","tapGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","longPressGestureHandlerProps","forceTouchGestureHandlerProps","flingGestureHandlerProps","convertToHandlerTag","ref","BaseGesture","handlerTag","current","extractValidHandlerTags","interactionGroup","map","filter","tag","dropHandlers","preparedGesture","handler","config","RNGestureHandlerModule","dropGestureHandler","testId","attachHandlers","gestureConfig","gesture","viewTag","useAnimated","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","attachGestureHandler","animatedHandlers","value","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","needsRebuild","Reanimated","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","CALLBACK_TYPE","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","EventType","UNDEFINED","runWorklet","args","isWorklet","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","State","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","GestureStateManager","create","changeEventCalculator","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","find","reduce","prev","viewRef","firstRenderRef","React","useRef","Error","needsToRebuildReanimatedEvent","children","Wrap","Component","render","child","Children","only","cloneElement","collapsable","AnimatedWrap","default","createAnimatedComponent"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport {\r\n  GestureType,\r\n  HandlerCallbacks,\r\n  BaseGesture,\r\n  GestureRef,\r\n  CALLBACK_TYPE,\r\n} from './gesture';\r\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\r\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\r\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\r\nimport {\r\n  baseGestureHandlerWithMonitorProps,\r\n  filterConfig,\r\n  findNodeHandle,\r\n  GestureTouchEvent,\r\n  GestureUpdateEvent,\r\n  GestureStateChangeEvent,\r\n} from '../gestureHandlerCommon';\r\nimport {\r\n  GestureStateManager,\r\n  GestureStateManagerType,\r\n} from './gestureStateManager';\r\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\r\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\r\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\r\nimport {\r\n  panGestureHandlerProps,\r\n  panGestureHandlerCustomNativeProps,\r\n} from '../PanGestureHandler';\r\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\r\nimport { State } from '../../State';\r\nimport { EventType } from '../../EventType';\r\nimport { ComposedGesture } from './gestureComposition';\r\n\r\nconst ALLOWED_PROPS = [\r\n  ...baseGestureHandlerWithMonitorProps,\r\n  ...tapGestureHandlerProps,\r\n  ...panGestureHandlerProps,\r\n  ...panGestureHandlerCustomNativeProps,\r\n  ...longPressGestureHandlerProps,\r\n  ...forceTouchGestureHandlerProps,\r\n  ...flingGestureHandlerProps,\r\n];\r\n\r\nexport type GestureConfigReference = {\r\n  config: GestureType[];\r\n  animatedEventHandler: unknown;\r\n  animatedHandlers: SharedValue<\r\n    HandlerCallbacks<Record<string, unknown>>[] | null\r\n  > | null;\r\n  firstExecution: boolean;\r\n  useAnimated: boolean;\r\n};\r\n\r\nfunction convertToHandlerTag(ref: GestureRef): number {\r\n  if (typeof ref === 'number') {\r\n    return ref;\r\n  } else if (ref instanceof BaseGesture) {\r\n    return ref.handlerTag;\r\n  } else {\r\n    // @ts-ignore in this case it should be a ref either to gesture object or\r\n    // a gesture handler component, in both cases handlerTag property exists\r\n    return ref.current?.handlerTag ?? -1;\r\n  }\r\n}\r\n\r\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\r\n  return (\r\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\r\n  );\r\n}\r\n\r\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\r\n  for (const handler of preparedGesture.config) {\r\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\r\n\r\n    unregisterHandler(handler.handlerTag, handler.config.testId);\r\n  }\r\n}\r\n\r\ninterface AttachHandlersConfig {\r\n  preparedGesture: GestureConfigReference;\r\n  gestureConfig: ComposedGesture | GestureType | undefined;\r\n  gesture: GestureType[];\r\n  viewTag: number;\r\n  useAnimated: boolean;\r\n}\r\n\r\nfunction attachHandlers({\r\n  preparedGesture,\r\n  gestureConfig,\r\n  gesture,\r\n  viewTag,\r\n  useAnimated,\r\n}: AttachHandlersConfig) {\r\n  if (!preparedGesture.firstExecution) {\r\n    gestureConfig?.initialize();\r\n  } else {\r\n    preparedGesture.firstExecution = false;\r\n  }\r\n\r\n  // use setImmediate to extract handlerTags, because all refs should be initialized\r\n  // when it's ran\r\n  setImmediate(() => {\r\n    gestureConfig?.prepare();\r\n  });\r\n\r\n  for (const handler of gesture) {\r\n    RNGestureHandlerModule.createGestureHandler(\r\n      handler.handlerName,\r\n      handler.handlerTag,\r\n      filterConfig(handler.config, ALLOWED_PROPS)\r\n    );\r\n\r\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\r\n\r\n    // use setImmediate to extract handlerTags, because all refs should be initialized\r\n    // when it's ran\r\n    setImmediate(() => {\r\n      let requireToFail: number[] = [];\r\n      if (handler.config.requireToFail) {\r\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\r\n      }\r\n\r\n      let simultaneousWith: number[] = [];\r\n      if (handler.config.simultaneousWith) {\r\n        simultaneousWith = extractValidHandlerTags(\r\n          handler.config.simultaneousWith\r\n        );\r\n      }\r\n\r\n      RNGestureHandlerModule.updateGestureHandler(\r\n        handler.handlerTag,\r\n        filterConfig(handler.config, ALLOWED_PROPS, {\r\n          simultaneousHandlers: simultaneousWith,\r\n          waitFor: requireToFail,\r\n        })\r\n      );\r\n    });\r\n  }\r\n  preparedGesture.config = gesture;\r\n\r\n  for (const gesture of preparedGesture.config) {\r\n    RNGestureHandlerModule.attachGestureHandler(\r\n      gesture.handlerTag,\r\n      viewTag,\r\n      !useAnimated // send direct events when using animatedGesture, device events otherwise\r\n    );\r\n  }\r\n\r\n  if (preparedGesture.animatedHandlers) {\r\n    preparedGesture.animatedHandlers.value = (gesture.map(\r\n      (g) => g.handlers\r\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\r\n  }\r\n}\r\n\r\nfunction updateHandlers(\r\n  preparedGesture: GestureConfigReference,\r\n  gestureConfig: ComposedGesture | GestureType | undefined,\r\n  gesture: GestureType[]\r\n) {\r\n  gestureConfig?.prepare();\r\n\r\n  for (let i = 0; i < gesture.length; i++) {\r\n    const handler = preparedGesture.config[i];\r\n\r\n    // only update handlerTag when it's actually different, it may be the same\r\n    // if gesture config object is wrapped with useMemo\r\n    if (gesture[i].handlerTag !== handler.handlerTag) {\r\n      gesture[i].handlerTag = handler.handlerTag;\r\n      gesture[i].handlers.handlerTag = handler.handlerTag;\r\n    }\r\n  }\r\n\r\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\r\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\r\n  // in case of external relations)\r\n  setImmediate(() => {\r\n    for (let i = 0; i < gesture.length; i++) {\r\n      const handler = preparedGesture.config[i];\r\n\r\n      handler.config = gesture[i].config;\r\n      handler.handlers = gesture[i].handlers;\r\n\r\n      const requireToFail = extractValidHandlerTags(\r\n        handler.config.requireToFail\r\n      );\r\n\r\n      const simultaneousWith = extractValidHandlerTags(\r\n        handler.config.simultaneousWith\r\n      );\r\n\r\n      RNGestureHandlerModule.updateGestureHandler(\r\n        handler.handlerTag,\r\n        filterConfig(handler.config, ALLOWED_PROPS, {\r\n          simultaneousHandlers: simultaneousWith,\r\n          waitFor: requireToFail,\r\n        })\r\n      );\r\n\r\n      registerHandler(handler.handlerTag, handler, handler.config.testId);\r\n    }\r\n\r\n    if (preparedGesture.animatedHandlers) {\r\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\r\n        (g) => g.handlers\r\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\r\n    }\r\n  });\r\n}\r\n\r\nfunction needsToReattach(\r\n  preparedGesture: GestureConfigReference,\r\n  gesture: GestureType[]\r\n) {\r\n  if (gesture.length !== preparedGesture.config.length) {\r\n    return true;\r\n  }\r\n  for (let i = 0; i < gesture.length; i++) {\r\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction useAnimatedGesture(\r\n  preparedGesture: GestureConfigReference,\r\n  needsRebuild: boolean\r\n) {\r\n  if (!Reanimated) {\r\n    return;\r\n  }\r\n\r\n  function isStateChangeEvent(\r\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\r\n  ): event is GestureStateChangeEvent {\r\n    'worklet';\r\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\r\n    return event.oldState != null;\r\n  }\r\n\r\n  function isTouchEvent(\r\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\r\n  ): event is GestureTouchEvent {\r\n    'worklet';\r\n    return event.eventType != null;\r\n  }\r\n\r\n  function getHandler(\r\n    type: CALLBACK_TYPE,\r\n    gesture: HandlerCallbacks<Record<string, unknown>>\r\n  ) {\r\n    'worklet';\r\n    switch (type) {\r\n      case CALLBACK_TYPE.BEGAN:\r\n        return gesture.onBegin;\r\n      case CALLBACK_TYPE.START:\r\n        return gesture.onStart;\r\n      case CALLBACK_TYPE.UPDATE:\r\n        return gesture.onUpdate;\r\n      case CALLBACK_TYPE.CHANGE:\r\n        return gesture.onChange;\r\n      case CALLBACK_TYPE.END:\r\n        return gesture.onEnd;\r\n      case CALLBACK_TYPE.FINALIZE:\r\n        return gesture.onFinalize;\r\n      case CALLBACK_TYPE.TOUCHES_DOWN:\r\n        return gesture.onTouchesDown;\r\n      case CALLBACK_TYPE.TOUCHES_MOVE:\r\n        return gesture.onTouchesMove;\r\n      case CALLBACK_TYPE.TOUCHES_UP:\r\n        return gesture.onTouchesUp;\r\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\r\n        return gesture.onTouchesCancelled;\r\n    }\r\n  }\r\n\r\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\r\n    'worklet';\r\n    switch (eventType) {\r\n      case EventType.TOUCHES_DOWN:\r\n        return CALLBACK_TYPE.TOUCHES_DOWN;\r\n      case EventType.TOUCHES_MOVE:\r\n        return CALLBACK_TYPE.TOUCHES_MOVE;\r\n      case EventType.TOUCHES_UP:\r\n        return CALLBACK_TYPE.TOUCHES_UP;\r\n      case EventType.TOUCHES_CANCELLED:\r\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\r\n    }\r\n    return CALLBACK_TYPE.UNDEFINED;\r\n  }\r\n\r\n  function runWorklet(\r\n    type: CALLBACK_TYPE,\r\n    gesture: HandlerCallbacks<Record<string, unknown>>,\r\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\r\n    ...args: any[]\r\n  ) {\r\n    'worklet';\r\n    const handler = getHandler(type, gesture);\r\n    if (gesture.isWorklet[type]) {\r\n      // @ts-ignore Logic below makes sure the correct event is send to the\r\n      // correct handler.\r\n      handler?.(event, ...args);\r\n    } else if (handler) {\r\n      console.warn('Animated gesture callback must be a worklet');\r\n    }\r\n  }\r\n\r\n  // Hooks are called conditionally, but the condition is whether the\r\n  // react-native-reanimated is installed, which shouldn't change while running\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\r\n    HandlerCallbacks<Record<string, unknown>>[] | null\r\n  >(null);\r\n\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  const lastUpdateEvent = Reanimated.useSharedValue<\r\n    (GestureUpdateEvent | undefined)[]\r\n  >([]);\r\n\r\n  // not every gesture needs a state controller, init them lazily\r\n  const stateControllers: GestureStateManagerType[] = [];\r\n\r\n  const callback = (\r\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\r\n  ) => {\r\n    'worklet';\r\n\r\n    const currentCallback = sharedHandlersCallbacks.value;\r\n    if (!currentCallback) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < currentCallback.length; i++) {\r\n      const gesture = currentCallback[i];\r\n\r\n      if (event.handlerTag === gesture.handlerTag) {\r\n        if (isStateChangeEvent(event)) {\r\n          if (\r\n            event.oldState === State.UNDETERMINED &&\r\n            event.state === State.BEGAN\r\n          ) {\r\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\r\n          } else if (\r\n            (event.oldState === State.BEGAN ||\r\n              event.oldState === State.UNDETERMINED) &&\r\n            event.state === State.ACTIVE\r\n          ) {\r\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\r\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\r\n          } else if (\r\n            event.oldState !== event.state &&\r\n            event.state === State.END\r\n          ) {\r\n            if (event.oldState === State.ACTIVE) {\r\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\r\n            }\r\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\r\n          } else if (\r\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\r\n            event.state !== event.oldState\r\n          ) {\r\n            if (event.oldState === State.ACTIVE) {\r\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\r\n            }\r\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\r\n          }\r\n        } else if (isTouchEvent(event)) {\r\n          if (!stateControllers[i]) {\r\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\r\n          }\r\n\r\n          if (event.eventType !== EventType.UNDETERMINED) {\r\n            runWorklet(\r\n              touchEventTypeToCallbackType(event.eventType),\r\n              gesture,\r\n              event,\r\n              stateControllers[i]\r\n            );\r\n          }\r\n        } else {\r\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\r\n\r\n          if (gesture.onChange && gesture.changeEventCalculator) {\r\n            runWorklet(\r\n              CALLBACK_TYPE.CHANGE,\r\n              gesture,\r\n              gesture.changeEventCalculator?.(\r\n                event,\r\n                lastUpdateEvent.value[gesture.handlerTag]\r\n              )\r\n            );\r\n\r\n            lastUpdateEvent.value[gesture.handlerTag] = event;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  const event = Reanimated.useEvent(\r\n    callback,\r\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\r\n    needsRebuild\r\n  );\r\n\r\n  preparedGesture.animatedEventHandler = event;\r\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\r\n}\r\n\r\ninterface GestureDetectorProps {\r\n  gesture?: ComposedGesture | GestureType;\r\n}\r\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\r\n  props\r\n) => {\r\n  const gestureConfig = props.gesture;\r\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\r\n  const useAnimated =\r\n    gesture.find((gesture) =>\r\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\r\n    ) != null;\r\n  const viewRef = useRef(null);\r\n  const firstRenderRef = useRef(true);\r\n\r\n  const preparedGesture = React.useRef<GestureConfigReference>({\r\n    config: gesture,\r\n    animatedEventHandler: null,\r\n    animatedHandlers: null,\r\n    firstExecution: true,\r\n    useAnimated: useAnimated,\r\n  }).current;\r\n\r\n  if (useAnimated !== preparedGesture.useAnimated) {\r\n    throw new Error(\r\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\r\n    );\r\n  }\r\n\r\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\r\n  // config update will be enough as all necessary items are stored in shared values anyway\r\n  const needsToRebuildReanimatedEvent =\r\n    preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\r\n\r\n  if (preparedGesture.firstExecution) {\r\n    gestureConfig?.initialize?.();\r\n  }\r\n\r\n  if (useAnimated) {\r\n    // Whether animatedGesture or gesture is used shouldn't change\r\n    // during while an app is running\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\r\n  }\r\n\r\n  useEffect(() => {\r\n    firstRenderRef.current = true;\r\n    const viewTag = findNodeHandle(viewRef.current) as number;\r\n    attachHandlers({\r\n      preparedGesture,\r\n      gestureConfig,\r\n      gesture,\r\n      viewTag,\r\n      useAnimated,\r\n    });\r\n\r\n    return () => {\r\n      dropHandlers(preparedGesture);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!firstRenderRef.current) {\r\n      const viewTag = findNodeHandle(viewRef.current) as number;\r\n\r\n      if (needsToReattach(preparedGesture, gesture)) {\r\n        dropHandlers(preparedGesture);\r\n        attachHandlers({\r\n          preparedGesture,\r\n          gestureConfig,\r\n          gesture,\r\n          viewTag,\r\n          useAnimated,\r\n        });\r\n      } else {\r\n        updateHandlers(preparedGesture, gestureConfig, gesture);\r\n      }\r\n    } else {\r\n      firstRenderRef.current = false;\r\n    }\r\n  }, [props]);\r\n\r\n  if (useAnimated) {\r\n    return (\r\n      <AnimatedWrap\r\n        ref={viewRef}\r\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\r\n        {props.children}\r\n      </AnimatedWrap>\r\n    );\r\n  } else {\r\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\r\n  }\r\n};\r\n\r\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\r\n  render() {\r\n    // I don't think that fighting with types over such a simple function is worth it\r\n    // The only thing it does is add 'collapsable: false' to the child component\r\n    // to make sure it is in the native view hierarchy so the detector can find\r\n    // correct viewTag to attach to.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const child: any = React.Children.only(this.props.children);\r\n\r\n    return React.cloneElement(\r\n      child,\r\n      { collapsable: false },\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n      child.props.children\r\n    );\r\n  }\r\n}\r\n\r\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\r\n"]}