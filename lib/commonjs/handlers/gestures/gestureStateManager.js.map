{"version":3,"sources":["gestureStateManager.ts"],"names":["GestureStateManager","create","handlerTag","begin","Reanimated","setGestureState","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"mappings":";;;;;;;AAAA;;AACA;;AASO,MAAMA,mBAAmB,GAAG;AACjCC,EAAAA,MAAM,CAACC,UAAD,EAA8C;AAClD;;AACA,WAAO;AACLC,MAAAA,KAAK,EAAE,MAAM;AACX;;AACA,YAAIC,6BAAJ,EAAgB;AACdA,wCAAWC,eAAX,CAA2BH,UAA3B,EAAuCI,aAAMC,KAA7C;AACD,SAFD,MAEO;AACLC,UAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD;AACF,OAVI;AAYLC,MAAAA,QAAQ,EAAE,MAAM;AACd;;AACA,YAAIN,6BAAJ,EAAgB;AACdA,wCAAWC,eAAX,CAA2BH,UAA3B,EAAuCI,aAAMK,MAA7C;AACD,SAFD,MAEO;AACLH,UAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD;AACF,OArBI;AAuBLG,MAAAA,IAAI,EAAE,MAAM;AACV;;AACA,YAAIR,6BAAJ,EAAgB;AACdA,wCAAWC,eAAX,CAA2BH,UAA3B,EAAuCI,aAAMO,MAA7C;AACD,SAFD,MAEO;AACLL,UAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD;AACF,OAhCI;AAkCLK,MAAAA,GAAG,EAAE,MAAM;AACT;;AACA,YAAIV,6BAAJ,EAAgB;AACdA,wCAAWC,eAAX,CAA2BH,UAA3B,EAAuCI,aAAMS,GAA7C;AACD,SAFD,MAEO;AACLP,UAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD;AACF;AA3CI,KAAP;AA6CD;;AAhDgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\r\nimport { State } from '../../State';\r\n\r\nexport interface GestureStateManagerType {\r\n  begin: () => void;\r\n  activate: () => void;\r\n  fail: () => void;\r\n  end: () => void;\r\n}\r\n\r\nexport const GestureStateManager = {\r\n  create(handlerTag: number): GestureStateManagerType {\r\n    'worklet';\r\n    return {\r\n      begin: () => {\r\n        'worklet';\r\n        if (Reanimated) {\r\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\r\n        } else {\r\n          console.warn(\r\n            'react-native-reanimated is required in order to use synchronous state management'\r\n          );\r\n        }\r\n      },\r\n\r\n      activate: () => {\r\n        'worklet';\r\n        if (Reanimated) {\r\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\r\n        } else {\r\n          console.warn(\r\n            'react-native-reanimated is required in order to use synchronous state management'\r\n          );\r\n        }\r\n      },\r\n\r\n      fail: () => {\r\n        'worklet';\r\n        if (Reanimated) {\r\n          Reanimated.setGestureState(handlerTag, State.FAILED);\r\n        } else {\r\n          console.warn(\r\n            'react-native-reanimated is required in order to use synchronous state management'\r\n          );\r\n        }\r\n      },\r\n\r\n      end: () => {\r\n        'worklet';\r\n        if (Reanimated) {\r\n          Reanimated.setGestureState(handlerTag, State.END);\r\n        } else {\r\n          console.warn(\r\n            'react-native-reanimated is required in order to use synchronous state management'\r\n          );\r\n        }\r\n      },\r\n    };\r\n  },\r\n};\r\n"]}