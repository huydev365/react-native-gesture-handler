{"version":3,"sources":["rotationGesture.ts"],"names":["changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","RotationGesture","ContinousBaseGesture","constructor","handlerName","onChange","callback","handlers"],"mappings":";;;;;;;AAAA;;AAQA,SAASA,qBAAT,CACEC,OADF,EAEEC,QAFF,EAGE;AACA;;AACA,MAAIC,aAAJ;;AACA,MAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1BD,IAAAA,aAAa,GAAG;AACdE,MAAAA,cAAc,EAAEJ,OAAO,CAACK;AADV,KAAhB;AAGD,GAJD,MAIO;AACLH,IAAAA,aAAa,GAAG;AACdE,MAAAA,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;AAD9B,KAAhB;AAGD;;AAED,SAAO,EAAE,GAAGL,OAAL;AAAc,OAAGE;AAAjB,GAAP;AACD;;AAEM,MAAMI,eAAN,SAA8BC,6BAA9B,CAGL;AACAC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,WAAL,GAAmB,wBAAnB;AACD;;AAEDC,EAAAA,QAAQ,CACNC,QADM,EAMN;AACA;AACA,SAAKC,QAAL,CAAcb,qBAAd,GAAsCA,qBAAtC;AACA,WAAO,MAAMW,QAAN,CAAeC,QAAf,CAAP;AACD;;AAjBD","sourcesContent":["import { ContinousBaseGesture } from './gesture';\r\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\r\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\r\n\r\ntype RotationGestureChangeEventPayload = {\r\n  rotationChange: number;\r\n};\r\n\r\nfunction changeEventCalculator(\r\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\r\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\r\n) {\r\n  'worklet';\r\n  let changePayload: RotationGestureChangeEventPayload;\r\n  if (previous === undefined) {\r\n    changePayload = {\r\n      rotationChange: current.rotation,\r\n    };\r\n  } else {\r\n    changePayload = {\r\n      rotationChange: current.rotation - previous.rotation,\r\n    };\r\n  }\r\n\r\n  return { ...current, ...changePayload };\r\n}\r\n\r\nexport class RotationGesture extends ContinousBaseGesture<\r\n  RotationGestureHandlerEventPayload,\r\n  RotationGestureChangeEventPayload\r\n> {\r\n  constructor() {\r\n    super();\r\n\r\n    this.handlerName = 'RotationGestureHandler';\r\n  }\r\n\r\n  onChange(\r\n    callback: (\r\n      event: GestureUpdateEvent<\r\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\r\n      >\r\n    ) => void\r\n  ) {\r\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\r\n    this.handlers.changeEventCalculator = changeEventCalculator;\r\n    return super.onChange(callback);\r\n  }\r\n}\r\n\r\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\r\n"]}