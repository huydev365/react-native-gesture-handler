{"version":3,"sources":["manualGesture.ts"],"names":["changeEventCalculator","current","_previous","ManualGesture","ContinousBaseGesture","constructor","handlerName","onChange","callback","handlers"],"mappings":";;;;;;;AACA;;AAEA,SAASA,qBAAT,CACEC,OADF,EAEEC,SAFF,EAGE;AACA;;AACA,SAAOD,OAAP;AACD;;AAEM,MAAME,aAAN,SAA4BC,6BAA5B,CAGL;AACAC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,WAAL,GAAmB,sBAAnB;AACD;;AAEDC,EAAAA,QAAQ,CACNC,QADM,EAEN;AACA;AACA,SAAKC,QAAL,CAAcT,qBAAd,GAAsCA,qBAAtC;AACA,WAAO,MAAMO,QAAN,CAAeC,QAAf,CAAP;AACD;;AAbD","sourcesContent":["import { GestureUpdateEvent } from '../gestureHandlerCommon';\r\nimport { ContinousBaseGesture } from './gesture';\r\n\r\nfunction changeEventCalculator(\r\n  current: GestureUpdateEvent<Record<string, never>>,\r\n  _previous?: GestureUpdateEvent<Record<string, never>>\r\n) {\r\n  'worklet';\r\n  return current;\r\n}\r\n\r\nexport class ManualGesture extends ContinousBaseGesture<\r\n  Record<string, never>,\r\n  Record<string, never>\r\n> {\r\n  constructor() {\r\n    super();\r\n\r\n    this.handlerName = 'ManualGestureHandler';\r\n  }\r\n\r\n  onChange(\r\n    callback: (event: GestureUpdateEvent<Record<string, never>>) => void\r\n  ) {\r\n    // @ts-ignore TS being overprotective, Record<string, never> is Record\r\n    this.handlers.changeEventCalculator = changeEventCalculator;\r\n    return super.onChange(callback);\r\n  }\r\n}\r\n\r\nexport type ManualGestureType = InstanceType<typeof ManualGesture>;\r\n"]}