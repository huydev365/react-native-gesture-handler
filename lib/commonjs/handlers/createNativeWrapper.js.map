{"version":3,"sources":["createNativeWrapper.tsx"],"names":["NATIVE_WRAPPER_PROPS_FILTER","nativeViewProps","createNativeWrapper","Component","config","ComponentWrapper","React","forwardRef","props","ref","gestureHandlerProps","Object","keys","reduce","res","key","allowedKeys","includes","_ref","_gestureHandlerRef","node","current","handlerTag","displayName"],"mappings":";;;;;;;AAAA;;AAGA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,2BAA2B,GAAG,CAClC,GAAGC,yCAD+B,EAElC,uBAFkC,EAGlC,6BAHkC,CAApC;;AAMe,SAASC,mBAAT,CACbC,SADa,EAEbC,MAA+C,GAAG,EAFrC,EAGb;AACA,QAAMC,gBAAgB,gBAAGC,KAAK,CAACC,UAAN,CAGvB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAChB;AACA,UAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAC1B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ;AACA,YAAMC,WAA8B,GAAGhB,2BAAvC;;AACA,UAAIgB,WAAW,CAACC,QAAZ,CAAqBF,GAArB,CAAJ,EAA+B;AAC7B;AACAD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWP,KAAK,CAACO,GAAD,CAAhB;AACD;;AACD,aAAOD,GAAP;AACD,KATyB,EAU1B,EAAE,GAAGV;AAAL,KAV0B,CAUZ;AAVY,KAA5B;;AAYA,UAAMc,IAAI,GAAG,mBAAb;;AACA,UAAMC,kBAAkB,GAAG,mBAA3B;;AACA,mCACEV,GADF,EAEE;AACA,UAAM;AACJ,YAAMW,IAAI,GAAGD,kBAAkB,CAACE,OAAhC,CADI,CAEJ;;AACA,UAAIH,IAAI,CAACG,OAAL,IAAgBD,IAApB,EAA0B;AACxB;AACAF,QAAAA,IAAI,CAACG,OAAL,CAAaC,UAAb,GAA0BF,IAAI,CAACE,UAA/B;AACA,eAAOJ,IAAI,CAACG,OAAZ;AACD;;AACD,aAAO,IAAP;AACD,KAZH,EAaE,CAACH,IAAD,EAAOC,kBAAP,CAbF;AAeA,wBACE,oBAAC,kDAAD,eACMT,mBADN;AAEE;AACA,MAAA,GAAG,EAAES;AAHP,qBAIE,oBAAC,SAAD,eAAeX,KAAf;AAAsB,MAAA,GAAG,EAAEU;AAA3B,OAJF,CADF;AAQD,GA1CwB,CAAzB;AA4CAb,EAAAA,gBAAgB,CAACkB,WAAjB,GAA+BpB,SAAS,CAACoB,WAAV,IAAyB,kBAAxD;AAEA,SAAOlB,gBAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport { useImperativeHandle, useRef } from 'react';\r\n\r\nimport {\r\n  NativeViewGestureHandler,\r\n  NativeViewGestureHandlerProps,\r\n  nativeViewProps,\r\n} from './NativeViewGestureHandler';\r\n\r\n/*\r\n * This array should consist of:\r\n *   - All keys in propTypes from NativeGestureHandler\r\n *     (and all keys in GestureHandlerPropTypes)\r\n *   - 'onGestureHandlerEvent'\r\n *   - 'onGestureHandlerStateChange'\r\n */\r\nconst NATIVE_WRAPPER_PROPS_FILTER = [\r\n  ...nativeViewProps,\r\n  'onGestureHandlerEvent',\r\n  'onGestureHandlerStateChange',\r\n] as const;\r\n\r\nexport default function createNativeWrapper<P>(\r\n  Component: React.ComponentType<P>,\r\n  config: Readonly<NativeViewGestureHandlerProps> = {}\r\n) {\r\n  const ComponentWrapper = React.forwardRef<\r\n    React.ComponentType<any>,\r\n    P & NativeViewGestureHandlerProps\r\n  >((props, ref) => {\r\n    // filter out props that should be passed to gesture handler wrapper\r\n    const gestureHandlerProps = Object.keys(props).reduce(\r\n      (res, key) => {\r\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\r\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\r\n        if (allowedKeys.includes(key)) {\r\n          // @ts-ignore FIXME(TS)\r\n          res[key] = props[key];\r\n        }\r\n        return res;\r\n      },\r\n      { ...config } // watch out not to modify config\r\n    );\r\n    const _ref = useRef<React.ComponentType<P>>();\r\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\r\n    useImperativeHandle(\r\n      ref,\r\n      // @ts-ignore TODO(TS) decide how nulls work in this context\r\n      () => {\r\n        const node = _gestureHandlerRef.current;\r\n        // add handlerTag for relations config\r\n        if (_ref.current && node) {\r\n          // @ts-ignore FIXME(TS) think about createHandler return type\r\n          _ref.current.handlerTag = node.handlerTag;\r\n          return _ref.current;\r\n        }\r\n        return null;\r\n      },\r\n      [_ref, _gestureHandlerRef]\r\n    );\r\n    return (\r\n      <NativeViewGestureHandler\r\n        {...gestureHandlerProps}\r\n        // @ts-ignore TODO(TS)\r\n        ref={_gestureHandlerRef}>\r\n        <Component {...props} ref={_ref} />\r\n      </NativeViewGestureHandler>\r\n    );\r\n  });\r\n\r\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\r\n\r\n  return ComponentWrapper;\r\n}\r\n"]}