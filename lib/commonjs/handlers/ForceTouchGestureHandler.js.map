{"version":3,"sources":["ForceTouchGestureHandler.ts"],"names":["forceTouchGestureHandlerProps","ForceTouchFallback","React","Component","componentDidMount","console","warn","render","props","children","forceTouchHandlerName","ForceTouchGestureHandler","PlatformConstants","forceTouchAvailable","name","allowedProps","baseGestureHandlerProps","config"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAKO,MAAMA,6BAA6B,GAAG,CAC3C,UAD2C,EAE3C,UAF2C,EAG3C,sBAH2C,CAAtC;;;AAMP,MAAMC,kBAAN,SAAiCC,eAAMC,SAAvC,CAAiD;AAE/CC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,IAAR,CACE,8NADF;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKC,KAAL,CAAWC,QAAlB;AACD;;AAT8C;;gBAA3CR,kB,yBACyB,K;;AAoDxB,MAAMS,qBAAqB,GAAG,0BAA9B,C,CAEP;;;AACO,MAAMC,wBAAwB,GAAGC,2GAAmBC,mBAAnB,GACpC,4BAGE;AACAC,EAAAA,IAAI,EAAEJ,qBADN;AAEAK,EAAAA,YAAY,EAAE,CACZ,GAAGC,6CADS,EAEZ,GAAGhB,6BAFS,CAFd;AAMAiB,EAAAA,MAAM,EAAE;AANR,CAHF,CADoC,GAYpChB,kBAZG;;AAcNU,wBAAD,CAAuDE,mBAAvD,GACE,oHAAmBA,mBAAnB,KAA0C,KAD5C","sourcesContent":["import React from 'react';\r\nimport PlatformConstants from '../PlatformConstants';\r\nimport createHandler from './createHandler';\r\nimport {\r\n  BaseGestureHandlerProps,\r\n  baseGestureHandlerProps,\r\n} from './gestureHandlerCommon';\r\n\r\nexport const forceTouchGestureHandlerProps = [\r\n  'minForce',\r\n  'maxForce',\r\n  'feedbackOnActivation',\r\n] as const;\r\n\r\nclass ForceTouchFallback extends React.Component {\r\n  static forceTouchAvailable = false;\r\n  componentDidMount() {\r\n    console.warn(\r\n      'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\r\n    );\r\n  }\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport type ForceTouchGestureHandlerEventPayload = {\r\n  x: number;\r\n  y: number;\r\n  absoluteX: number;\r\n  absoluteY: number;\r\n\r\n  /**\r\n   * The pressure of a touch.\r\n   */\r\n  force: number;\r\n};\r\n\r\nexport interface ForceTouchGestureConfig {\r\n  /**\r\n   *\r\n   * A minimal pressure that is required before handler can activate. Should be a\r\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\r\n   */\r\n  minForce?: number;\r\n\r\n  /**\r\n   * A maximal pressure that could be applied for handler. If the pressure is\r\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\r\n   */\r\n  maxForce?: number;\r\n\r\n  /**\r\n   * Boolean value defining if haptic feedback has to be performed on\r\n   * activation.\r\n   */\r\n  feedbackOnActivation?: boolean;\r\n}\r\n\r\nexport interface ForceTouchGestureHandlerProps\r\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\r\n    ForceTouchGestureConfig {}\r\n\r\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\r\n  forceTouchAvailable: boolean;\r\n};\r\n\r\nexport const forceTouchHandlerName = 'ForceTouchGestureHandler';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\r\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\r\n  ? createHandler<\r\n      ForceTouchGestureHandlerProps,\r\n      ForceTouchGestureHandlerEventPayload\r\n    >({\r\n      name: forceTouchHandlerName,\r\n      allowedProps: [\r\n        ...baseGestureHandlerProps,\r\n        ...forceTouchGestureHandlerProps,\r\n      ] as const,\r\n      config: {},\r\n    })\r\n  : ForceTouchFallback;\r\n\r\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\r\n  PlatformConstants?.forceTouchAvailable || false;\r\n"]}