{"version":3,"sources":["createHandler.ts"],"names":["UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","showedRngh2Notice","showRngh2NoticeIfNeeded","console","warn","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","React","Component","constructor","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Platform,\r\n  Touchable,\r\n  UIManager,\r\n  DeviceEventEmitter,\r\n  EmitterSubscription,\r\n} from 'react-native';\r\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\r\nimport deepEqual from 'lodash/isEqual';\r\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\r\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\r\nimport { State } from '../State';\r\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\r\n\r\nimport {\r\n  BaseGestureHandlerProps,\r\n  filterConfig,\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n  findNodeHandle,\r\n} from './gestureHandlerCommon';\r\nimport { ValueOf } from '../typeUtils';\r\nimport { isJestEnv } from '../utils';\r\n\r\nconst UIManagerAny = UIManager as any;\r\n\r\nconst customGHEventsConfig = {\r\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\r\n  onGestureHandlerStateChange: {\r\n    registrationName: 'onGestureHandlerStateChange',\r\n  },\r\n};\r\n\r\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\r\n// native module.\r\n// Once new event types are registered with react it is possible to dispatch these\r\n// events to all kind of native views.\r\nUIManagerAny.genericDirectEventTypes = {\r\n  ...UIManagerAny.genericDirectEventTypes,\r\n  ...customGHEventsConfig,\r\n};\r\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\r\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\r\n// it compatible with RN 61+\r\nconst UIManagerConstants =\r\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\r\n  UIManagerAny.getConstants?.();\r\n\r\nif (UIManagerConstants) {\r\n  UIManagerConstants.genericDirectEventTypes = {\r\n    ...UIManagerConstants.genericDirectEventTypes,\r\n    ...customGHEventsConfig,\r\n  };\r\n}\r\n\r\n// Wrap JS responder calls and notify gesture handler manager\r\nconst {\r\n  setJSResponder: oldSetJSResponder = () => {\r\n    //no operation\r\n  },\r\n  clearJSResponder: oldClearJSResponder = () => {\r\n    //no operation\r\n  },\r\n} = UIManagerAny;\r\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\r\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\r\n  oldSetJSResponder(tag, blockNativeResponder);\r\n};\r\nUIManagerAny.clearJSResponder = () => {\r\n  RNGestureHandlerModule.handleClearJSResponder();\r\n  oldClearJSResponder();\r\n};\r\n\r\nlet allowTouches = true;\r\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\r\n// Toggled inspector blocks touch events in order to allow inspecting on Android\r\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\r\nif (DEV_ON_ANDROID) {\r\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\r\n    allowTouches = !allowTouches;\r\n  });\r\n}\r\n\r\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\r\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\r\n>;\r\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\r\n  props: HandlerProps<T>\r\n) {\r\n  // TODO(TS) - add type for extract arg\r\n  const extract = (refs: any | any[]) => {\r\n    if (!Array.isArray(refs)) {\r\n      return refs && refs.current === null;\r\n    }\r\n    return refs.some((r) => r && r.current === null);\r\n  };\r\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\r\n}\r\n\r\nconst stateToPropMappings = {\r\n  [State.UNDETERMINED]: undefined,\r\n  [State.BEGAN]: 'onBegan',\r\n  [State.FAILED]: 'onFailed',\r\n  [State.CANCELLED]: 'onCancelled',\r\n  [State.ACTIVE]: 'onActivated',\r\n  [State.END]: 'onEnded',\r\n} as const;\r\n\r\ntype CreateHandlerArgs<\r\n  HandlerPropsT extends Record<string, unknown>\r\n> = Readonly<{\r\n  name: string;\r\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\r\n  config: Readonly<Record<string, unknown>>;\r\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\r\n  customNativeProps?: Readonly<string[]>;\r\n}>;\r\n\r\n// TODO(TS) fix event types\r\ntype InternalEventHandlers = {\r\n  onGestureHandlerEvent?: (event: any) => void;\r\n  onGestureHandlerStateChange?: (event: any) => void;\r\n};\r\n\r\nlet showedRngh2Notice = false;\r\nfunction showRngh2NoticeIfNeeded() {\r\n  if (!showedRngh2Notice) {\r\n    console.warn(\r\n      \"[react-native-gesture-handler] Seems like you're using an old API with gesture components, check out new Gestures system!\"\r\n    );\r\n    showedRngh2Notice = true;\r\n  }\r\n}\r\n\r\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\r\nexport default function createHandler<\r\n  T extends BaseGestureHandlerProps<U>,\r\n  U extends Record<string, unknown>\r\n>({\r\n  name,\r\n  allowedProps = [],\r\n  config = {},\r\n  transformProps,\r\n  customNativeProps = [],\r\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\r\n  interface HandlerState {\r\n    allowTouches: boolean;\r\n  }\r\n  class Handler extends React.Component<\r\n    T & InternalEventHandlers,\r\n    HandlerState\r\n  > {\r\n    static displayName = name;\r\n\r\n    private handlerTag: number;\r\n    private config: Record<string, unknown>;\r\n    private propsRef: React.MutableRefObject<unknown>;\r\n    private viewNode: any;\r\n    private viewTag?: number;\r\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\r\n    private inspectorToggleListener?: EmitterSubscription;\r\n\r\n    constructor(props: T & InternalEventHandlers) {\r\n      super(props);\r\n      this.handlerTag = getNextHandlerTag();\r\n      this.config = {};\r\n      this.propsRef = React.createRef();\r\n      this.state = { allowTouches };\r\n      if (props.id) {\r\n        if (handlerIDToTag[props.id] !== undefined) {\r\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\r\n        }\r\n        handlerIDToTag[props.id] = this.handlerTag;\r\n      }\r\n      if (__DEV__ && !isJestEnv()) {\r\n        showRngh2NoticeIfNeeded();\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      const props: HandlerProps<U> = this.props;\r\n\r\n      if (DEV_ON_ANDROID) {\r\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\r\n          'toggleElementInspector',\r\n          () => {\r\n            this.setState((_) => ({ allowTouches }));\r\n            this.update();\r\n          }\r\n        );\r\n      }\r\n      if (hasUnresolvedRefs(props)) {\r\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\r\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\r\n        // _update method that will try to update native handler props using\r\n        // setImmediate. This makes it so update() function gets called after all\r\n        // react components are mounted and we expect the missing ref object to\r\n        // be resolved by then.\r\n        this.updateEnqueued = setImmediate(() => {\r\n          this.updateEnqueued = null;\r\n          this.update();\r\n        });\r\n      }\r\n\r\n      this.createGestureHandler(\r\n        filterConfig(\r\n          transformProps ? transformProps(this.props) : this.props,\r\n          [...allowedProps, ...customNativeProps],\r\n          config\r\n        )\r\n      );\r\n\r\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const viewTag = findNodeHandle(this.viewNode);\r\n      if (this.viewTag !== viewTag) {\r\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\r\n      }\r\n      this.update();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.inspectorToggleListener?.remove();\r\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\r\n      if (this.updateEnqueued) {\r\n        clearImmediate(this.updateEnqueued);\r\n      }\r\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\r\n      const handlerID: string | undefined = this.props.id;\r\n      if (handlerID) {\r\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n        delete handlerIDToTag[handlerID];\r\n      }\r\n    }\r\n\r\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\r\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\r\n        this.props.onGestureEvent?.(event);\r\n      } else {\r\n        this.props.onGestureHandlerEvent?.(event);\r\n      }\r\n    };\r\n\r\n    // TODO(TS) - make sure this is right type for event\r\n    private onGestureHandlerStateChange = (\r\n      event: HandlerStateChangeEvent<U>\r\n    ) => {\r\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\r\n        this.props.onHandlerStateChange?.(event);\r\n\r\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\r\n        const stateEventName = stateToPropMappings[state];\r\n        const eventHandler = stateEventName && this.props[stateEventName];\r\n        if (eventHandler && typeof eventHandler === 'function') {\r\n          eventHandler(event);\r\n        }\r\n      } else {\r\n        this.props.onGestureHandlerStateChange?.(event);\r\n      }\r\n    };\r\n\r\n    private refHandler = (node: any) => {\r\n      this.viewNode = node;\r\n\r\n      const child = React.Children.only(this.props.children);\r\n      // TODO(TS) fix ref type\r\n      const { ref }: any = child;\r\n      if (ref !== null) {\r\n        if (typeof ref === 'function') {\r\n          ref(node);\r\n        } else {\r\n          ref.current = node;\r\n        }\r\n      }\r\n    };\r\n\r\n    private createGestureHandler = (\r\n      newConfig: Readonly<Record<string, unknown>>\r\n    ) => {\r\n      this.config = newConfig;\r\n\r\n      RNGestureHandlerModule.createGestureHandler(\r\n        name,\r\n        this.handlerTag,\r\n        newConfig\r\n      );\r\n    };\r\n\r\n    private attachGestureHandler = (newViewTag: number) => {\r\n      this.viewTag = newViewTag;\r\n\r\n      if (Platform.OS === 'web') {\r\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\r\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\r\n          this.handlerTag,\r\n          newViewTag,\r\n          false,\r\n          this.propsRef\r\n        );\r\n      } else {\r\n        RNGestureHandlerModule.attachGestureHandler(\r\n          this.handlerTag,\r\n          newViewTag,\r\n          false\r\n        );\r\n      }\r\n    };\r\n\r\n    private updateGestureHandler = (\r\n      newConfig: Readonly<Record<string, unknown>>\r\n    ) => {\r\n      this.config = newConfig;\r\n\r\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\r\n    };\r\n\r\n    private update() {\r\n      const newConfig = filterConfig(\r\n        transformProps ? transformProps(this.props) : this.props,\r\n        [...allowedProps, ...customNativeProps],\r\n        config\r\n      );\r\n      if (!deepEqual(this.config, newConfig)) {\r\n        this.updateGestureHandler(newConfig);\r\n      }\r\n    }\r\n\r\n    setNativeProps(updates: any) {\r\n      const mergedProps = { ...this.props, ...updates };\r\n      const newConfig = filterConfig(\r\n        transformProps ? transformProps(mergedProps) : mergedProps,\r\n        [...allowedProps, ...customNativeProps],\r\n        config\r\n      );\r\n      this.updateGestureHandler(newConfig);\r\n    }\r\n\r\n    render() {\r\n      let gestureEventHandler = this.onGestureHandlerEvent;\r\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\r\n      type OnGestureEventHandlers = {\r\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\r\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\r\n      };\r\n      const {\r\n        onGestureEvent,\r\n        onGestureHandlerEvent,\r\n      }: OnGestureEventHandlers = this.props;\r\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\r\n        // If it's not a method it should be an native Animated.event\r\n        // object. We set it directly as the handler for the view\r\n        // In this case nested handlers are not going to be supported\r\n        if (onGestureHandlerEvent) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n        gestureEventHandler = onGestureEvent;\r\n      } else {\r\n        if (\r\n          onGestureHandlerEvent &&\r\n          typeof onGestureHandlerEvent !== 'function'\r\n        ) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n      }\r\n\r\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\r\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\r\n      type OnGestureStateChangeHandlers = {\r\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\r\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\r\n      };\r\n      const {\r\n        onHandlerStateChange,\r\n        onGestureHandlerStateChange,\r\n      }: OnGestureStateChangeHandlers = this.props;\r\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\r\n        // If it's not a method it should be an native Animated.event\r\n        // object. We set it directly as the handler for the view\r\n        // In this case nested handlers are not going to be supported\r\n        if (onGestureHandlerStateChange) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n        gestureStateEventHandler = onHandlerStateChange;\r\n      } else {\r\n        if (\r\n          onGestureHandlerStateChange &&\r\n          typeof onGestureHandlerStateChange !== 'function'\r\n        ) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n      }\r\n      const events = {\r\n        onGestureHandlerEvent: this.state.allowTouches\r\n          ? gestureEventHandler\r\n          : undefined,\r\n        onGestureHandlerStateChange: this.state.allowTouches\r\n          ? gestureStateEventHandler\r\n          : undefined,\r\n      };\r\n\r\n      this.propsRef.current = events;\r\n\r\n      const child: any = React.Children.only(this.props.children);\r\n      let grandChildren = child.props.children;\r\n      if (\r\n        Touchable.TOUCH_TARGET_DEBUG &&\r\n        child.type &&\r\n        (child.type === 'RNGestureHandlerButton' ||\r\n          child.type.name === 'View' ||\r\n          child.type.displayName === 'View')\r\n      ) {\r\n        grandChildren = React.Children.toArray(grandChildren);\r\n        grandChildren.push(\r\n          Touchable.renderDebugView({\r\n            color: 'mediumspringgreen',\r\n            hitSlop: child.props.hitSlop,\r\n          })\r\n        );\r\n      }\r\n\r\n      return React.cloneElement(\r\n        child,\r\n        {\r\n          ref: this.refHandler,\r\n          collapsable: false,\r\n          ...(isJestEnv()\r\n            ? {\r\n                handlerType: name,\r\n                handlerTag: this.handlerTag,\r\n              }\r\n            : {}),\r\n          testID: this.props.testID,\r\n          ...events,\r\n        },\r\n        grandChildren\r\n      );\r\n    }\r\n  }\r\n  return Handler;\r\n}\r\n"]}