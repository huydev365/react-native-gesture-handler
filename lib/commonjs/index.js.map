{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AA+CA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AAiBA;;AAOA;;AAMA;;AAMA;;AA8CA;;AASA;;;;AAEA","sourcesContent":["import { initialize } from './init';\r\n\r\nexport { Directions } from './Directions';\r\nexport { State } from './State';\r\nexport { getByGestureTestId, fireGestureHandler } from './jestUtils';\r\nexport { default as gestureHandlerRootHOC } from './gestureHandlerRootHOC';\r\nexport { default as GestureHandlerRootView } from './GestureHandlerRootView';\r\nexport type {\r\n  // event types\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n  // event payloads types\r\n  GestureEventPayload,\r\n  HandlerStateChangeEventPayload,\r\n  // pointer events\r\n  GestureTouchEvent,\r\n  TouchData,\r\n  // new api event types\r\n  GestureUpdateEvent,\r\n  GestureStateChangeEvent,\r\n} from './handlers/gestureHandlerCommon';\r\nexport type { GestureType } from './handlers/gestures/gesture';\r\nexport type {\r\n  TapGestureHandlerEventPayload,\r\n  TapGestureHandlerProps,\r\n} from './handlers/TapGestureHandler';\r\nexport type {\r\n  ForceTouchGestureHandlerEventPayload,\r\n  ForceTouchGestureHandlerProps,\r\n} from './handlers/ForceTouchGestureHandler';\r\nexport type { ForceTouchGestureChangeEventPayload } from './handlers/gestures/forceTouchGesture';\r\nexport type {\r\n  LongPressGestureHandlerEventPayload,\r\n  LongPressGestureHandlerProps,\r\n} from './handlers/LongPressGestureHandler';\r\nexport type {\r\n  PanGestureHandlerEventPayload,\r\n  PanGestureHandlerProps,\r\n} from './handlers/PanGestureHandler';\r\nexport type { PanGestureChangeEventPayload } from './handlers/gestures/panGesture';\r\nexport type {\r\n  PinchGestureHandlerEventPayload,\r\n  PinchGestureHandlerProps,\r\n} from './handlers/PinchGestureHandler';\r\nexport type { PinchGestureChangeEventPayload } from './handlers/gestures/pinchGesture';\r\nexport type {\r\n  RotationGestureHandlerEventPayload,\r\n  RotationGestureHandlerProps,\r\n} from './handlers/RotationGestureHandler';\r\nexport type {\r\n  FlingGestureHandlerEventPayload,\r\n  FlingGestureHandlerProps,\r\n} from './handlers/FlingGestureHandler';\r\nexport { TapGestureHandler } from './handlers/TapGestureHandler';\r\nexport { ForceTouchGestureHandler } from './handlers/ForceTouchGestureHandler';\r\nexport { LongPressGestureHandler } from './handlers/LongPressGestureHandler';\r\nexport { PanGestureHandler } from './handlers/PanGestureHandler';\r\nexport { PinchGestureHandler } from './handlers/PinchGestureHandler';\r\nexport { RotationGestureHandler } from './handlers/RotationGestureHandler';\r\nexport { FlingGestureHandler } from './handlers/FlingGestureHandler';\r\nexport { default as createNativeWrapper } from './handlers/createNativeWrapper';\r\nexport type {\r\n  NativeViewGestureHandlerPayload,\r\n  NativeViewGestureHandlerProps,\r\n} from './handlers/NativeViewGestureHandler';\r\nexport { GestureDetector } from './handlers/gestures/GestureDetector';\r\nexport { GestureObjects as Gesture } from './handlers/gestures/gestureObjects';\r\nexport type { TapGestureType as TapGesture } from './handlers/gestures/tapGesture';\r\nexport type { PanGestureType as PanGesture } from './handlers/gestures/panGesture';\r\nexport type { FlingGestureType as FlingGesture } from './handlers/gestures/flingGesture';\r\nexport type { LongPressGestureType as LongPressGesture } from './handlers/gestures/longPressGesture';\r\nexport type { PinchGestureType as PinchGesture } from './handlers/gestures/pinchGesture';\r\nexport type { RotationGestureType as RotationGesture } from './handlers/gestures/rotationGesture';\r\nexport type { ForceTouchGestureType as ForceTouchGesture } from './handlers/gestures/forceTouchGesture';\r\nexport type { NativeGestureType as NativeGesture } from './handlers/gestures/nativeGesture';\r\nexport type { ManualGestureType as ManualGesture } from './handlers/gestures/manualGesture';\r\nexport type {\r\n  ComposedGestureType as ComposedGesture,\r\n  RaceGestureType as RaceGesture,\r\n  SimultaneousGestureType as SimultaneousGesture,\r\n  ExclusiveGestureType as ExclusiveGesture,\r\n} from './handlers/gestures/gestureComposition';\r\nexport type { GestureStateManagerType as GestureStateManager } from './handlers/gestures/gestureStateManager';\r\nexport { NativeViewGestureHandler } from './handlers/NativeViewGestureHandler';\r\nexport type {\r\n  RawButtonProps,\r\n  BaseButtonProps,\r\n  RectButtonProps,\r\n  BorderlessButtonProps,\r\n} from './components/GestureButtons';\r\nexport {\r\n  RawButton,\r\n  BaseButton,\r\n  RectButton,\r\n  BorderlessButton,\r\n} from './components/GestureButtons';\r\nexport {\r\n  TouchableHighlight,\r\n  TouchableNativeFeedback,\r\n  TouchableOpacity,\r\n  TouchableWithoutFeedback,\r\n} from './components/touchables';\r\nexport {\r\n  ScrollView,\r\n  Switch,\r\n  TextInput,\r\n  DrawerLayoutAndroid,\r\n  FlatList,\r\n} from './components/GestureComponents';\r\nexport type {\r\n  //events\r\n  GestureHandlerGestureEvent,\r\n  GestureHandlerStateChangeEvent,\r\n  //event payloads\r\n  GestureHandlerGestureEventNativeEvent,\r\n  GestureHandlerStateChangeNativeEvent,\r\n  NativeViewGestureHandlerGestureEvent,\r\n  NativeViewGestureHandlerStateChangeEvent,\r\n  TapGestureHandlerGestureEvent,\r\n  TapGestureHandlerStateChangeEvent,\r\n  ForceTouchGestureHandlerGestureEvent,\r\n  ForceTouchGestureHandlerStateChangeEvent,\r\n  LongPressGestureHandlerGestureEvent,\r\n  LongPressGestureHandlerStateChangeEvent,\r\n  PanGestureHandlerGestureEvent,\r\n  PanGestureHandlerStateChangeEvent,\r\n  PinchGestureHandlerGestureEvent,\r\n  PinchGestureHandlerStateChangeEvent,\r\n  RotationGestureHandlerGestureEvent,\r\n  RotationGestureHandlerStateChangeEvent,\r\n  FlingGestureHandlerGestureEvent,\r\n  FlingGestureHandlerStateChangeEvent,\r\n  // handlers props\r\n  NativeViewGestureHandlerProperties,\r\n  TapGestureHandlerProperties,\r\n  LongPressGestureHandlerProperties,\r\n  PanGestureHandlerProperties,\r\n  PinchGestureHandlerProperties,\r\n  RotationGestureHandlerProperties,\r\n  FlingGestureHandlerProperties,\r\n  ForceTouchGestureHandlerProperties,\r\n  // buttons props\r\n  RawButtonProperties,\r\n  BaseButtonProperties,\r\n  RectButtonProperties,\r\n  BorderlessButtonProperties,\r\n} from './handlers/gestureHandlerTypesCompat';\r\n\r\nexport { default as Swipeable } from './components/Swipeable';\r\nexport type {\r\n  DrawerLayoutProps,\r\n  DrawerPosition,\r\n  DrawerState,\r\n  DrawerType,\r\n  DrawerLockMode,\r\n  DrawerKeyboardDismissMode,\r\n} from './components/DrawerLayout';\r\nexport { default as DrawerLayout } from './components/DrawerLayout';\r\n\r\ninitialize();\r\n"]}