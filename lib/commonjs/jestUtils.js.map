{"version":3,"sources":["jestUtils.ts"],"names":["handlersDefaultEvents","flingHandlerName","x","y","absoluteX","absoluteY","numberOfPointers","forceTouchHandlerName","force","longPressHandlerName","duration","nativeViewHandlerName","pointerInside","panHandlerName","translationX","translationY","velocityX","velocityY","pinchHandlerName","focalX","focalY","scale","velocity","rotationHandlerName","anchorX","anchorY","rotation","tapHandlerName","isGesture","componentOrGesture","BaseGesture","wrapWithNativeEvent","event","nativeEvent","fillOldStateChanges","previousEvent","currentEvent","isFirstEvent","oldState","State","UNDETERMINED","isGestureStateEvent","state","validateStateTransitions","stringify","JSON","errorMsgWithBothEvents","description","errorMsgWithCurrentEvent","BEGAN","fillMissingDefaultsFor","handlerType","handlerTag","isDiscreteHandler","fillMissingStatesTransitions","events","_events","lastEvent","length","firstEvent","shouldDuplicateFirstEvent","hasState","duplicated","unshift","shouldDuplicateLastEvent","END","FAILED","CANCELLED","push","isWithoutState","noEventsLeft","trueFn","fillEventsForCurrentState","shouldConsumeEvent","shouldTransitionToNextState","peekCurrentEvent","peekNextEvent","consumeCurrentEvent","shift","nextEvent","currentRequiredState","REQUIRED_EVENTS","currentStateIdx","eventData","shouldUseEvent","transformedEvents","ACTIVE","hasAllStates","iterations","nextRequiredState","e","getHandlerData","gesture","emitEvent","eventName","args","DeviceEventEmitter","emit","handlerName","gestureHandlerComponent","props","fireGestureHandler","eventList","_","map","lastSentEvent","hasChangedState","getByGestureTestId","testID","handler","Error"],"mappings":"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","sourcesContent":["import { fireEvent } from '@testing-library/react-native';\r\nimport invariant from 'invariant';\r\nimport { DeviceEventEmitter } from 'react-native';\r\nimport { ReactTestInstance } from 'react-test-renderer';\r\nimport {\r\n  FlingGestureHandler,\r\n  FlingGestureHandlerEventPayload,\r\n  flingHandlerName,\r\n} from './handlers/FlingGestureHandler';\r\nimport {\r\n  ForceTouchGestureHandler,\r\n  ForceTouchGestureHandlerEventPayload,\r\n  forceTouchHandlerName,\r\n} from './handlers/ForceTouchGestureHandler';\r\nimport {\r\n  BaseGestureHandlerProps,\r\n  GestureEvent,\r\n  HandlerStateChangeEvent,\r\n} from './handlers/gestureHandlerCommon';\r\nimport { FlingGesture } from './handlers/gestures/flingGesture';\r\nimport { ForceTouchGesture } from './handlers/gestures/forceTouchGesture';\r\nimport { BaseGesture, GestureType } from './handlers/gestures/gesture';\r\nimport { LongPressGesture } from './handlers/gestures/longPressGesture';\r\nimport { NativeGesture } from './handlers/gestures/nativeGesture';\r\nimport { PanGesture } from './handlers/gestures/panGesture';\r\nimport { PinchGesture } from './handlers/gestures/pinchGesture';\r\nimport { RotationGesture } from './handlers/gestures/rotationGesture';\r\nimport { TapGesture } from './handlers/gestures/tapGesture';\r\nimport { findHandlerByTestID } from './handlers/handlersRegistry';\r\nimport {\r\n  LongPressGestureHandler,\r\n  LongPressGestureHandlerEventPayload,\r\n  longPressHandlerName,\r\n} from './handlers/LongPressGestureHandler';\r\nimport {\r\n  NativeViewGestureHandler,\r\n  NativeViewGestureHandlerPayload,\r\n  nativeViewHandlerName,\r\n} from './handlers/NativeViewGestureHandler';\r\nimport {\r\n  PanGestureHandler,\r\n  PanGestureHandlerEventPayload,\r\n  panHandlerName,\r\n} from './handlers/PanGestureHandler';\r\nimport {\r\n  PinchGestureHandler,\r\n  PinchGestureHandlerEventPayload,\r\n  pinchHandlerName,\r\n} from './handlers/PinchGestureHandler';\r\nimport {\r\n  RotationGestureHandler,\r\n  RotationGestureHandlerEventPayload,\r\n  rotationHandlerName,\r\n} from './handlers/RotationGestureHandler';\r\nimport {\r\n  TapGestureHandler,\r\n  TapGestureHandlerEventPayload,\r\n  tapHandlerName,\r\n} from './handlers/TapGestureHandler';\r\nimport { State } from './State';\r\nimport { hasProperty, withPrevAndCurrent } from './utils';\r\n\r\ntype GestureHandlerTestEvent<\r\n  TEventPayload extends Record<string, unknown> = Record<string, unknown>\r\n> = (\r\n  | GestureEvent<TEventPayload>\r\n  | HandlerStateChangeEvent<TEventPayload>\r\n)['nativeEvent'];\r\n\r\ntype HandlerNames = keyof DefaultEventsMapping;\r\n\r\ntype WithNumberOfPointers<T> = {\r\n  [P in keyof T]: T[P] & { numberOfPointers: number };\r\n};\r\ntype DefaultEventsMapping = WithNumberOfPointers<{\r\n  [flingHandlerName]: FlingGestureHandlerEventPayload;\r\n  [forceTouchHandlerName]: ForceTouchGestureHandlerEventPayload;\r\n  [longPressHandlerName]: LongPressGestureHandlerEventPayload;\r\n  [nativeViewHandlerName]: NativeViewGestureHandlerPayload;\r\n  [panHandlerName]: PanGestureHandlerEventPayload;\r\n  [pinchHandlerName]: PinchGestureHandlerEventPayload;\r\n  [rotationHandlerName]: RotationGestureHandlerEventPayload;\r\n  [tapHandlerName]: TapGestureHandlerEventPayload;\r\n}>;\r\n\r\nconst handlersDefaultEvents: DefaultEventsMapping = {\r\n  [flingHandlerName]: {\r\n    x: 0,\r\n    y: 0,\r\n    absoluteX: 0,\r\n    absoluteY: 0,\r\n    numberOfPointers: 1,\r\n  },\r\n  [forceTouchHandlerName]: {\r\n    x: 0,\r\n    y: 0,\r\n    absoluteX: 0,\r\n    absoluteY: 0,\r\n    force: 1,\r\n    numberOfPointers: 1,\r\n  },\r\n  [longPressHandlerName]: {\r\n    x: 0,\r\n    y: 0,\r\n    absoluteX: 0,\r\n    absoluteY: 0,\r\n    duration: 100,\r\n    numberOfPointers: 1,\r\n  },\r\n  [nativeViewHandlerName]: {\r\n    pointerInside: true,\r\n    numberOfPointers: 1,\r\n  },\r\n  [panHandlerName]: {\r\n    x: 0,\r\n    y: 0,\r\n    absoluteX: 0,\r\n    absoluteY: 0,\r\n    translationX: 100,\r\n    translationY: 0,\r\n    velocityX: 3,\r\n    velocityY: 0,\r\n    numberOfPointers: 1,\r\n  },\r\n  [pinchHandlerName]: {\r\n    focalX: 0,\r\n    focalY: 0,\r\n    scale: 2,\r\n    velocity: 1,\r\n    numberOfPointers: 2,\r\n  },\r\n  [rotationHandlerName]: {\r\n    anchorX: 0,\r\n    anchorY: 0,\r\n    rotation: 3.14,\r\n    velocity: 2,\r\n    numberOfPointers: 2,\r\n  },\r\n  [tapHandlerName]: {\r\n    x: 0,\r\n    y: 0,\r\n    absoluteX: 0,\r\n    absoluteY: 0,\r\n    numberOfPointers: 1,\r\n  },\r\n};\r\n\r\nfunction isGesture(\r\n  componentOrGesture: ReactTestInstance | GestureType\r\n): componentOrGesture is GestureType {\r\n  return componentOrGesture instanceof BaseGesture;\r\n}\r\n\r\ninterface WrappedGestureHandlerTestEvent {\r\n  nativeEvent: GestureHandlerTestEvent;\r\n}\r\nfunction wrapWithNativeEvent(\r\n  event: GestureHandlerTestEvent\r\n): WrappedGestureHandlerTestEvent {\r\n  return { nativeEvent: event };\r\n}\r\n\r\nfunction fillOldStateChanges(\r\n  previousEvent: GestureHandlerTestEvent | null,\r\n  currentEvent: Omit<GestureHandlerTestEvent, 'oldState'>\r\n): GestureHandlerTestEvent {\r\n  const isFirstEvent = previousEvent === null;\r\n  if (isFirstEvent) {\r\n    return {\r\n      oldState: State.UNDETERMINED,\r\n      ...currentEvent,\r\n    } as GestureHandlerTestEvent;\r\n  }\r\n\r\n  const isGestureStateEvent = previousEvent.state !== currentEvent.state;\r\n  if (isGestureStateEvent) {\r\n    return {\r\n      oldState: previousEvent.state,\r\n      ...currentEvent,\r\n    } as GestureHandlerTestEvent;\r\n  } else {\r\n    return currentEvent as GestureHandlerTestEvent;\r\n  }\r\n}\r\n\r\ntype EventWithStates = Partial<\r\n  Pick<GestureHandlerTestEvent, 'oldState' | 'state'>\r\n>;\r\nfunction validateStateTransitions(\r\n  previousEvent: EventWithStates | null,\r\n  currentEvent: EventWithStates\r\n) {\r\n  function stringify(event: Record<string, unknown> | null) {\r\n    return JSON.stringify(event, null, 2);\r\n  }\r\n  function errorMsgWithBothEvents(description: string) {\r\n    return `${description}, invalid event: ${stringify(\r\n      currentEvent\r\n    )}, previous event: ${stringify(previousEvent)}`;\r\n  }\r\n\r\n  function errorMsgWithCurrentEvent(description: string) {\r\n    return `${description}, invalid event: ${stringify(currentEvent)}`;\r\n  }\r\n\r\n  invariant(\r\n    hasProperty(currentEvent, 'state'),\r\n    errorMsgWithCurrentEvent('every event must have state')\r\n  );\r\n\r\n  const isFirstEvent = previousEvent === null;\r\n  if (isFirstEvent) {\r\n    invariant(\r\n      currentEvent.state === State.BEGAN,\r\n      errorMsgWithCurrentEvent('first event must have BEGAN state')\r\n    );\r\n  }\r\n\r\n  if (previousEvent !== null) {\r\n    if (previousEvent.state !== currentEvent.state) {\r\n      invariant(\r\n        hasProperty(currentEvent, 'oldState'),\r\n        errorMsgWithCurrentEvent(\r\n          'when state changes, oldState field should be present'\r\n        )\r\n      );\r\n      invariant(\r\n        currentEvent.oldState === previousEvent.state,\r\n        errorMsgWithBothEvents(\r\n          \"when state changes, oldState should be the same as previous event' state\"\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  return currentEvent;\r\n}\r\n\r\ntype EventWithoutStates = Omit<GestureHandlerTestEvent, 'oldState' | 'state'>;\r\ninterface HandlerInfo {\r\n  handlerType: HandlerNames;\r\n  handlerTag: number;\r\n}\r\nfunction fillMissingDefaultsFor({\r\n  handlerType,\r\n  handlerTag,\r\n}: HandlerInfo): (\r\n  event: Partial<GestureHandlerTestEvent>\r\n) => EventWithoutStates {\r\n  return (event) => {\r\n    return {\r\n      ...handlersDefaultEvents[handlerType],\r\n      ...event,\r\n      handlerTag,\r\n    };\r\n  };\r\n}\r\n\r\nfunction isDiscreteHandler(handlerType: HandlerNames) {\r\n  return (\r\n    handlerType === 'TapGestureHandler' ||\r\n    handlerType === 'LongPressGestureHandler'\r\n  );\r\n}\r\n\r\nfunction fillMissingStatesTransitions(\r\n  events: EventWithoutStates[],\r\n  isDiscreteHandler: boolean\r\n): EventWithoutStates[] {\r\n  type Event = EventWithoutStates | null;\r\n  const _events = [...events];\r\n  const lastEvent = _events[_events.length - 1] ?? null;\r\n  const firstEvent = _events[0] ?? null;\r\n\r\n  const shouldDuplicateFirstEvent =\r\n    !isDiscreteHandler && !hasState(State.BEGAN)(firstEvent);\r\n  if (shouldDuplicateFirstEvent) {\r\n    const duplicated = { ...firstEvent, state: State.BEGAN };\r\n    // @ts-ignore badly typed, property may exist and we don't want to copy it\r\n    delete duplicated.oldState;\r\n    _events.unshift(duplicated);\r\n  }\r\n\r\n  const shouldDuplicateLastEvent =\r\n    !hasState(State.END)(lastEvent) ||\r\n    !hasState(State.FAILED)(lastEvent) ||\r\n    !hasState(State.CANCELLED)(lastEvent);\r\n\r\n  if (shouldDuplicateLastEvent) {\r\n    const duplicated = { ...lastEvent, state: State.END };\r\n    // @ts-ignore badly typed, property may exist and we don't want to copy it\r\n    delete duplicated.oldState;\r\n    _events.push(duplicated);\r\n  }\r\n\r\n  function isWithoutState(event: Event) {\r\n    return event !== null && !hasProperty(event, 'state');\r\n  }\r\n  function hasState(state: State) {\r\n    return (event: Event) => event !== null && event.state === state;\r\n  }\r\n  function noEventsLeft(event: Event) {\r\n    return event === null;\r\n  }\r\n\r\n  function trueFn() {\r\n    return true;\r\n  }\r\n  interface Args {\r\n    shouldConsumeEvent?: (event: Event) => boolean;\r\n    shouldTransitionToNextState?: (nextEvent: Event) => boolean;\r\n  }\r\n  function fillEventsForCurrentState({\r\n    shouldConsumeEvent = trueFn,\r\n    shouldTransitionToNextState = trueFn,\r\n  }: Args) {\r\n    function peekCurrentEvent(): Event {\r\n      return _events[0] ?? null;\r\n    }\r\n    function peekNextEvent(): Event {\r\n      return _events[1] ?? null;\r\n    }\r\n    function consumeCurrentEvent() {\r\n      _events.shift();\r\n    }\r\n    const currentEvent = peekCurrentEvent();\r\n    const nextEvent = peekNextEvent();\r\n    const currentRequiredState = REQUIRED_EVENTS[currentStateIdx];\r\n\r\n    let eventData = {};\r\n    const shouldUseEvent = shouldConsumeEvent(currentEvent);\r\n    if (shouldUseEvent) {\r\n      eventData = currentEvent!;\r\n      consumeCurrentEvent();\r\n    }\r\n    transformedEvents.push({ state: currentRequiredState, ...eventData });\r\n    if (shouldTransitionToNextState(nextEvent)) {\r\n      currentStateIdx++;\r\n    }\r\n  }\r\n\r\n  const REQUIRED_EVENTS = [State.BEGAN, State.ACTIVE, State.END];\r\n\r\n  let currentStateIdx = 0;\r\n  const transformedEvents: EventWithoutStates[] = [];\r\n  let hasAllStates;\r\n  let iterations = 0;\r\n  do {\r\n    const nextRequiredState = REQUIRED_EVENTS[currentStateIdx];\r\n    if (nextRequiredState === State.BEGAN) {\r\n      fillEventsForCurrentState({\r\n        shouldConsumeEvent: (e: Event) =>\r\n          isWithoutState(e) || hasState(State.BEGAN)(e),\r\n      });\r\n    } else if (nextRequiredState === State.ACTIVE) {\r\n      const shouldConsumeEvent = (e: Event) =>\r\n        isWithoutState(e) || hasState(State.ACTIVE)(e);\r\n      const shouldTransitionToNextState = (nextEvent: Event) =>\r\n        noEventsLeft(nextEvent) ||\r\n        hasState(State.END)(nextEvent) ||\r\n        hasState(State.FAILED)(nextEvent) ||\r\n        hasState(State.CANCELLED)(nextEvent);\r\n\r\n      fillEventsForCurrentState({\r\n        shouldConsumeEvent,\r\n        shouldTransitionToNextState,\r\n      });\r\n    } else if (nextRequiredState === State.END) {\r\n      fillEventsForCurrentState({});\r\n    }\r\n    hasAllStates = currentStateIdx === REQUIRED_EVENTS.length;\r\n\r\n    invariant(\r\n      iterations++ <= 500,\r\n      'exceeded max number of iterations, please report a bug in RNGH repository with your test case'\r\n    );\r\n  } while (!hasAllStates);\r\n\r\n  return transformedEvents;\r\n}\r\n\r\ntype EventEmitter = (\r\n  eventName: string,\r\n  args: { nativeEvent: GestureHandlerTestEvent }\r\n) => void;\r\ninterface HandlerData {\r\n  emitEvent: EventEmitter;\r\n  handlerType: HandlerNames;\r\n  handlerTag: number;\r\n}\r\nfunction getHandlerData(\r\n  componentOrGesture: ReactTestInstance | GestureType\r\n): HandlerData {\r\n  if (isGesture(componentOrGesture)) {\r\n    const gesture = componentOrGesture;\r\n    return {\r\n      emitEvent: (eventName, args) => {\r\n        DeviceEventEmitter.emit(eventName, args.nativeEvent);\r\n      },\r\n      handlerType: gesture.handlerName as HandlerNames,\r\n      handlerTag: gesture.handlerTag,\r\n    };\r\n  }\r\n  const gestureHandlerComponent = componentOrGesture;\r\n  return {\r\n    emitEvent: (eventName, args) => {\r\n      fireEvent(gestureHandlerComponent, eventName, args);\r\n    },\r\n    handlerType: gestureHandlerComponent.props.handlerType as HandlerNames,\r\n    handlerTag: gestureHandlerComponent.props.handlerTag as number,\r\n  };\r\n}\r\ntype AllGestures =\r\n  | TapGesture\r\n  | PanGesture\r\n  | LongPressGesture\r\n  | RotationGesture\r\n  | PinchGesture\r\n  | FlingGesture\r\n  | ForceTouchGesture\r\n  | NativeGesture;\r\n\r\ntype AllHandlers =\r\n  | TapGestureHandler\r\n  | PanGestureHandler\r\n  | LongPressGestureHandler\r\n  | RotationGestureHandler\r\n  | PinchGestureHandler\r\n  | FlingGestureHandler\r\n  | ForceTouchGestureHandler\r\n  | NativeViewGestureHandler;\r\n\r\n// prettier-ignore\r\ntype ClassComponentConstructor<P> = new (props: P) => React.Component<P, any, any>;\r\n\r\ntype ExtractPayloadFromProps<T> = T extends BaseGestureHandlerProps<\r\n  infer TPayload\r\n>\r\n  ? TPayload\r\n  : never;\r\n\r\ntype ExtractConfig<T> = T extends BaseGesture<infer TGesturePayload>\r\n  ? TGesturePayload\r\n  : T extends ClassComponentConstructor<infer THandlerProps>\r\n  ? ExtractPayloadFromProps<THandlerProps>\r\n  : Record<string, unknown>;\r\n\r\nexport function fireGestureHandler<THandler extends AllGestures | AllHandlers>(\r\n  componentOrGesture: ReactTestInstance | GestureType,\r\n  eventList: Partial<GestureHandlerTestEvent<ExtractConfig<THandler>>>[] = []\r\n): void {\r\n  const { emitEvent, handlerType, handlerTag } = getHandlerData(\r\n    componentOrGesture\r\n  );\r\n\r\n  let _ = fillMissingStatesTransitions(\r\n    eventList,\r\n    isDiscreteHandler(handlerType)\r\n  );\r\n  _ = _.map(fillMissingDefaultsFor({ handlerTag, handlerType }));\r\n  _ = withPrevAndCurrent(_, fillOldStateChanges);\r\n  _ = withPrevAndCurrent(_, validateStateTransitions);\r\n  // @ts-ignore TODO\r\n  _ = _.map(wrapWithNativeEvent);\r\n\r\n  const events = (_ as unknown) as WrappedGestureHandlerTestEvent[];\r\n\r\n  const firstEvent = events.shift()!;\r\n\r\n  emitEvent('onGestureHandlerStateChange', firstEvent);\r\n  let lastSentEvent = firstEvent;\r\n  for (const event of events) {\r\n    const hasChangedState =\r\n      lastSentEvent.nativeEvent.state !== event.nativeEvent.state;\r\n\r\n    if (hasChangedState) {\r\n      emitEvent('onGestureHandlerStateChange', event);\r\n    } else {\r\n      emitEvent('onGestureHandlerEvent', event);\r\n    }\r\n    lastSentEvent = event;\r\n  }\r\n}\r\n\r\nexport function getByGestureTestId(testID: string) {\r\n  const handler = findHandlerByTestID(testID);\r\n  if (handler === null) {\r\n    throw new Error(`Handler with id: '${testID}' cannot be found`);\r\n  }\r\n  return handler;\r\n}\r\n"]}